{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { BarChart, Bar, XAxis, Tooltip, ResponsiveContainer, YAxis } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"No Daily PNL data\");\n        console.error(\"No Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, error);\n  if (!dailyPNLData) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, \"No PNL data available\");\n  const formatMonthYear = dateStr => {\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n    const dateParts = dateStr.split(\"-\");\n    const month = dateParts[1];\n    const year = dateParts[0];\n    return `${month}/${year}`;\n  };\n  const calculateBars = () => {\n    let barsData = [];\n    if (view === \"daily\") {\n      const currentWeek = getCurrentWeek(dailyPNLData);\n      barsData = currentWeek.map(day => ({\n        date: formatDate(day.entry_date),\n        balance: parseFloat(day.balance || 0)\n      }));\n    } else if (view === \"weekly\") {\n      const currentMonth = getCurrentMonth(dailyPNLData);\n      barsData = currentMonth.map(week => ({\n        date: `${formatDate(week[0].entry_date)} - ${formatDate(week[week.length - 1].entry_date)}`,\n        balance: week.reduce((sum, day) => sum + parseFloat(day.balance || 0), 0)\n      }));\n    } else if (view === \"monthly\") {\n      const months = getMonthsData(dailyPNLData);\n      barsData = months.map(month => ({\n        date: formatMonthYear(month[0].entry_date),\n        balance: month.reduce((sum, day) => sum + parseFloat(day.balance || 0), 0)\n      }));\n    }\n    return barsData;\n  };\n  const barsData = calculateBars();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"1Y\"))), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: barsData,\n    layout: \"vertical\",\n    margin: {\n      left: 20,\n      right: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    type: \"category\",\n    dataKey: \"date\",\n    width: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => formatCash(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"balance\",\n    fill: \"#4a90e2\",\n    isAnimationActive: true,\n    background: {\n      fill: \"#f0f0f0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n//   const [hoveredData, setHoveredData] = useState(null);\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"No Daily PNL data\");\n//         console.error(\"No Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance || 0));\n//       labels = currentWeek.map((day) =>\n//         day.entry_date ? formatDate(day.entry_date) : \"Date\"\n//       );\n//     } else if (view === \"weekly\") {\n//       const currentMonth = getCurrentMonth(dailyPNLData);\n//       currentMonth.forEach((week) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance || 0),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           week[0]?.entry_date && week[week.length - 1]?.entry_date\n//             ? `${formatDate(week[0].entry_date)} - ${formatDate(\n//                 week[week.length - 1].entry_date\n//               )}`\n//             : \"Week\"\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance || 0),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(\n//           month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\n//         );\n//       });\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() - 1)\n//     );\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const month = today.getMonth() + 1;\n\n//     data.forEach((entry, index) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() + 1 === month) {\n//         week.push(entry);\n//         if ((index + 1) % 5 === 0) {\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//       weeks.push(week);\n//     }\n\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     return months.filter((month) => month.length > 0);\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 5;\n\n//   const headerDate = dailyPNLData[0]?.entry_date\n//     ? view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date + \"T00:00:00\").toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0]\n//     : \"Date\";\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             1D\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             1M\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             1Y\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {/* Tooltip Rendering - positioned above or aside from the bars */}\n//         {hoveredData && (\n//           <div className=\"tooltip\">\n//             <p>{formatCash(hoveredData.balance)}</p>\n//             <p>{hoveredData.date}</p>\n//           </div>\n//         )}\n\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 65;\n//           const isPositive = balance >= 0;\n\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//                 onMouseEnter={() =>\n//                   setHoveredData({ balance, date: labels[index] })\n//                 }\n//                 onMouseLeave={() => setHoveredData(null)}\n//               ></div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","BarChart","Bar","XAxis","Tooltip","ResponsiveContainer","YAxis","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","fetchDailyPNLData","data","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMonthYear","dateStr","includes","dateParts","split","month","year","calculateBars","barsData","currentWeek","getCurrentWeek","map","day","date","entry_date","balance","parseFloat","currentMonth","getCurrentMonth","week","length","reduce","sum","months","getMonthsData","className","onClick","width","height","layout","margin","left","right","type","dataKey","formatter","value","fill","isAnimationActive","background"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"No Daily PNL data\");\r\n        console.error(\"No Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n  if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n  const formatMonthYear = (dateStr) => {\r\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n    const dateParts = dateStr.split(\"-\");\r\n    const month = dateParts[1];\r\n    const year = dateParts[0];\r\n    return `${month}/${year}`;\r\n  };\r\n\r\n  const calculateBars = () => {\r\n    let barsData = [];\r\n\r\n    if (view === \"daily\") {\r\n      const currentWeek = getCurrentWeek(dailyPNLData);\r\n      barsData = currentWeek.map((day) => ({\r\n        date: formatDate(day.entry_date),\r\n        balance: parseFloat(day.balance || 0),\r\n      }));\r\n    } else if (view === \"weekly\") {\r\n      const currentMonth = getCurrentMonth(dailyPNLData);\r\n      barsData = currentMonth.map((week) => ({\r\n        date: `${formatDate(week[0].entry_date)} - ${formatDate(\r\n          week[week.length - 1].entry_date\r\n        )}`,\r\n        balance: week.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance || 0),\r\n          0\r\n        ),\r\n      }));\r\n    } else if (view === \"monthly\") {\r\n      const months = getMonthsData(dailyPNLData);\r\n      barsData = months.map((month) => ({\r\n        date: formatMonthYear(month[0].entry_date),\r\n        balance: month.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance || 0),\r\n          0\r\n        ),\r\n      }));\r\n    }\r\n\r\n    return barsData;\r\n  };\r\n\r\n  const barsData = calculateBars();\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            1D\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            1M\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            1Y\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <BarChart\r\n          data={barsData}\r\n          layout=\"vertical\"\r\n          margin={{ left: 20, right: 20 }}\r\n        >\r\n          <XAxis type=\"number\" />\r\n          <YAxis type=\"category\" dataKey=\"date\" width={80} />\r\n          <Tooltip formatter={(value) => formatCash(value)} />\r\n          <Bar\r\n            dataKey=\"balance\"\r\n            fill=\"#4a90e2\"\r\n            isAnimationActive={true}\r\n            background={{ fill: \"#f0f0f0\" }}\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n//   const [hoveredData, setHoveredData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"No Daily PNL data\");\r\n//         console.error(\"No Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance || 0));\r\n//       labels = currentWeek.map((day) =>\r\n//         day.entry_date ? formatDate(day.entry_date) : \"Date\"\r\n//       );\r\n//     } else if (view === \"weekly\") {\r\n//       const currentMonth = getCurrentMonth(dailyPNLData);\r\n//       currentMonth.forEach((week) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance || 0),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           week[0]?.entry_date && week[week.length - 1]?.entry_date\r\n//             ? `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//                 week[week.length - 1].entry_date\r\n//               )}`\r\n//             : \"Week\"\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance || 0),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(\r\n//           month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\r\n//         );\r\n//       });\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() - 1)\r\n//     );\r\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const month = today.getMonth() + 1;\r\n\r\n//     data.forEach((entry, index) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() + 1 === month) {\r\n//         week.push(entry);\r\n//         if ((index + 1) % 5 === 0) {\r\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//       weeks.push(week);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     return months.filter((month) => month.length > 0);\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 5;\r\n\r\n//   const headerDate = dailyPNLData[0]?.entry_date\r\n//     ? view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date + \"T00:00:00\").toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0]\r\n//     : \"Date\";\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             1D\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             1M\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             1Y\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {/* Tooltip Rendering - positioned above or aside from the bars */}\r\n//         {hoveredData && (\r\n//           <div className=\"tooltip\">\r\n//             <p>{formatCash(hoveredData.balance)}</p>\r\n//             <p>{hoveredData.date}</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 65;\r\n//           const isPositive = balance >= 0;\r\n\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//                 onMouseEnter={() =>\r\n//                   setHoveredData({ balance, date: labels[index] })\r\n//                 }\r\n//                 onMouseLeave={() => setHoveredData(null)}\r\n//               ></div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
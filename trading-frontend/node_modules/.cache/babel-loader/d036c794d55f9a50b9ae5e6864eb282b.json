{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\"; // Adjust the import based on your file structure\nimport { formatCash } from \"../func/functions\"; // Adjust the import based on your file structure\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\"); // 'daily', 'weekly', 'monthly'\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        console.log(\"Fetched data:\", data);\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const aggregateByWeek = () => {\n    const weeklyData = {};\n    dailyPNLData.forEach(entry => {\n      const date = new Date(entry.entry_date);\n      const startOfWeek = new Date(date.setDate(date.getDate() - date.getDay())); // Get the start of the week\n      const weekKey = startOfWeek.toISOString().split(\"T\")[0];\n      if (!weeklyData[weekKey]) {\n        weeklyData[weekKey] = {\n          balance: parseFloat(entry.balance),\n          entries: []\n        };\n      } else {\n        weeklyData[weekKey].balance += parseFloat(entry.balance);\n      }\n      weeklyData[weekKey].entries.push(entry);\n    });\n    console.log(\"Weekly Data:\", weeklyData);\n    return weeklyData;\n  };\n  const aggregateByMonth = () => {\n    const monthlyData = {};\n    dailyPNLData.forEach(entry => {\n      const date = new Date(entry.entry_date);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = {\n          balance: parseFloat(entry.balance),\n          entries: []\n        };\n      } else {\n        monthlyData[monthKey].balance += parseFloat(entry.balance);\n      }\n      monthlyData[monthKey].entries.push(entry);\n    });\n    console.log(\"Monthly Data:\", monthlyData);\n    return monthlyData;\n  };\n  const prepareChartData = () => {\n    const labels = [];\n    const dataValues = [];\n    let aggregatedData = {};\n    if (view === \"daily\") {\n      aggregatedData = dailyPNLData;\n      dailyPNLData.forEach(entry => {\n        labels.push(entry.entry_date);\n        dataValues.push(entry.balance);\n      });\n    } else if (view === \"weekly\") {\n      const weeklyData = aggregateByWeek();\n      Object.keys(weeklyData).forEach(weekKey => {\n        labels.push(weekKey);\n        dataValues.push(weeklyData[weekKey].balance);\n      });\n    } else if (view === \"monthly\") {\n      const monthlyData = aggregateByMonth();\n      Object.keys(monthlyData).forEach(monthKey => {\n        labels.push(monthKey);\n        dataValues.push(monthlyData[monthKey].balance);\n      });\n    }\n    console.log(\"Chart Labels:\", labels);\n    console.log(\"Chart Data:\", dataValues);\n    return {\n      labels,\n      datasets: [{\n        label: \"Balance\",\n        data: dataValues,\n        backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n        borderColor: \"rgba(75, 192, 192, 1)\",\n        borderWidth: 1\n      }]\n    };\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"view-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Weekly\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, \"Monthly\")), /*#__PURE__*/React.createElement(Bar, {\n    data: prepareChartData(),\n    options: {\n      responsive: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\n//     } else if (view === \"weekly\") {\n//       const currentMonth = getCurrentMonth(dailyPNLData);\n//       currentMonth.forEach((week) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\n//             week[week.length - 1].entry_date\n//           )}`\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(formatMonthYear(month[0].entry_date));\n//       });\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() - 1)\n//     );\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const month = today.getMonth() + 1;\n\n//     data.forEach((entry, index) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() + 1 === month) {\n//         week.push(entry);\n//         if ((index + 1) % 5 === 0) {\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//       weeks.push(week);\n//     }\n\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     return months.filter((month) => month.length > 0);\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 5;\n\n//   const headerDate =\n//     view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 100;\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","fetchDailyPnls","formatCash","register","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","fetchData","data","console","log","aggregateByWeek","weeklyData","forEach","entry","date","Date","entry_date","startOfWeek","setDate","getDate","getDay","weekKey","toISOString","split","balance","parseFloat","entries","push","aggregateByMonth","monthlyData","monthKey","getFullYear","getMonth","prepareChartData","labels","dataValues","aggregatedData","Object","keys","datasets","label","backgroundColor","borderColor","borderWidth","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","options","responsive"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\"; // Adjust the import based on your file structure\r\nimport { formatCash } from \"../func/functions\"; // Adjust the import based on your file structure\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\"); // 'daily', 'weekly', 'monthly'\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        console.log(\"Fetched data:\", data);\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const aggregateByWeek = () => {\r\n    const weeklyData = {};\r\n    dailyPNLData.forEach((entry) => {\r\n      const date = new Date(entry.entry_date);\r\n      const startOfWeek = new Date(\r\n        date.setDate(date.getDate() - date.getDay())\r\n      ); // Get the start of the week\r\n      const weekKey = startOfWeek.toISOString().split(\"T\")[0];\r\n\r\n      if (!weeklyData[weekKey]) {\r\n        weeklyData[weekKey] = {\r\n          balance: parseFloat(entry.balance),\r\n          entries: [],\r\n        };\r\n      } else {\r\n        weeklyData[weekKey].balance += parseFloat(entry.balance);\r\n      }\r\n      weeklyData[weekKey].entries.push(entry);\r\n    });\r\n\r\n    console.log(\"Weekly Data:\", weeklyData);\r\n    return weeklyData;\r\n  };\r\n\r\n  const aggregateByMonth = () => {\r\n    const monthlyData = {};\r\n    dailyPNLData.forEach((entry) => {\r\n      const date = new Date(entry.entry_date);\r\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n\r\n      if (!monthlyData[monthKey]) {\r\n        monthlyData[monthKey] = {\r\n          balance: parseFloat(entry.balance),\r\n          entries: [],\r\n        };\r\n      } else {\r\n        monthlyData[monthKey].balance += parseFloat(entry.balance);\r\n      }\r\n      monthlyData[monthKey].entries.push(entry);\r\n    });\r\n\r\n    console.log(\"Monthly Data:\", monthlyData);\r\n    return monthlyData;\r\n  };\r\n\r\n  const prepareChartData = () => {\r\n    const labels = [];\r\n    const dataValues = [];\r\n    let aggregatedData = {};\r\n\r\n    if (view === \"daily\") {\r\n      aggregatedData = dailyPNLData;\r\n      dailyPNLData.forEach((entry) => {\r\n        labels.push(entry.entry_date);\r\n        dataValues.push(entry.balance);\r\n      });\r\n    } else if (view === \"weekly\") {\r\n      const weeklyData = aggregateByWeek();\r\n      Object.keys(weeklyData).forEach((weekKey) => {\r\n        labels.push(weekKey);\r\n        dataValues.push(weeklyData[weekKey].balance);\r\n      });\r\n    } else if (view === \"monthly\") {\r\n      const monthlyData = aggregateByMonth();\r\n      Object.keys(monthlyData).forEach((monthKey) => {\r\n        labels.push(monthKey);\r\n        dataValues.push(monthlyData[monthKey].balance);\r\n      });\r\n    }\r\n\r\n    console.log(\"Chart Labels:\", labels);\r\n    console.log(\"Chart Data:\", dataValues);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Balance\",\r\n          data: dataValues,\r\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n          borderColor: \"rgba(75, 192, 192, 1)\",\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <div className=\"bars-container\">\r\n      <div className=\"view-controls\">\r\n        <button onClick={() => setView(\"daily\")}>Daily</button>\r\n        <button onClick={() => setView(\"weekly\")}>Weekly</button>\r\n        <button onClick={() => setView(\"monthly\")}>Monthly</button>\r\n      </div>\r\n      <Bar data={prepareChartData()} options={{ responsive: true }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\r\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n//     } else if (view === \"weekly\") {\r\n//       const currentMonth = getCurrentMonth(dailyPNLData);\r\n//       currentMonth.forEach((week) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//             week[week.length - 1].entry_date\r\n//           )}`\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(formatMonthYear(month[0].entry_date));\r\n//       });\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() - 1)\r\n//     );\r\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const month = today.getMonth() + 1;\r\n\r\n//     data.forEach((entry, index) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() + 1 === month) {\r\n//         week.push(entry);\r\n//         if ((index + 1) % 5 === 0) {\r\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//       weeks.push(week);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     return months.filter((month) => month.length > 0);\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 5;\r\n\r\n//   const headerDate =\r\n//     view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 100;\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
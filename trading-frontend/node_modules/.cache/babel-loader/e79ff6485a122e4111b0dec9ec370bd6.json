{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\transactions\\\\TransactionTable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTransactions } from \"../api/TransactionsAPI\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { formatDate, formatCash } from \"../func/functions\";\nimport NewTransaction from \"./NewTransaction\";\nconst TransactionTable = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Fetch transactions and trades on component mount\n  useEffect(() => {\n    const getTransactionsAndTrades = async () => {\n      try {\n        // Fetch transactions\n        const transactionsData = await fetchTransactions();\n\n        // Fetch trades and map them to transaction-like format\n        const tradesData = await fetchTrades();\n        console.log(\"Fetched trades:\", tradesData); // Check if trades data is retrieved as expected\n\n        const formattedTrades = tradesData.map(trade => ({\n          id: trade.id,\n          transaction_date: trade.close_date,\n          transaction_type: \"Trade\",\n          amount: trade.net_pnl ? trade.net_pnl : 0,\n          // Default to 0 if net_pnl is missing\n          transaction_summary: `${trade.symbol} trade with ${formatCash(trade.net_pnl || 0 // Ensure net_pnl is a number before formatting\n          )} PnL`\n        }));\n\n        // Combine transactions and trades\n        const allData = [...transactionsData, ...formattedTrades].sort((a, b) => new Date(b.transaction_date) - new Date(a.transaction_date));\n        setTransactions(allData);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    getTransactionsAndTrades();\n  }, []);\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    }, \"Error fetching transactions: \", error);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"transaction-table-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Transactions\"), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"btn btn-primary fa-solid fa-plus\",\n    id: \"transaction-new-btn\",\n    onClick: handleOpenModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"transaction-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Summary\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, transactions.map(transaction => /*#__PURE__*/React.createElement(\"tr\", {\n    key: transaction.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, formatDate(transaction.transaction_date)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, transaction.transaction_type), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, formatCash(transaction.amount)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, transaction.transaction_summary))))), showModal && /*#__PURE__*/React.createElement(NewTransaction, {\n    onClose: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }));\n};\nexport default TransactionTable;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\n// import { fetchTrades } from \"../api/TradesAPI\"; // Import the trades fetching function\n// import { formatDate, formatCash } from \"../func/functions\";\n// import NewTransaction from \"./NewTransaction\";\n\n// const TransactionTable = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n\n//   // Fetch transactions and trades on component mount\n//   useEffect(() => {\n//     const getTransactionsAndTrades = async () => {\n//       try {\n//         // Fetch transactions\n//         const transactionsData = await fetchTransactions();\n\n//         // Fetch trades and map them to transaction-like format\n//         const tradesData = await fetchTrades();\n//         const formattedTrades = tradesData.map((trade) => ({\n//           id: trade.id,\n//           transaction_date: trade.close_date,\n//           transaction_type: \"Trade\",\n//           amount: trade.net_pnl,\n//           transaction_summary: `${trade.symbol}trade with ${formatCash(\n//             trade.net_pnl\n//           )} pnl `,\n//         }));\n\n//         // Combine transactions and trades\n//         const allData = [...transactionsData, ...formattedTrades].sort(\n//           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n//         );\n\n//         setTransactions(allData);\n//         setLoading(false);\n//       } catch (error) {\n//         setError(error.message);\n//         setLoading(false);\n//       }\n//     };\n\n//     getTransactionsAndTrades();\n//   }, []);\n\n//   const handleOpenModal = () => {\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>Error fetching transactions: {error}</div>;\n//   }\n\n//   return (\n//     <div className=\"transaction-table-container\">\n//       <div className=\"header-card\">\n//         <p className=\"title\">Transactions</p>\n//         <i\n//           className=\"btn btn-primary fa-solid fa-plus\"\n//           id=\"transaction-new-btn\"\n//           onClick={handleOpenModal}\n//         ></i>\n//       </div>\n//       <hr />\n//       <table className=\"transaction-table\">\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Type</th>\n//             <th>Amount</th>\n//             <th>Summary</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {transactions.map((transaction) => (\n//             <tr key={transaction.id}>\n//               <td>{formatDate(transaction.transaction_date)}</td>\n//               <td>{transaction.transaction_type}</td>\n//               <td>{formatCash(transaction.amount)}</td>\n//               <td>{transaction.transaction_summary}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {showModal && <NewTransaction onClose={handleCloseModal} />}\n//     </div>\n//   );\n// };\n\n// export default TransactionTable;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\n// import { formatDate, formatCash } from \"../func/functions\";\n// import NewTransaction from \"./NewTransaction\";\n\n// const TransactionTable = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n\n//   // Fetch transactions on component mount\n//   useEffect(() => {\n//     const getTransactions = async () => {\n//       try {\n//         const data = await fetchTransactions();\n//         setTransactions(data);\n//         setLoading(false);\n//       } catch (error) {\n//         setError(error.message);\n//         setLoading(false);\n//       }\n//     };\n\n//     getTransactions();\n//   }, []);\n\n//   const handleOpenModal = () => {\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>Error fetching transactions: {error}</div>;\n//   }\n\n//   return (\n//     <div className=\"transaction-table-container\">\n//       <div className=\"header-card\">\n//         <p className=\"title\">Transactions</p>\n//         <i\n//           className=\"btn btn-primary fa-solid fa-plus\"\n//           id=\"transaction-new-btn\"\n//           onClick={handleOpenModal}\n//         ></i>\n//       </div>\n//       <hr />\n//       <table className=\"transaction-table\">\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Type</th>\n//             <th>Amount</th>\n//             <th>Summary</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {transactions.map((transaction) => (\n//             <tr key={transaction.id}>\n//               <td>{formatDate(transaction.transaction_date)}</td>\n//               <td>{transaction.transaction_type}</td>\n//               <td>{formatCash(transaction.amount)}</td>\n//               <td>{transaction.transaction_summary}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {showModal && <NewTransaction onClose={handleCloseModal} />}\n//     </div>\n//   );\n// };\n\n// export default TransactionTable;","map":{"version":3,"names":["React","useState","useEffect","fetchTransactions","fetchTrades","formatDate","formatCash","NewTransaction","TransactionTable","transactions","setTransactions","loading","setLoading","error","setError","showModal","setShowModal","getTransactionsAndTrades","transactionsData","tradesData","console","log","formattedTrades","map","trade","id","transaction_date","close_date","transaction_type","amount","net_pnl","transaction_summary","symbol","allData","sort","a","b","Date","message","handleOpenModal","handleCloseModal","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","transaction","key","onClose"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/transactions/TransactionTable.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTransactions } from \"../api/TransactionsAPI\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport { formatDate, formatCash } from \"../func/functions\";\r\nimport NewTransaction from \"./NewTransaction\";\r\n\r\nconst TransactionTable = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  // Fetch transactions and trades on component mount\r\n  useEffect(() => {\r\n    const getTransactionsAndTrades = async () => {\r\n      try {\r\n        // Fetch transactions\r\n        const transactionsData = await fetchTransactions();\r\n\r\n        // Fetch trades and map them to transaction-like format\r\n        const tradesData = await fetchTrades();\r\n        console.log(\"Fetched trades:\", tradesData); // Check if trades data is retrieved as expected\r\n\r\n        const formattedTrades = tradesData.map((trade) => ({\r\n          id: trade.id,\r\n          transaction_date: trade.close_date,\r\n          transaction_type: \"Trade\",\r\n          amount: trade.net_pnl ? trade.net_pnl : 0, // Default to 0 if net_pnl is missing\r\n          transaction_summary: `${trade.symbol} trade with ${formatCash(\r\n            trade.net_pnl || 0 // Ensure net_pnl is a number before formatting\r\n          )} PnL`,\r\n        }));\r\n\r\n        // Combine transactions and trades\r\n        const allData = [...transactionsData, ...formattedTrades].sort(\r\n          (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n        );\r\n\r\n        setTransactions(allData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getTransactionsAndTrades();\r\n  }, []);\r\n\r\n  const handleOpenModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error fetching transactions: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"transaction-table-container\">\r\n      <div className=\"header-card\">\r\n        <p className=\"title\">Transactions</p>\r\n        <i\r\n          className=\"btn btn-primary fa-solid fa-plus\"\r\n          id=\"transaction-new-btn\"\r\n          onClick={handleOpenModal}\r\n        ></i>\r\n      </div>\r\n      <hr />\r\n      <table className=\"transaction-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Type</th>\r\n            <th>Amount</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.map((transaction) => (\r\n            <tr key={transaction.id}>\r\n              <td>{formatDate(transaction.transaction_date)}</td>\r\n              <td>{transaction.transaction_type}</td>\r\n              <td>{formatCash(transaction.amount)}</td>\r\n              <td>{transaction.transaction_summary}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionTable;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// import { fetchTrades } from \"../api/TradesAPI\"; // Import the trades fetching function\r\n// import { formatDate, formatCash } from \"../func/functions\";\r\n// import NewTransaction from \"./NewTransaction\";\r\n\r\n// const TransactionTable = () => {\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [showModal, setShowModal] = useState(false);\r\n\r\n//   // Fetch transactions and trades on component mount\r\n//   useEffect(() => {\r\n//     const getTransactionsAndTrades = async () => {\r\n//       try {\r\n//         // Fetch transactions\r\n//         const transactionsData = await fetchTransactions();\r\n\r\n//         // Fetch trades and map them to transaction-like format\r\n//         const tradesData = await fetchTrades();\r\n//         const formattedTrades = tradesData.map((trade) => ({\r\n//           id: trade.id,\r\n//           transaction_date: trade.close_date,\r\n//           transaction_type: \"Trade\",\r\n//           amount: trade.net_pnl,\r\n//           transaction_summary: `${trade.symbol}trade with ${formatCash(\r\n//             trade.net_pnl\r\n//           )} pnl `,\r\n//         }));\r\n\r\n//         // Combine transactions and trades\r\n//         const allData = [...transactionsData, ...formattedTrades].sort(\r\n//           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n//         );\r\n\r\n//         setTransactions(allData);\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setError(error.message);\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     getTransactionsAndTrades();\r\n//   }, []);\r\n\r\n//   const handleOpenModal = () => {\r\n//     setShowModal(true);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setShowModal(false);\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>Error fetching transactions: {error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"transaction-table-container\">\r\n//       <div className=\"header-card\">\r\n//         <p className=\"title\">Transactions</p>\r\n//         <i\r\n//           className=\"btn btn-primary fa-solid fa-plus\"\r\n//           id=\"transaction-new-btn\"\r\n//           onClick={handleOpenModal}\r\n//         ></i>\r\n//       </div>\r\n//       <hr />\r\n//       <table className=\"transaction-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Date</th>\r\n//             <th>Type</th>\r\n//             <th>Amount</th>\r\n//             <th>Summary</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {transactions.map((transaction) => (\r\n//             <tr key={transaction.id}>\r\n//               <td>{formatDate(transaction.transaction_date)}</td>\r\n//               <td>{transaction.transaction_type}</td>\r\n//               <td>{formatCash(transaction.amount)}</td>\r\n//               <td>{transaction.transaction_summary}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TransactionTable;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// import { formatDate, formatCash } from \"../func/functions\";\r\n// import NewTransaction from \"./NewTransaction\";\r\n\r\n// const TransactionTable = () => {\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [showModal, setShowModal] = useState(false);\r\n\r\n//   // Fetch transactions on component mount\r\n//   useEffect(() => {\r\n//     const getTransactions = async () => {\r\n//       try {\r\n//         const data = await fetchTransactions();\r\n//         setTransactions(data);\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setError(error.message);\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     getTransactions();\r\n//   }, []);\r\n\r\n//   const handleOpenModal = () => {\r\n//     setShowModal(true);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setShowModal(false);\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>Error fetching transactions: {error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"transaction-table-container\">\r\n//       <div className=\"header-card\">\r\n//         <p className=\"title\">Transactions</p>\r\n//         <i\r\n//           className=\"btn btn-primary fa-solid fa-plus\"\r\n//           id=\"transaction-new-btn\"\r\n//           onClick={handleOpenModal}\r\n//         ></i>\r\n//       </div>\r\n//       <hr />\r\n//       <table className=\"transaction-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Date</th>\r\n//             <th>Type</th>\r\n//             <th>Amount</th>\r\n//             <th>Summary</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {transactions.map((transaction) => (\r\n//             <tr key={transaction.id}>\r\n//               <td>{formatDate(transaction.transaction_date)}</td>\r\n//               <td>{transaction.transaction_type}</td>\r\n//               <td>{formatCash(transaction.amount)}</td>\r\n//               <td>{transaction.transaction_summary}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TransactionTable;\r\n"],"mappings":"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AACzB,EAAG;IAAAiB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtB/C,KAAA,CAAAyC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK1C,UAAU,CAAC6C,WAAW,CAACxB,gBAAgB,CAAM,CAAC,eACnD1B,KAAA,CAAAyC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKG,WAAW,CAACtB,gBAAqB,CAAC,eACvC5B,KAAA,CAAAyC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKzC,UAAU,CAAC4C,WAAW,CAACrB,MAAM,CAAM,CAAC,eACzC7B,KAAA,CAAAyC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKG,WAAW,CAACnB,mBAAwB,CACvC,CACL,CACI,CACF,CAAC,EACPhB,SAAS,iBAAIf,KAAA,CAAAyC,aAAA,CAAClC,cAAc;IAAC6C,OAAO,EAAEZ,gBAAiB;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACvD,CAAC;AAEV,CAAC;AAED,eAAevC,gBAAgB;;AAE/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}
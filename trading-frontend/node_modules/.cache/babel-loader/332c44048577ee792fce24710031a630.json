{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nconst Graph = () => {\n  // Reference to the chart canvas element\n  const chartRef = useRef(null);\n\n  // State variables for loading status and trade data\n  const [loading, setLoading] = useState(true);\n  const [trades, setTrades] = useState([]);\n\n  // Memoized profit/loss calculations for different time periods\n  const [profitLoss, setProfitLoss] = useState({\n    \"1D\": 0,\n    \"1W\": 0,\n    \"1M\": 0,\n    \"1Y\": 0,\n    YTD: 0,\n    Max: 0\n  });\n\n  // Fetch trade data from backend\n  useEffect(() => {\n    fetchTrades().then(data => {\n      setTrades(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching trades:\", error);\n    });\n  }, []);\n\n  // Calculate profit/loss for different time periods\n  useEffect(() => {\n    if (!loading && trades.length > 0) {\n      const now = new Date();\n      const oneDay = 1000 * 60 * 60 * 24;\n      const oneWeek = oneDay * 7;\n      const oneMonth = oneDay * 30;\n      // three month\n      const oneYear = oneDay * 365;\n      let profitLossForLastDay = 0;\n      let profitLossForLastWeek = 0;\n      let profitLossForLastMonth = 0;\n      // three month\n      let profitLossForLastYear = 0;\n      let profitLossYearToDate = 0;\n      let profitLossForMaxPeriod = 0;\n      trades.forEach(trade => {\n        const closeDate = new Date(trade.closeDate);\n        const timeDiff = now - closeDate;\n        profitLossForMaxPeriod += trade.profitLoss * 100;\n        if (timeDiff <= oneDay) {\n          profitLossForLastDay += trade.profitLoss * 100;\n        }\n        if (timeDiff <= oneWeek) {\n          profitLossForLastWeek += trade.profitLoss * 100;\n        }\n        if (timeDiff <= oneMonth) {\n          profitLossForLastMonth += trade.profitLoss * 100;\n        }\n        // three month\n\n        if (timeDiff <= oneYear) {\n          profitLossForLastYear += trade.profitLoss * 100;\n        }\n        if (closeDate.getFullYear() === now.getFullYear()) {\n          profitLossYearToDate += trade.profitLoss * 100;\n        }\n      });\n      setProfitLoss({\n        \"1D\": profitLossForLastDay,\n        \"1W\": profitLossForLastWeek,\n        \"1M\": profitLossForLastMonth,\n        // three month\n\n        \"1Y\": profitLossForLastYear,\n        YTD: profitLossYearToDate,\n        Max: profitLossForMaxPeriod\n      });\n    }\n  }, [loading, trades]);\n  useEffect(() => {\n    if (!loading && trades.length > 0) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      const backgroundColors = Object.values(profitLoss).map(value => value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\");\n      // Chart rendering logic\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: [\"1D\", \"1W\", \"1M\", \"3M\", \"1Y\", \"YTD\", \"Max\"],\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: Object.values(profitLoss),\n            backgroundColor: backgroundColors,\n            barThickness: 40\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              },\n              grid: {\n                color: context => context.tick.value === 0 ? \"rgba(0, 0, 0, 1)\" : \"rgba(0, 0, 0, 0)\",\n                lineWidth: 0.5\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return value === 0 ? value : \"\";\n                }\n              }\n            }\n          }\n        }\n      });\n\n      // Cleanup function to destroy chart instance\n      return () => {\n        if (myChart) {\n          myChart.destroy();\n        }\n      };\n    }\n  }, [loading, trades, profitLoss]);\n\n  // Render loading message or chart canvas\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 38\n    }\n  }));\n};\nexport default Graph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import { fetchTrades } from \"./ApiCalls\";\n\n// const Graph = () => {\n//   // Reference to the chart canvas element\n//   const chartRef = useRef(null);\n\n//   // State variables for loading status, trade data, and profits\n//   const [loading, setLoading] = useState(true);\n//   const [trades, setTrades] = useState([]);\n//   const [profits, setProfits] = useState({});\n\n//   // Fetch trade data from backend\n//   useEffect(() => {\n//     fetchTrades()\n//       .then((data) => {\n//         setTrades(data);\n//         const profitMap = {};\n//         data.forEach((trade) => {\n//           const profitLoss = trade.profitLoss;\n//           const date = trade.closeDate;\n//           if (!profitMap[date]) {\n//             profitMap[date] = 0;\n//           }\n//           profitMap[date] += profitLoss;\n//         });\n//         setProfits(profitMap);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching trades:\", error);\n//       });\n//   }, []);\n\n//   // Categorize each trade under: \"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\" based on close date\n//   const categorizeTrades = () => {\n//     const categorizedTrades = {};\n//     Object.keys(profits).forEach((date) => {\n//       const category = getTradeCategory(date);\n//       if (!categorizedTrades[category]) {\n//         categorizedTrades[category] = 0;\n//       }\n//       categorizedTrades[category] += profits[date];\n//     });\n//     return categorizedTrades;\n//   };\n\n//   const getTradeCategory = (date) => {\n//     const now = new Date();\n//     const oneDay = 1000 * 60 * 60 * 24;\n//     const oneWeek = oneDay * 7;\n//     const oneMonth = oneDay * 30;\n//     const threeMonths = oneDay * 90;\n//     const oneYear = oneDay * 365;\n\n//     if (date > now - oneDay) {\n//       return \"1D\";\n//     } else if (date > now - oneWeek) {\n//       return \"1W\";\n//     } else if (date > now - oneMonth) {\n//       return \"1M\";\n//     } else if (date > now - threeMonths) {\n//       return \"3M\";\n//     } else if (date > now - oneYear) {\n//       return \"1Y\";\n//     } else {\n//       return \"Max\";\n//     }\n//   };\n//   // Calculate total profit/loss for each category\n//   const calculateProfitLoss = () => {\n//     const categorizedProfits = categorizeTrades();\n//     return Object.keys(categorizedProfits).reduce((acc, category) => {\n//       acc[category] = categorizedProfits[category];\n//       return acc;\n//     }, {});\n//   };\n\n//   // Effect hook to render chart when trade data and profits are available\n//   useEffect(() => {\n//     if (!loading && trades.length > 0) {\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const categories = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n//       const profitValues = Object.values(calculateProfitLoss());\n//       const backgroundColors = profitValues.map((value) =>\n//         value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\n//       );\n\n//       const myChart = new window.Chart(ctx, {\n//         type: \"bar\",\n//         data: {\n//           //   labels: Object.keys(calculateProfitLoss()),\n//           labels: categories,\n//           datasets: [\n//             {\n//               label: \"Profit/Loss\",\n//               data: profitValues,\n//               backgroundColor: backgroundColors,\n//               barThickness: 40,\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false,\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false,\n//               },\n//             },\n//             y: {\n//               display: true,\n//               title: {\n//                 display: true,\n//                 text: \"Profit/Loss\",\n//               },\n//               grid: {\n//                 color: (context) =>\n//                   context.tick.value === 0\n//                     ? \"rgba(0, 0, 0, 1)\"\n//                     : \"rgba(0, 0, 0, 0)\",\n//                 lineWidth: 0.5,\n//               },\n//               ticks: {\n//                 callback: function (value, index, values) {\n//                   return value === 0 ? value : \"\";\n//                 },\n//               },\n//             },\n//           },\n//         },\n//       });\n\n//       // Cleanup function to destroy chart instance\n//       return () => {\n//         if (myChart) {\n//           myChart.destroy();\n//         }\n//       };\n//     }\n//   }, [loading, trades]);\n\n//   // Render loading message or chart canvas\n//   return (\n//     <div className=\"graph\">\n//       {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\n//     </div>\n//   );\n// };\n\n// export default Graph;","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchTrades","Graph","chartRef","loading","setLoading","trades","setTrades","profitLoss","setProfitLoss","YTD","Max","then","data","catch","error","console","length","now","Date","oneDay","oneWeek","oneMonth","oneYear","profitLossForLastDay","profitLossForLastWeek","profitLossForLastMonth","profitLossForLastYear","profitLossYearToDate","profitLossForMaxPeriod","forEach","trade","closeDate","timeDiff","getFullYear","ctx","current","getContext","backgroundColors","Object","values","map","value","myChart","window","Chart","type","labels","datasets","label","backgroundColor","barThickness","options","plugins","legend","display","scales","x","grid","y","title","text","color","context","tick","lineWidth","ticks","callback","index","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\n\r\nconst Graph = () => {\r\n  // Reference to the chart canvas element\r\n  const chartRef = useRef(null);\r\n\r\n  // State variables for loading status and trade data\r\n  const [loading, setLoading] = useState(true);\r\n  const [trades, setTrades] = useState([]);\r\n\r\n  // Memoized profit/loss calculations for different time periods\r\n  const [profitLoss, setProfitLoss] = useState({\r\n    \"1D\": 0,\r\n    \"1W\": 0,\r\n    \"1M\": 0,\r\n    \"1Y\": 0,\r\n    YTD: 0,\r\n    Max: 0,\r\n  });\r\n\r\n  // Fetch trade data from backend\r\n  useEffect(() => {\r\n    fetchTrades()\r\n      .then((data) => {\r\n        setTrades(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching trades:\", error);\r\n      });\r\n  }, []);\r\n\r\n  // Calculate profit/loss for different time periods\r\n  useEffect(() => {\r\n    if (!loading && trades.length > 0) {\r\n      const now = new Date();\r\n      const oneDay = 1000 * 60 * 60 * 24;\r\n      const oneWeek = oneDay * 7;\r\n      const oneMonth = oneDay * 30;\r\n      // three month\r\n      const oneYear = oneDay * 365;\r\n\r\n      let profitLossForLastDay = 0;\r\n      let profitLossForLastWeek = 0;\r\n      let profitLossForLastMonth = 0;\r\n      // three month\r\n      let profitLossForLastYear = 0;\r\n      let profitLossYearToDate = 0;\r\n      let profitLossForMaxPeriod = 0;\r\n\r\n      trades.forEach((trade) => {\r\n        const closeDate = new Date(trade.closeDate);\r\n        const timeDiff = now - closeDate;\r\n\r\n        profitLossForMaxPeriod += trade.profitLoss * 100;\r\n\r\n        if (timeDiff <= oneDay) {\r\n          profitLossForLastDay += trade.profitLoss * 100;\r\n        }\r\n        if (timeDiff <= oneWeek) {\r\n          profitLossForLastWeek += trade.profitLoss * 100;\r\n        }\r\n        if (timeDiff <= oneMonth) {\r\n          profitLossForLastMonth += trade.profitLoss * 100;\r\n        }\r\n        // three month\r\n\r\n        if (timeDiff <= oneYear) {\r\n          profitLossForLastYear += trade.profitLoss * 100;\r\n        }\r\n        if (closeDate.getFullYear() === now.getFullYear()) {\r\n          profitLossYearToDate += trade.profitLoss * 100;\r\n        }\r\n      });\r\n\r\n      setProfitLoss({\r\n        \"1D\": profitLossForLastDay,\r\n        \"1W\": profitLossForLastWeek,\r\n        \"1M\": profitLossForLastMonth,\r\n        // three month\r\n\r\n        \"1Y\": profitLossForLastYear,\r\n        YTD: profitLossYearToDate,\r\n        Max: profitLossForMaxPeriod,\r\n      });\r\n    }\r\n  }, [loading, trades]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && trades.length > 0) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const backgroundColors = Object.values(profitLoss).map((value) =>\r\n        value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n      );\r\n      // Chart rendering logic\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: [\"1D\", \"1W\", \"1M\", \"3M\", \"1Y\", \"YTD\", \"Max\"],\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: Object.values(profitLoss),\r\n              backgroundColor: backgroundColors,\r\n              barThickness: 40,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n              grid: {\r\n                color: (context) =>\r\n                  context.tick.value === 0\r\n                    ? \"rgba(0, 0, 0, 1)\"\r\n                    : \"rgba(0, 0, 0, 0)\",\r\n                lineWidth: 0.5,\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  return value === 0 ? value : \"\";\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      // Cleanup function to destroy chart instance\r\n      return () => {\r\n        if (myChart) {\r\n          myChart.destroy();\r\n        }\r\n      };\r\n    }\r\n  }, [loading, trades, profitLoss]);\r\n\r\n  // Render loading message or chart canvas\r\n  return (\r\n    <div className=\"graph\">\r\n      {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import { fetchTrades } from \"./ApiCalls\";\r\n\r\n// const Graph = () => {\r\n//   // Reference to the chart canvas element\r\n//   const chartRef = useRef(null);\r\n\r\n//   // State variables for loading status, trade data, and profits\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [trades, setTrades] = useState([]);\r\n//   const [profits, setProfits] = useState({});\r\n\r\n//   // Fetch trade data from backend\r\n//   useEffect(() => {\r\n//     fetchTrades()\r\n//       .then((data) => {\r\n//         setTrades(data);\r\n//         const profitMap = {};\r\n//         data.forEach((trade) => {\r\n//           const profitLoss = trade.profitLoss;\r\n//           const date = trade.closeDate;\r\n//           if (!profitMap[date]) {\r\n//             profitMap[date] = 0;\r\n//           }\r\n//           profitMap[date] += profitLoss;\r\n//         });\r\n//         setProfits(profitMap);\r\n//         setLoading(false);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching trades:\", error);\r\n//       });\r\n//   }, []);\r\n\r\n//   // Categorize each trade under: \"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\" based on close date\r\n//   const categorizeTrades = () => {\r\n//     const categorizedTrades = {};\r\n//     Object.keys(profits).forEach((date) => {\r\n//       const category = getTradeCategory(date);\r\n//       if (!categorizedTrades[category]) {\r\n//         categorizedTrades[category] = 0;\r\n//       }\r\n//       categorizedTrades[category] += profits[date];\r\n//     });\r\n//     return categorizedTrades;\r\n//   };\r\n\r\n//   const getTradeCategory = (date) => {\r\n//     const now = new Date();\r\n//     const oneDay = 1000 * 60 * 60 * 24;\r\n//     const oneWeek = oneDay * 7;\r\n//     const oneMonth = oneDay * 30;\r\n//     const threeMonths = oneDay * 90;\r\n//     const oneYear = oneDay * 365;\r\n\r\n//     if (date > now - oneDay) {\r\n//       return \"1D\";\r\n//     } else if (date > now - oneWeek) {\r\n//       return \"1W\";\r\n//     } else if (date > now - oneMonth) {\r\n//       return \"1M\";\r\n//     } else if (date > now - threeMonths) {\r\n//       return \"3M\";\r\n//     } else if (date > now - oneYear) {\r\n//       return \"1Y\";\r\n//     } else {\r\n//       return \"Max\";\r\n//     }\r\n//   };\r\n//   // Calculate total profit/loss for each category\r\n//   const calculateProfitLoss = () => {\r\n//     const categorizedProfits = categorizeTrades();\r\n//     return Object.keys(categorizedProfits).reduce((acc, category) => {\r\n//       acc[category] = categorizedProfits[category];\r\n//       return acc;\r\n//     }, {});\r\n//   };\r\n\r\n//   // Effect hook to render chart when trade data and profits are available\r\n//   useEffect(() => {\r\n//     if (!loading && trades.length > 0) {\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const categories = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n//       const profitValues = Object.values(calculateProfitLoss());\r\n//       const backgroundColors = profitValues.map((value) =>\r\n//         value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n//       );\r\n\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"bar\",\r\n//         data: {\r\n//           //   labels: Object.keys(calculateProfitLoss()),\r\n//           labels: categories,\r\n//           datasets: [\r\n//             {\r\n//               label: \"Profit/Loss\",\r\n//               data: profitValues,\r\n//               backgroundColor: backgroundColors,\r\n//               barThickness: 40,\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false,\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false,\r\n//               },\r\n//             },\r\n//             y: {\r\n//               display: true,\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Profit/Loss\",\r\n//               },\r\n//               grid: {\r\n//                 color: (context) =>\r\n//                   context.tick.value === 0\r\n//                     ? \"rgba(0, 0, 0, 1)\"\r\n//                     : \"rgba(0, 0, 0, 0)\",\r\n//                 lineWidth: 0.5,\r\n//               },\r\n//               ticks: {\r\n//                 callback: function (value, index, values) {\r\n//                   return value === 0 ? value : \"\";\r\n//                 },\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       // Cleanup function to destroy chart instance\r\n//       return () => {\r\n//         if (myChart) {\r\n//           myChart.destroy();\r\n//         }\r\n//       };\r\n//     }\r\n//   }, [loading, trades]);\r\n\r\n//   // Render loading message or chart canvas\r\n//   return (\r\n//     <div className=\"graph\">\r\n//       {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Graph;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
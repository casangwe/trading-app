{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"chart.js/auto\";\nconst Grap = () => {\n  const chartRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [profits, setProfits] = useState({});\n  const fetchProfits = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/Graph/\");\n      const data = await response.json();\n      setProfits(data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching profit data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchProfits();\n  }, []);\n  useEffect(() => {\n    if (!loading) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      const profitValues = Object.values(profits);\n      const backgroundColors = profitValues.map(value => value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\");\n      const myChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: Object.keys(profits),\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitValues,\n            backgroundColor: backgroundColors,\n            barThickness: 40\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              },\n              grid: {\n                color: context => context.tick.value === 0 ? \"rgba(0, 0, 0, 1)\" : \"rgba(0, 0, 0, 0)\",\n                lineWidth: 0.5\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return value === 0 ? value : \"\";\n                }\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        if (myChart) {\n          myChart.destroy();\n        }\n      };\n    }\n  }, [loading, profits]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 38\n    }\n  }));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","Grap","chartRef","loading","setLoading","profits","setProfits","fetchProfits","response","fetch","data","json","error","console","ctx","current","getContext","profitValues","Object","values","backgroundColors","map","value","myChart","type","labels","keys","datasets","label","backgroundColor","barThickness","options","plugins","legend","display","scales","x","grid","y","title","text","color","context","tick","lineWidth","ticks","callback","index","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","AccountGraph"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nconst Grap = () => {\r\n  const chartRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [profits, setProfits] = useState({});\r\n\r\n  const fetchProfits = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/Graph/\");\r\n      const data = await response.json();\r\n      setProfits(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching profit data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProfits();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const profitValues = Object.values(profits);\r\n      const backgroundColors = profitValues.map((value) =>\r\n        value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n      );\r\n\r\n      const myChart = new Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: Object.keys(profits),\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitValues,\r\n              backgroundColor: backgroundColors,\r\n              barThickness: 40,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n              grid: {\r\n                color: (context) =>\r\n                  context.tick.value === 0\r\n                    ? \"rgba(0, 0, 0, 1)\"\r\n                    : \"rgba(0, 0, 0, 0)\",\r\n                lineWidth: 0.5,\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  return value === 0 ? value : \"\";\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        if (myChart) {\r\n          myChart.destroy();\r\n        }\r\n      };\r\n    }\r\n  }, [loading, profits]);\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange,\n  periodPL,\n  timePeriod\n}) => {\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\n      let startDate = new Date();\n      switch (selectedTimePeriod) {\n        case \"1D\":\n          startDate.setDate(startDate.getDate() - 1);\n          break;\n        case \"1W\":\n          startDate.setDate(startDate.getDate() - 7);\n          break;\n        case \"1M\":\n          startDate.setMonth(startDate.getMonth() - 1);\n          break;\n        case \"3M\":\n          startDate.setMonth(startDate.getMonth() - 3);\n          break;\n        case \"YTD\":\n          startDate = new Date(startDate.getFullYear(), 0, 1); // Year to Date\n          break;\n        case \"1Y\":\n          startDate.setFullYear(startDate.getFullYear() - 1);\n          break;\n        default:\n          break;\n      }\n      const filteredTrades = trades.filter(trade => new Date(trade.close_date) >= startDate);\n      const profits = filteredTrades.map(trade => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          return (exitPrice - entryPrice) * contracts * 100;\n        }\n        return 0;\n      });\n      const totalProfit = profits.reduce((sum, profit) => sum + profit, 0);\n      return {\n        labels: [selectedTimePeriod],\n        // Use selectedTimePeriod as the label\n        profits: [totalProfit]\n      };\n    };\n    const ctx = chartRef.current.getContext(\"2d\");\n    const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\n    const myChart = new window.Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: profitsData.labels,\n        datasets: [{\n          label: \"Profit/Loss\",\n          data: profitsData.profits,\n          backgroundColor: \"lightgreen\"\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: \"Time Period\" // Label for the x-axis\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: \"Profit/Loss\"\n            },\n            min: -500,\n            // Set minimum value for the y-axis\n            max: 500 // Set maximum value for the y-axis\n          }\n        }\n      }\n    });\n    return () => {\n      myChart.destroy();\n    };\n  }, [trades, timePeriod]);\n  const handleTimePeriodClick = period => {\n    onTimePeriodChange(period);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"Max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","AccountGraph","trades","onTimePeriodChange","periodPL","timePeriod","chartRef","calculateProfitsForTimePeriod","selectedTimePeriod","startDate","Date","setDate","getDate","setMonth","getMonth","getFullYear","setFullYear","filteredTrades","filter","trade","close_date","profits","map","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","totalProfit","reduce","sum","profit","labels","ctx","current","getContext","profitsData","myChart","window","Chart","type","data","datasets","label","backgroundColor","options","plugins","legend","display","scales","x","title","text","grid","y","min","max","destroy","handleTimePeriodClick","period","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange, periodPL, timePeriod }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\r\n      let startDate = new Date();\r\n\r\n      switch (selectedTimePeriod) {\r\n        case \"1D\":\r\n          startDate.setDate(startDate.getDate() - 1);\r\n          break;\r\n        case \"1W\":\r\n          startDate.setDate(startDate.getDate() - 7);\r\n          break;\r\n        case \"1M\":\r\n          startDate.setMonth(startDate.getMonth() - 1);\r\n          break;\r\n        case \"3M\":\r\n          startDate.setMonth(startDate.getMonth() - 3);\r\n          break;\r\n        case \"YTD\":\r\n          startDate = new Date(startDate.getFullYear(), 0, 1); // Year to Date\r\n          break;\r\n        case \"1Y\":\r\n          startDate.setFullYear(startDate.getFullYear() - 1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const filteredTrades = trades.filter(\r\n        (trade) => new Date(trade.close_date) >= startDate\r\n      );\r\n\r\n      const profits = filteredTrades.map((trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n        if (!isNaN(exitPrice)) {\r\n          return (exitPrice - entryPrice) * contracts * 100;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      const totalProfit = profits.reduce((sum, profit) => sum + profit, 0);\r\n\r\n      return {\r\n        labels: [selectedTimePeriod], // Use selectedTimePeriod as the label\r\n        profits: [totalProfit],\r\n      };\r\n    };\r\n\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\r\n\r\n    const myChart = new window.Chart(ctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: profitsData.labels,\r\n        datasets: [\r\n          {\r\n            label: \"Profit/Loss\",\r\n            data: profitsData.profits,\r\n            backgroundColor: \"lightgreen\",\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: \"Time Period\", // Label for the x-axis\r\n            },\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            display: true,\r\n            title: {\r\n              display: true,\r\n              text: \"Profit/Loss\",\r\n            },\r\n            min: -500, // Set minimum value for the y-axis\r\n            max: 500, // Set maximum value for the y-axis\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      myChart.destroy();\r\n    };\r\n  }, [trades, timePeriod]);\r\n\r\n  const handleTimePeriodClick = (period) => {\r\n    onTimePeriodChange(period);\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} />\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"Max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,2BAA2B;AAElC,MAAMC,YAAY,GAAGA,CAAC;EAAEC,MAAM;EAAEC,kBAAkB;EAAEC,QAAQ;EAAEC;AAAW,CAAC,KAAK;EAC7E,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMQ,6BAA6B,GAAGA,CAACL,MAAM,EAAEM,kBAAkB,KAAK;MACpE,IAAIC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;MAE1B,QAAQF,kBAAkB;QACxB,KAAK,IAAI;UACPC,SAAS,CAACE,OAAO,CAACF,SAAS,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;UAC1C;QACF,KAAK,IAAI;UACPH,SAAS,CAACE,OAAO,CAACF,SAAS,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;UAC1C;QACF,KAAK,IAAI;UACPH,SAAS,CAACI,QAAQ,CAACJ,SAAS,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC5C;QACF,KAAK,IAAI;UACPL,SAAS,CAACI,QAAQ,CAACJ,SAAS,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC5C;QACF,KAAK,KAAK;UACRL,SAAS,GAAG,IAAIC,IAAI,CAACD,SAAS,CAACM,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;UACrD;QACF,KAAK,IAAI;UACPN,SAAS,CAACO,WAAW,CAACP,SAAS,CAACM,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;UAClD;QACF;UACE;MACJ;MAEA,MAAME,cAAc,GAAGf,MAAM,CAACgB,MAAM,CACjCC,KAAK,IAAK,IAAIT,IAAI,CAACS,KAAK,CAACC,UAAU,CAAC,IAAIX,SAC3C,CAAC;MAED,MAAMY,OAAO,GAAGJ,cAAc,CAACK,GAAG,CAAEH,KAAK,IAAK;QAC5C,MAAMI,UAAU,GAAGC,UAAU,CAACL,KAAK,CAACM,WAAW,CAAC;QAChD,MAAMC,SAAS,GAAGF,UAAU,CAACL,KAAK,CAACQ,UAAU,CAAC;QAC9C,MAAMC,SAAS,GAAGT,KAAK,CAACS,SAAS;QACjC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC,EAAE;UACrB,OAAO,CAACA,SAAS,GAAGH,UAAU,IAAIK,SAAS,GAAG,GAAG;QACnD;QACA,OAAO,CAAC;MACV,CAAC,CAAC;MAEF,MAAME,WAAW,GAAGT,OAAO,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,GAAGC,MAAM,EAAE,CAAC,CAAC;MAEpE,OAAO;QACLC,MAAM,EAAE,CAAC1B,kBAAkB,CAAC;QAAE;QAC9Ba,OAAO,EAAE,CAACS,WAAW;MACvB,CAAC;IACH,CAAC;IAED,MAAMK,GAAG,GAAG7B,QAAQ,CAAC8B,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC7C,MAAMC,WAAW,GAAG/B,6BAA6B,CAACL,MAAM,EAAEG,UAAU,CAAC;IAErE,MAAMkC,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACN,GAAG,EAAE;MACpCO,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;QACJT,MAAM,EAAEI,WAAW,CAACJ,MAAM;QAC1BU,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,aAAa;UACpBF,IAAI,EAAEL,WAAW,CAACjB,OAAO;UACzByB,eAAe,EAAE;QACnB,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE;UACX;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,KAAK,EAAE;cACLH,OAAO,EAAE,IAAI;cACbI,IAAI,EAAE,aAAa,CAAE;YACvB,CAAC;YACDC,IAAI,EAAE;cACJL,OAAO,EAAE;YACX;UACF,CAAC;UACDM,CAAC,EAAE;YACDN,OAAO,EAAE,IAAI;YACbG,KAAK,EAAE;cACLH,OAAO,EAAE,IAAI;cACbI,IAAI,EAAE;YACR,CAAC;YACDG,GAAG,EAAE,CAAC,GAAG;YAAE;YACXC,GAAG,EAAE,GAAG,CAAE;UACZ;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXnB,OAAO,CAACoB,OAAO,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAACzD,MAAM,EAAEG,UAAU,CAAC,CAAC;EAExB,MAAMuD,qBAAqB,GAAIC,MAAM,IAAK;IACxC1D,kBAAkB,CAAC0D,MAAM,CAAC;EAC5B,CAAC;EAED,oBACE/D,KAAA,CAAAgE,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BvE,KAAA,CAAAgE,aAAA;IAAQQ,GAAG,EAAEhE,QAAS;IAAA0D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACzBvE,KAAA,CAAAgE,aAAA;IAAKC,SAAS,EAAC,sBAAsB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnCvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,IAAI,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5C,IAEO,CAAC,eACTvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,IAAI,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5C,IAEO,CAAC,eACTvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,IAAI,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5C,IAEO,CAAC,eACTvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,IAAI,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5C,IAEO,CAAC,eACTvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,KAAK,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC7C,KAEO,CAAC,eACTvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,IAAI,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5C,IAEO,CAAC,eACTvE,KAAA,CAAAgE,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAAC,KAAK,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC7C,KAEO,CACL,CACF,CAAC;AAEV,CAAC;AAED,eAAepE,YAAY"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\graph.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Papa from \"papaparse\";\nconst graphChart = () => {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    // Fetch your CSV data\n    fetch(\"http://localhost:8000/trades/\").then(response => response.text()).then(csvData => {\n      // Parse CSV data\n      const parsedData = Papa.parse(csvData, {\n        header: true\n      });\n      // Transform data to be compatible with Chart.js\n      const chartData = transformData(parsedData.data);\n      setData(chartData);\n    }).catch(error => console.error(\"Error fetching CSV data:\", error));\n  }, []);\n  const transformData = rawData => {\n    // Transform raw CSV data into a format compatible with Chart.js\n    const labels = rawData.map(entry => entry.trade_date);\n    const dailyProfitLoss = rawData.map(entry => calculateDailyProfitLoss(entry));\n    return {\n      labels: labels,\n      datasets: [{\n        label: \"Daily Profit/Loss\",\n        data: dailyProfitLoss,\n        fill: false,\n        borderColor: \"rgba(75, 192, 192, 1)\"\n      }]\n    };\n  };\n  const calculateDailyProfitLoss = entry => {\n    // Calculate daily profit/loss based on entry and exit prices\n    const profitLoss = (parseFloat(entry.exit_price) - parseFloat(entry.entry_price)) * parseInt(entry.contracts) * 100;\n    return profitLoss;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Account Performance Chart\"), data && /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: {\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: \"Date\"\n          },\n          type: \"time\",\n          time: {\n            unit: \"day\"\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: \"Profit/Loss ($)\"\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n};\nexport default graphChart;","map":{"version":3,"names":["React","useState","useEffect","Line","Papa","graphChart","data","setData","fetch","then","response","text","csvData","parsedData","parse","header","chartData","transformData","catch","error","console","rawData","labels","map","entry","trade_date","dailyProfitLoss","calculateDailyProfitLoss","datasets","label","fill","borderColor","profitLoss","parseFloat","exit_price","entry_price","parseInt","contracts","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","options","scales","x","title","display","type","time","unit","y"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/graph.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Papa from \"papaparse\";\r\n\r\nconst graphChart = () => {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch your CSV data\r\n    fetch(\"http://localhost:8000/trades/\")\r\n      .then((response) => response.text())\r\n      .then((csvData) => {\r\n        // Parse CSV data\r\n        const parsedData = Papa.parse(csvData, { header: true });\r\n        // Transform data to be compatible with Chart.js\r\n        const chartData = transformData(parsedData.data);\r\n        setData(chartData);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching CSV data:\", error));\r\n  }, []);\r\n\r\n  const transformData = (rawData) => {\r\n    // Transform raw CSV data into a format compatible with Chart.js\r\n    const labels = rawData.map((entry) => entry.trade_date);\r\n    const dailyProfitLoss = rawData.map((entry) =>\r\n      calculateDailyProfitLoss(entry)\r\n    );\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: \"Daily Profit/Loss\",\r\n          data: dailyProfitLoss,\r\n          fill: false,\r\n          borderColor: \"rgba(75, 192, 192, 1)\",\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const calculateDailyProfitLoss = (entry) => {\r\n    // Calculate daily profit/loss based on entry and exit prices\r\n    const profitLoss =\r\n      (parseFloat(entry.exit_price) - parseFloat(entry.entry_price)) *\r\n      parseInt(entry.contracts) *\r\n      100;\r\n    return profitLoss;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Performance Chart</h2>\r\n      {data && (\r\n        <Line\r\n          data={data}\r\n          options={{\r\n            scales: {\r\n              x: {\r\n                title: {\r\n                  display: true,\r\n                  text: \"Date\",\r\n                },\r\n                type: \"time\",\r\n                time: {\r\n                  unit: \"day\",\r\n                },\r\n              },\r\n              y: {\r\n                title: {\r\n                  display: true,\r\n                  text: \"Profit/Loss ($)\",\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default graphChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,IAAI,MAAM,WAAW;AAE5B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACAM,KAAK,CAAC,+BAA+B,CAAC,CACnCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,OAAO,IAAK;MACjB;MACA,MAAMC,UAAU,GAAGT,IAAI,CAACU,KAAK,CAACF,OAAO,EAAE;QAAEG,MAAM,EAAE;MAAK,CAAC,CAAC;MACxD;MACA,MAAMC,SAAS,GAAGC,aAAa,CAACJ,UAAU,CAACP,IAAI,CAAC;MAChDC,OAAO,CAACS,SAAS,CAAC;IACpB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMF,aAAa,GAAII,OAAO,IAAK;IACjC;IACA,MAAMC,MAAM,GAAGD,OAAO,CAACE,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,UAAU,CAAC;IACvD,MAAMC,eAAe,GAAGL,OAAO,CAACE,GAAG,CAAEC,KAAK,IACxCG,wBAAwB,CAACH,KAAK,CAChC,CAAC;IAED,OAAO;MACLF,MAAM,EAAEA,MAAM;MACdM,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,mBAAmB;QAC1BvB,IAAI,EAAEoB,eAAe;QACrBI,IAAI,EAAE,KAAK;QACXC,WAAW,EAAE;MACf,CAAC;IAEL,CAAC;EACH,CAAC;EAED,MAAMJ,wBAAwB,GAAIH,KAAK,IAAK;IAC1C;IACA,MAAMQ,UAAU,GACd,CAACC,UAAU,CAACT,KAAK,CAACU,UAAU,CAAC,GAAGD,UAAU,CAACT,KAAK,CAACW,WAAW,CAAC,IAC7DC,QAAQ,CAACZ,KAAK,CAACa,SAAS,CAAC,GACzB,GAAG;IACL,OAAOL,UAAU;EACnB,CAAC;EAED,oBACEhC,KAAA,CAAAsC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACE5C,KAAA,CAAAsC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,2BAA6B,CAAC,EACjCtC,IAAI,iBACHN,KAAA,CAAAsC,aAAA,CAACnC,IAAI;IACHG,IAAI,EAAEA,IAAK;IACXuC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbtC,IAAI,EAAE;UACR,CAAC;UACDuC,IAAI,EAAE,MAAM;UACZC,IAAI,EAAE;YACJC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,CAAC,EAAE;UACDL,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbtC,IAAI,EAAE;UACR;QACF;MACF;IACF,CAAE;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CAEA,CAAC;AAEV,CAAC;AAED,eAAevC,UAAU"},"metadata":{},"sourceType":"module"}
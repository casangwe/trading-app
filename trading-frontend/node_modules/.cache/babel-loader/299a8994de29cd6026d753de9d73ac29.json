{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Home.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/home.css\";\nimport Account from \"./Account\";\nimport NewTrade from \"./NewTrade\";\nimport RecentTrades from \"./RecentTrades\";\nimport BiggestWinsLosses from \"./BiggestWinsLosses\";\nconst Home = () => {\n  const [recentTrades, setRecentTrades] = useState([]);\n  useEffect(() => {\n    fetchRecentTrades(); //get trades from backend\n  }, []);\n  const fetchRecentTrades = () => {\n    fetch(\"http://localhost:8000/trades/\").then(response => response.json()).then(data => setRecentTrades(data)).catch(error => console.error(\"Error fetching recent trades:\", error));\n  };\n\n  // format date string to MM/DD/YYYY format\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = date.getDate().toString().padStart(2, \"0\");\n    const year = date.getFullYear();\n    return `${month}/${day}/${year}`;\n  };\n  const showSuccessModal = (stockName, tradeType) => {\n    const modal = document.querySelector(\".modal\");\n    const stockNameElement = document.getElementById(\"stockName\");\n    const tradeTypeElement = document.getElementById(\"tradeType\");\n    stockNameElement.textContent = stockName;\n    tradeTypeElement.textContent = tradeType;\n    modal.style.display = \"block\";\n    setTimeout(() => {\n      modal.style.display = \"none\";\n    }, 5000); // Hide the modal after 5 seconds\n  };\n\n  // Function to refresh the list of recent trades\n  const handleRefresh = () => {\n    fetchRecentTrades();\n    // alert(\"Successfully updated the list.\"); // Show alert when list is repopulated\n  };\n  const handleCloseModal = () => {\n    const modal = document.querySelector(\".modal\");\n    modal.style.display = \"none\";\n  };\n  const handleNewTradeSubmit = formData => {\n    // POST request to backend to add new trade\n    fetch(\"http://localhost:8000/trades/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(() => {\n      const stockName = formData.option_symbol;\n      const tradeType = formData.option_type;\n      showSuccessModal(stockName, tradeType); // Show success modal\n    }).catch(error => console.error(\"Error adding new trade:\", error));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Account, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewTrade, {\n    onTradeSubmit: handleNewTradeSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(RecentTrades, {\n    recentTrades: recentTrades,\n    formatDate: formatDate,\n    onRefresh: handleRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BiggestWinsLosses, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"close\",\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"New Trade Added\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Stock Name: \", /*#__PURE__*/React.createElement(\"span\", {\n    id: \"stockName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Type: \", /*#__PURE__*/React.createElement(\"span\", {\n    id: \"tradeType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  })))));\n};\nexport default Home;","map":{"version":3,"names":["React","useState","useEffect","Account","NewTrade","RecentTrades","BiggestWinsLosses","Home","recentTrades","setRecentTrades","fetchRecentTrades","fetch","then","response","json","data","catch","error","console","formatDate","dateString","date","Date","month","getMonth","toString","padStart","day","getDate","year","getFullYear","showSuccessModal","stockName","tradeType","modal","document","querySelector","stockNameElement","getElementById","tradeTypeElement","textContent","style","display","setTimeout","handleRefresh","handleCloseModal","handleNewTradeSubmit","formData","method","headers","body","JSON","stringify","option_symbol","option_type","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onTradeSubmit","onRefresh","onClick","id"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/home.css\";\r\nimport Account from \"./Account\";\r\nimport NewTrade from \"./NewTrade\";\r\nimport RecentTrades from \"./RecentTrades\";\r\nimport BiggestWinsLosses from \"./BiggestWinsLosses\";\r\n\r\nconst Home = () => {\r\n  const [recentTrades, setRecentTrades] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchRecentTrades(); //get trades from backend\r\n  }, []);\r\n\r\n  const fetchRecentTrades = () => {\r\n    fetch(\"http://localhost:8000/trades/\")\r\n      .then((response) => response.json())\r\n      .then((data) => setRecentTrades(data))\r\n      .catch((error) => console.error(\"Error fetching recent trades:\", error));\r\n  };\r\n\r\n  // format date string to MM/DD/YYYY format\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const day = date.getDate().toString().padStart(2, \"0\");\r\n    const year = date.getFullYear();\r\n    return `${month}/${day}/${year}`;\r\n  };\r\n\r\n  const showSuccessModal = (stockName, tradeType) => {\r\n    const modal = document.querySelector(\".modal\");\r\n    const stockNameElement = document.getElementById(\"stockName\");\r\n    const tradeTypeElement = document.getElementById(\"tradeType\");\r\n\r\n    stockNameElement.textContent = stockName;\r\n    tradeTypeElement.textContent = tradeType;\r\n\r\n    modal.style.display = \"block\";\r\n    setTimeout(() => {\r\n      modal.style.display = \"none\";\r\n    }, 5000); // Hide the modal after 5 seconds\r\n  };\r\n\r\n  // Function to refresh the list of recent trades\r\n  const handleRefresh = () => {\r\n    fetchRecentTrades();\r\n    // alert(\"Successfully updated the list.\"); // Show alert when list is repopulated\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    const modal = document.querySelector(\".modal\");\r\n    modal.style.display = \"none\";\r\n  };\r\n\r\n  const handleNewTradeSubmit = (formData) => {\r\n    // POST request to backend to add new trade\r\n    fetch(\"http://localhost:8000/trades/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then(() => {\r\n        const stockName = formData.option_symbol;\r\n        const tradeType = formData.option_type;\r\n        showSuccessModal(stockName, tradeType); // Show success modal\r\n      })\r\n      .catch((error) => console.error(\"Error adding new trade:\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <Account />\r\n      <NewTrade onTradeSubmit={handleNewTradeSubmit} />\r\n      <RecentTrades\r\n        recentTrades={recentTrades}\r\n        formatDate={formatDate}\r\n        onRefresh={handleRefresh}\r\n      />\r\n      <BiggestWinsLosses />\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <span className=\"close\" onClick={handleCloseModal}>\r\n            &times;\r\n          </span>\r\n          <h2>New Trade Added</h2>\r\n          <p>\r\n            Stock Name: <span id=\"stockName\"></span>\r\n          </p>\r\n          <p>\r\n            Type: <span id=\"tradeType\"></span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
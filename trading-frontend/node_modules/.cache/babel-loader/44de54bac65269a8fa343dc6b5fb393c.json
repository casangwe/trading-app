{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Watchlist.js\";\n// Watchlist.js\nimport React, { useState, useEffect } from \"react\";\nimport { fetchWatch } from \"./ApiCalls\";\nimport { successModal, unsuccessModal } from \"./Utility\"; // Assuming you have modals to handle success and error states\n\nconst Watchlist = () => {\n  const [watchlist, setWatchlist] = useState([]);\n  const [error, setError] = useState(null);\n  const [showModal, setShowModal] = useState(false); // eslint-disable-next-line\n  const [selectedWatch, setSelectedWatch] = useState(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [formData, setFormData] = useState({\n    dates: \"\",\n    symbol: \"\",\n    price: \"\",\n    target_price: \"\",\n    exp_date: \"\",\n    plan: \"\"\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (showEditModal) {\n      setSelectedWatch({\n        ...selectedWatch,\n        [name]: value\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    }\n  };\n\n  // Fetch watchlist data from API\n  const fetchWatchData = async () => {\n    try {\n      const watchdata = await fetchWatch();\n      setWatchlist(watchdata);\n      successModal();\n    } catch (error) {\n      setError(error.message);\n      unsuccessModal(error.message);\n    }\n  };\n  useEffect(() => {\n    fetchWatchData();\n  }, []);\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"Error: \", error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"watchlist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Watchlist\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, watchlist.map(entry => /*#__PURE__*/React.createElement(\"li\", {\n    key: entry.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, entry.date, \" - \", entry.symbol, \" - \", entry.price, \" - \", entry.target_price, \" \", \"- \", entry.exp_date, \" - \", entry.plan))));\n};\nexport default Watchlist;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchWatch } from \"./ApiCalls\";\n// import { successModal, unsuccessModal } from \"./Utility\";\n\n// const Watchlist = () => {\n//   const [watchlist, setWatchlist] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n//   const [selectedWatch, setSelectedWatch] = useState(null);\n//   const [showEditModal, setShowEditModal] = useState(false);\n//   const [formData, setFormData] = useState({\n//     dates: \"\",\n//     symbol: \"\",\n//     price: \"\",\n//     target_price: \"\",\n//     exp_date: \"\",\n//     plan: \"\",\n//   });\n\n//   // Fetch watchlist data from API\n//   useEffect(() => {\n//     const fetchWatch = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/watchlist/\");\n//         const data = await response.json();\n//         setWatchlist(data.watchlist_entries);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchWatch();\n//   }, []);\n\n//   // Function to handle form input change\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n//   // Function to handle form submission for adding watchlist item\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await fetch(\"http://localhost:8000/watchlist/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to add watchlist item\");\n//       }\n//       successModal();\n//       setShowModal(false);\n//       setFormData({\n//         dates: \"\",\n//         symbol: \"\",\n//         price: \"\",\n//         target_price: \"\",\n//         exp_date: \"\",\n//         plan: \"\",\n//       });\n//       fetchWatch();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   };\n\n//   // Function to handle clicking on a watchlist item for editing\n//   const handleListItemClick = (watchlistItem) => {\n//     setSelectedWatch(watchlistItem);\n//     setShowEditModal(true);\n//   };\n//   // Function to handle form submission for editing watchlist item\n//   const handleEditSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8000/watchlist/${selectedWatch.id}`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify(selectedWatch),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update watchlist item\");\n//       }\n//       // Assuming the response contains the updated watchlist item data\n//       const updatedWatchlistItem = await response.json();\n//       // Update the watchlist state with the updated item\n//       setWatchlist((prevWatchlist) =>\n//         prevWatchlist.map((item) =>\n//           item.id === updatedWatchlistItem.id ? updatedWatchlistItem : item\n//         )\n//       );\n//       // Close the edit modal\n//       setShowEditModal(false);\n//       fetchWatch();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error: {error}</p>;\n\n//   return (\n//     <div className=\"watchlist\">\n//       <div className=\"header\">\n//         <p>Watchlist</p>\n//         <i\n//           className=\"fa-solid fa-plus\"\n//           id=\"new-btn\"\n//           onClick={() => setShowModal(true)}\n//         ></i>\n//       </div>\n//       <div className=\"list\">\n//         <ul className=\"item\">\n//           {watchlist.map((entry, index) => (\n//             <li\n//               key={index}\n//               className=\"card-content\"\n//               onClick={() => handleListItemClick(entry)}\n//             >\n//               <div className=\"left\">\n//                 <p className=\"symbol\">{entry[2]}</p>\n//               </div>\n//               <div className=\"right\">\n//                 <p className=\"dates\">\n//                   Date: {entry[1]?.split(\"-\").slice(1).join(\"/\")}\n//                 </p>\n//                 <p className=\"price\">Price: ${entry[3]}</p>\n//                 <p className=\"target-price\">Target: ${entry[4]}</p>\n//                 <p className=\"exp-date\">\n//                   Expiry: {entry[5]?.split(\"-\").slice(1).join(\"/\")}\n//                 </p>\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       {showModal && (\n//         <div className=\"form-modal\">\n//           <div className=\"form-modal-content\">\n//             <div className=\"header\">\n//               <p>Watchlist</p>\n//               <span className=\"close\" onClick={() => setShowModal(false)}>\n//                 &times;\n//               </span>\n//             </div>\n//             <form className=\"new-trade-form\" onSubmit={handleSubmit}>\n//               <label htmlFor=\"dates\">Date:</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"dates\"\n//                 value={formData.dates}\n//                 onChange={handleChange}\n//               />\n\n//               <label htmlFor=\"symbol\">Symbol:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"symbol\"\n//                 value={formData.symbol}\n//                 onChange={handleChange}\n//               />\n\n//               <label htmlFor=\"price\">Price:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"price\"\n//                 value={formData.price}\n//                 onChange={handleChange}\n//               />\n\n//               <label htmlFor=\"target_price\">Target Price:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"target_price\"\n//                 value={formData.target_price}\n//                 onChange={handleChange}\n//               />\n\n//               <label htmlFor=\"exp_date\">Exp. Date:</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"exp_date\"\n//                 value={formData.exp_date}\n//                 onChange={handleChange}\n//               />\n\n//               <label htmlFor=\"plan\">Plan:</label>\n//               <input\n//                 name=\"plan\"\n//                 value={formData.plan}\n//                 onChange={handleChange}\n//               ></input>\n\n//               <button type=\"submit\">Add</button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//       {showEditModal && selectedWatch && (\n//         <div className=\"form-modal\">\n//           <div className=\"form-modal-content\">\n//             <div className=\"header\">\n//               <span className=\"close\" onClick={() => setShowEditModal(false)}>\n//                 &times;\n//               </span>\n//               <div>{selectedWatch.symbol}</div>\n//             </div>\n\n//             <form className=\"edit-trade-form\" onSubmit={handleEditSubmit}>\n//               <label htmlFor=\"option_type\">Option Type:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"option_type\"\n//                 value={selectedWatch.optionType}\n//                 onChange={(e) =>\n//                   setSelectedWatch({\n//                     ...selectedWatch,\n//                     optionType: e.target.value,\n//                   })\n//                 }\n//               />\n\n//               <label htmlFor=\"strike_price\">Strike Price:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"strike_price\"\n//                 value={selectedWatch.strikePrice}\n//                 onChange={(e) =>\n//                   setSelectedWatch({\n//                     ...selectedWatch,\n//                     strikePrice: e.target.value,\n//                   })\n//                 }\n//               />\n//               <label htmlFor=\"contracts\">Contracts:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"contracts\"\n//                 value={selectedWatch.contracts}\n//                 onChange={(e) =>\n//                   setSelectedWatch({\n//                     ...selectedWatch,\n//                     contracts: e.target.value,\n//                   })\n//                 }\n//               />\n\n//               <label htmlFor=\"entry_price\">Entry Price:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"entry_price\"\n//                 value={selectedWatch.entryPrice}\n//                 onChange={(e) =>\n//                   setSelectedWatch({\n//                     ...selectedWatch,\n//                     entryPrice: e.target.value,\n//                   })\n//                 }\n//               />\n\n//               <label htmlFor=\"exit_price\">Exit Price:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"exit_price\"\n//                 value={selectedWatch.exitPrice}\n//                 onChange={(e) =>\n//                   setSelectedWatch({\n//                     ...selectedWatch,\n//                     exitPrice: e.target.value,\n//                   })\n//                 }\n//               />\n\n//               <label htmlFor=\"close_date\">Close Date:</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"close_date\"\n//                 value={selectedWatch.closeDate}\n//                 onChange={(e) =>\n//                   setSelectedWatch({\n//                     ...selectedWatch,\n//                     closeDate: e.target.value,\n//                   })\n//                 }\n//               />\n\n//               <button type=\"submit\">Update</button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Watchlist;","map":{"version":3,"names":["React","useState","useEffect","fetchWatch","successModal","unsuccessModal","Watchlist","watchlist","setWatchlist","error","setError","showModal","setShowModal","selectedWatch","setSelectedWatch","showEditModal","setShowEditModal","formData","setFormData","dates","symbol","price","target_price","exp_date","plan","handleChange","e","name","value","target","fetchWatchData","watchdata","message","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","map","entry","key","id","date"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Watchlist.js"],"sourcesContent":["// Watchlist.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { fetchWatch } from \"./ApiCalls\";\r\nimport { successModal, unsuccessModal } from \"./Utility\"; // Assuming you have modals to handle success and error states\r\n\r\nconst Watchlist = () => {\r\n  const [watchlist, setWatchlist] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [showModal, setShowModal] = useState(false); // eslint-disable-next-line\r\n  const [selectedWatch, setSelectedWatch] = useState(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    dates: \"\",\r\n    symbol: \"\",\r\n    price: \"\",\r\n    target_price: \"\",\r\n    exp_date: \"\",\r\n    plan: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (showEditModal) {\r\n      setSelectedWatch({ ...selectedWatch, [name]: value });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n  };\r\n\r\n  // Fetch watchlist data from API\r\n  const fetchWatchData = async () => {\r\n    try {\r\n      const watchdata = await fetchWatch();\r\n      setWatchlist(watchdata);\r\n      successModal();\r\n    } catch (error) {\r\n      setError(error.message);\r\n      unsuccessModal(error.message);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchWatchData();\r\n  }, []);\r\n\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"watchlist\">\r\n      <h2>Watchlist</h2>\r\n      <ul>\r\n        {watchlist.map((entry) => (\r\n          <li key={entry.id}>\r\n            {entry.date} - {entry.symbol} - {entry.price} - {entry.target_price}{\" \"}\r\n            - {entry.exp_date} - {entry.plan}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Watchlist;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchWatch } from \"./ApiCalls\";\r\n// import { successModal, unsuccessModal } from \"./Utility\";\r\n\r\n// const Watchlist = () => {\r\n//   const [watchlist, setWatchlist] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [showModal, setShowModal] = useState(false);\r\n//   const [selectedWatch, setSelectedWatch] = useState(null);\r\n//   const [showEditModal, setShowEditModal] = useState(false);\r\n//   const [formData, setFormData] = useState({\r\n//     dates: \"\",\r\n//     symbol: \"\",\r\n//     price: \"\",\r\n//     target_price: \"\",\r\n//     exp_date: \"\",\r\n//     plan: \"\",\r\n//   });\r\n\r\n//   // Fetch watchlist data from API\r\n//   useEffect(() => {\r\n//     const fetchWatch = async () => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:8000/watchlist/\");\r\n//         const data = await response.json();\r\n//         setWatchlist(data.watchlist_entries);\r\n//       } catch (err) {\r\n//         setError(err.message);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     fetchWatch();\r\n//   }, []);\r\n\r\n//   // Function to handle form input change\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n//   // Function to handle form submission for adding watchlist item\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:8000/watchlist/\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to add watchlist item\");\r\n//       }\r\n//       successModal();\r\n//       setShowModal(false);\r\n//       setFormData({\r\n//         dates: \"\",\r\n//         symbol: \"\",\r\n//         price: \"\",\r\n//         target_price: \"\",\r\n//         exp_date: \"\",\r\n//         plan: \"\",\r\n//       });\r\n//       fetchWatch();\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle clicking on a watchlist item for editing\r\n//   const handleListItemClick = (watchlistItem) => {\r\n//     setSelectedWatch(watchlistItem);\r\n//     setShowEditModal(true);\r\n//   };\r\n//   // Function to handle form submission for editing watchlist item\r\n//   const handleEditSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8000/watchlist/${selectedWatch.id}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify(selectedWatch),\r\n//         }\r\n//       );\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to update watchlist item\");\r\n//       }\r\n//       // Assuming the response contains the updated watchlist item data\r\n//       const updatedWatchlistItem = await response.json();\r\n//       // Update the watchlist state with the updated item\r\n//       setWatchlist((prevWatchlist) =>\r\n//         prevWatchlist.map((item) =>\r\n//           item.id === updatedWatchlistItem.id ? updatedWatchlistItem : item\r\n//         )\r\n//       );\r\n//       // Close the edit modal\r\n//       setShowEditModal(false);\r\n//       fetchWatch();\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n//   if (error) return <p>Error: {error}</p>;\r\n\r\n//   return (\r\n//     <div className=\"watchlist\">\r\n//       <div className=\"header\">\r\n//         <p>Watchlist</p>\r\n//         <i\r\n//           className=\"fa-solid fa-plus\"\r\n//           id=\"new-btn\"\r\n//           onClick={() => setShowModal(true)}\r\n//         ></i>\r\n//       </div>\r\n//       <div className=\"list\">\r\n//         <ul className=\"item\">\r\n//           {watchlist.map((entry, index) => (\r\n//             <li\r\n//               key={index}\r\n//               className=\"card-content\"\r\n//               onClick={() => handleListItemClick(entry)}\r\n//             >\r\n//               <div className=\"left\">\r\n//                 <p className=\"symbol\">{entry[2]}</p>\r\n//               </div>\r\n//               <div className=\"right\">\r\n//                 <p className=\"dates\">\r\n//                   Date: {entry[1]?.split(\"-\").slice(1).join(\"/\")}\r\n//                 </p>\r\n//                 <p className=\"price\">Price: ${entry[3]}</p>\r\n//                 <p className=\"target-price\">Target: ${entry[4]}</p>\r\n//                 <p className=\"exp-date\">\r\n//                   Expiry: {entry[5]?.split(\"-\").slice(1).join(\"/\")}\r\n//                 </p>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       {showModal && (\r\n//         <div className=\"form-modal\">\r\n//           <div className=\"form-modal-content\">\r\n//             <div className=\"header\">\r\n//               <p>Watchlist</p>\r\n//               <span className=\"close\" onClick={() => setShowModal(false)}>\r\n//                 &times;\r\n//               </span>\r\n//             </div>\r\n//             <form className=\"new-trade-form\" onSubmit={handleSubmit}>\r\n//               <label htmlFor=\"dates\">Date:</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 name=\"dates\"\r\n//                 value={formData.dates}\r\n//                 onChange={handleChange}\r\n//               />\r\n\r\n//               <label htmlFor=\"symbol\">Symbol:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"symbol\"\r\n//                 value={formData.symbol}\r\n//                 onChange={handleChange}\r\n//               />\r\n\r\n//               <label htmlFor=\"price\">Price:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"price\"\r\n//                 value={formData.price}\r\n//                 onChange={handleChange}\r\n//               />\r\n\r\n//               <label htmlFor=\"target_price\">Target Price:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"target_price\"\r\n//                 value={formData.target_price}\r\n//                 onChange={handleChange}\r\n//               />\r\n\r\n//               <label htmlFor=\"exp_date\">Exp. Date:</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 name=\"exp_date\"\r\n//                 value={formData.exp_date}\r\n//                 onChange={handleChange}\r\n//               />\r\n\r\n//               <label htmlFor=\"plan\">Plan:</label>\r\n//               <input\r\n//                 name=\"plan\"\r\n//                 value={formData.plan}\r\n//                 onChange={handleChange}\r\n//               ></input>\r\n\r\n//               <button type=\"submit\">Add</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {showEditModal && selectedWatch && (\r\n//         <div className=\"form-modal\">\r\n//           <div className=\"form-modal-content\">\r\n//             <div className=\"header\">\r\n//               <span className=\"close\" onClick={() => setShowEditModal(false)}>\r\n//                 &times;\r\n//               </span>\r\n//               <div>{selectedWatch.symbol}</div>\r\n//             </div>\r\n\r\n//             <form className=\"edit-trade-form\" onSubmit={handleEditSubmit}>\r\n//               <label htmlFor=\"option_type\">Option Type:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"option_type\"\r\n//                 value={selectedWatch.optionType}\r\n//                 onChange={(e) =>\r\n//                   setSelectedWatch({\r\n//                     ...selectedWatch,\r\n//                     optionType: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n\r\n//               <label htmlFor=\"strike_price\">Strike Price:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"strike_price\"\r\n//                 value={selectedWatch.strikePrice}\r\n//                 onChange={(e) =>\r\n//                   setSelectedWatch({\r\n//                     ...selectedWatch,\r\n//                     strikePrice: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n//               <label htmlFor=\"contracts\">Contracts:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"contracts\"\r\n//                 value={selectedWatch.contracts}\r\n//                 onChange={(e) =>\r\n//                   setSelectedWatch({\r\n//                     ...selectedWatch,\r\n//                     contracts: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n\r\n//               <label htmlFor=\"entry_price\">Entry Price:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"entry_price\"\r\n//                 value={selectedWatch.entryPrice}\r\n//                 onChange={(e) =>\r\n//                   setSelectedWatch({\r\n//                     ...selectedWatch,\r\n//                     entryPrice: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n\r\n//               <label htmlFor=\"exit_price\">Exit Price:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"exit_price\"\r\n//                 value={selectedWatch.exitPrice}\r\n//                 onChange={(e) =>\r\n//                   setSelectedWatch({\r\n//                     ...selectedWatch,\r\n//                     exitPrice: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n\r\n//               <label htmlFor=\"close_date\">Close Date:</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 name=\"close_date\"\r\n//                 value={selectedWatch.closeDate}\r\n//                 onChange={(e) =>\r\n//                   setSelectedWatch({\r\n//                     ...selectedWatch,\r\n//                     closeDate: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n\r\n//               <button type=\"submit\">Update</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Watchlist;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
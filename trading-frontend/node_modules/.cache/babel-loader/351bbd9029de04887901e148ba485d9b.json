{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Account.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/account.css\";\nimport AccountGraph from \"./AccountGraph\";\nconst Account = ({\n  trades\n}) => {\n  // State to store the total account balance\n  const [totalBalance, setTotalBalance] = useState(0);\n\n  // Calculate total account balance when trades change\n  useEffect(() => {\n    const calculateTotalBalance = () => {\n      // Calculate total account balance\n      const balance = trades.reduce((acc, trade) => {\n        // Extract trade data\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n\n        // Calculate profit for the trade\n        const profit = (exitPrice - entryPrice) * contracts;\n\n        // Add profit to the accumulator\n        return acc + profit;\n      }, 0);\n\n      // Update total account balance\n      setTotalBalance(balance);\n    };\n\n    // Call the function to calculate total balance\n    calculateTotalBalance();\n  }, [trades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, totalBalance.toFixed(2))), /*#__PURE__*/React.createElement(AccountGraph, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Account;","map":{"version":3,"names":["React","useState","useEffect","AccountGraph","Account","trades","totalBalance","setTotalBalance","calculateTotalBalance","balance","reduce","acc","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","profit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/account.css\";\r\nimport AccountGraph from \"./AccountGraph\";\r\n\r\nconst Account = ({ trades }) => {\r\n  // State to store the total account balance\r\n  const [totalBalance, setTotalBalance] = useState(0);\r\n\r\n  // Calculate total account balance when trades change\r\n  useEffect(() => {\r\n    const calculateTotalBalance = () => {\r\n      // Calculate total account balance\r\n      const balance = trades.reduce((acc, trade) => {\r\n        // Extract trade data\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n\r\n        // Calculate profit for the trade\r\n        const profit = (exitPrice - entryPrice) * contracts;\r\n\r\n        // Add profit to the accumulator\r\n        return acc + profit;\r\n      }, 0);\r\n\r\n      // Update total account balance\r\n      setTotalBalance(balance);\r\n    };\r\n\r\n    // Call the function to calculate total balance\r\n    calculateTotalBalance();\r\n  }, [trades]);\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"card\">\r\n        <p>Account</p>\r\n        <p className=\"cash\">{totalBalance.toFixed(2)}</p>\r\n      </div>\r\n      <AccountGraph />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAC7B,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAC9B;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMM,qBAAqB,GAAGA,CAAA,KAAM;MAClC;MACA,MAAMC,OAAO,GAAGJ,MAAM,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;QAC5C;QACA,MAAMC,UAAU,GAAGC,UAAU,CAACF,KAAK,CAACG,WAAW,CAAC;QAChD,MAAMC,SAAS,GAAGF,UAAU,CAACF,KAAK,CAACK,UAAU,CAAC;QAC9C,MAAMC,SAAS,GAAGN,KAAK,CAACM,SAAS;;QAEjC;QACA,MAAMC,MAAM,GAAG,CAACH,SAAS,GAAGH,UAAU,IAAIK,SAAS;;QAEnD;QACA,OAAOP,GAAG,GAAGQ,MAAM;MACrB,CAAC,EAAE,CAAC,CAAC;;MAEL;MACAZ,eAAe,CAACE,OAAO,CAAC;IAC1B,CAAC;;IAED;IACAD,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,oBACEL,KAAA,CAAAoB,aAAA;IAAKC,SAAS,EAAC,SAAS;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtB3B,KAAA,CAAAoB,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnB3B,KAAA,CAAAoB,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,SAAU,CAAC,eACd3B,KAAA,CAAAoB,aAAA;IAAGC,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAErB,YAAY,CAACsB,OAAO,CAAC,CAAC,CAAK,CAC7C,CAAC,eACN5B,KAAA,CAAAoB,aAAA,CAACjB,YAAY;IAAAmB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACZ,CAAC;AAEV,CAAC;AAED,eAAevB,OAAO"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\InvestmentChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { ScatterChart, Scatter, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst timeFrames = [\"1W\", \"1M\", \"3M\"]; // Define available time frames\n\nconst InvestmentChart = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [selectedTimeFrame, setSelectedTimeFrame] = useState(\"1W\"); // Track selected time frame\n\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"No Daily PNL data\");\n        console.error(\"Error fetching daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  useEffect(() => {\n    if (!dailyPNLData.length) return;\n    const filteredData = filterDataByTimeFrame();\n    setChartData(filteredData);\n  }, [selectedTimeFrame, dailyPNLData]);\n\n  // Filter data based on selected time frame\n  const filterDataByTimeFrame = () => {\n    switch (selectedTimeFrame) {\n      case \"1W\":\n        return getCurrentWeek(dailyPNLData);\n      case \"1M\":\n        return getCurrentMonth(dailyPNLData);\n      case \"3M\":\n        return getLastThreeMonths(dailyPNLData);\n      default:\n        return dailyPNLData;\n    }\n  };\n\n  // Filter entries for the past week\n  const getCurrentWeek = data => {\n    const today = new Date();\n    const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));\n    return data.filter(entry => new Date(entry.entry_date) >= startOfWeek);\n  };\n\n  // Filter entries for the current month\n  const getCurrentMonth = data => {\n    const today = new Date();\n    return data.filter(entry => new Date(entry.entry_date).getMonth() === today.getMonth());\n  };\n\n  // Filter entries for the past 3 months\n  const getLastThreeMonths = data => {\n    const today = new Date();\n    const threeMonthsAgo = new Date(today.setMonth(today.getMonth() - 3));\n    return data.filter(entry => new Date(entry.entry_date) >= threeMonthsAgo);\n  };\n  const prepareChartData = filteredData => {\n    return filteredData.map(entry => ({\n      date: formatDate(entry.entry_date),\n      balance: parseFloat(entry.balance || 0)\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-frame-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, timeFrames.map(frame => /*#__PURE__*/React.createElement(\"button\", {\n    key: frame,\n    className: selectedTimeFrame === frame ? \"active\" : \"\",\n    onClick: () => setSelectedTimeFrame(frame),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, frame))), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ScatterChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    type: \"category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"balance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => formatCash(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Scatter, {\n    data: prepareChartData(chartData),\n    fill: \"#4a90e2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  })))));\n};\nexport default InvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","ScatterChart","Scatter","XAxis","YAxis","Tooltip","ResponsiveContainer","formatCash","formatDate","timeFrames","InvestmentChart","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","chartData","setChartData","selectedTimeFrame","setSelectedTimeFrame","fetchDailyPNLData","data","console","length","filteredData","filterDataByTimeFrame","getCurrentWeek","getCurrentMonth","getLastThreeMonths","today","Date","startOfWeek","setDate","getDate","getDay","filter","entry","entry_date","getMonth","threeMonthsAgo","setMonth","prepareChartData","map","date","balance","parseFloat","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","frame","key","onClick","width","height","dataKey","type","formatter","value","fill"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/InvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst timeFrames = [\"1W\", \"1M\", \"3M\"]; // Define available time frames\r\n\r\nconst InvestmentChart = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [selectedTimeFrame, setSelectedTimeFrame] = useState(\"1W\"); // Track selected time frame\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"No Daily PNL data\");\r\n        console.error(\"Error fetching daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!dailyPNLData.length) return;\r\n    const filteredData = filterDataByTimeFrame();\r\n    setChartData(filteredData);\r\n  }, [selectedTimeFrame, dailyPNLData]);\r\n\r\n  // Filter data based on selected time frame\r\n  const filterDataByTimeFrame = () => {\r\n    switch (selectedTimeFrame) {\r\n      case \"1W\":\r\n        return getCurrentWeek(dailyPNLData);\r\n      case \"1M\":\r\n        return getCurrentMonth(dailyPNLData);\r\n      case \"3M\":\r\n        return getLastThreeMonths(dailyPNLData);\r\n      default:\r\n        return dailyPNLData;\r\n    }\r\n  };\r\n\r\n  // Filter entries for the past week\r\n  const getCurrentWeek = (data) => {\r\n    const today = new Date();\r\n    const startOfWeek = new Date(\r\n      today.setDate(today.getDate() - today.getDay())\r\n    );\r\n    return data.filter((entry) => new Date(entry.entry_date) >= startOfWeek);\r\n  };\r\n\r\n  // Filter entries for the current month\r\n  const getCurrentMonth = (data) => {\r\n    const today = new Date();\r\n    return data.filter(\r\n      (entry) => new Date(entry.entry_date).getMonth() === today.getMonth()\r\n    );\r\n  };\r\n\r\n  // Filter entries for the past 3 months\r\n  const getLastThreeMonths = (data) => {\r\n    const today = new Date();\r\n    const threeMonthsAgo = new Date(today.setMonth(today.getMonth() - 3));\r\n    return data.filter((entry) => new Date(entry.entry_date) >= threeMonthsAgo);\r\n  };\r\n\r\n  const prepareChartData = (filteredData) => {\r\n    return filteredData.map((entry) => ({\r\n      date: formatDate(entry.entry_date),\r\n      balance: parseFloat(entry.balance || 0),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"investment-chart-container\">\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <>\r\n          {/* Time frame selection buttons */}\r\n          <div className=\"time-frame-selector\">\r\n            {timeFrames.map((frame) => (\r\n              <button\r\n                key={frame}\r\n                className={selectedTimeFrame === frame ? \"active\" : \"\"}\r\n                onClick={() => setSelectedTimeFrame(frame)}\r\n              >\r\n                {frame}\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <ScatterChart>\r\n              <XAxis dataKey=\"date\" type=\"category\" />\r\n              <YAxis dataKey=\"balance\" />\r\n              <Tooltip formatter={(value) => formatCash(value)} />\r\n              <Scatter data={prepareChartData(chartData)} fill=\"#4a90e2\" />\r\n            </ScatterChart>\r\n          </ResponsiveContainer>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n//   useEffect(() => {\n//     // Fetch top profitable trades from API\n//     const fetchTopProfitableTrades = () => {\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\n//         .then((response) => response.json())\n//         .then((data) => setTopProfitableTrades(data))\n//         .catch((error) =>\n//           console.error(\"Error fetching top profitable trades:\", error)\n//         );\n//     };\n\n//     fetchTopProfitableTrades();\n//   }, []); // Fetch data only once on component mount\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = (period) => {\n//     // Implement logic to return labels based on the selected time period\n//     // For example,\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = (period) => {\n//     // Implement logic to return data based on the selected time period\n//     // For example, if period is \"weeks\", return data for weeks\n//   };\n\n//   // Function to handle time period change\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n// return (\n//   <div className=\"account-graph\">\n//     <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//     <div className=\"time-period-selector\">\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"days\")}\n//       >\n//         1D\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"weeks\")}\n//       >\n//         1W\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"months\")}\n//       >\n//         1M\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"3-months\")}\n//       >\n//         3M\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"YTD\")}\n//       >\n//         YTD\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"1-year\")}\n//       >\n//         1Y\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"max\")}\n//       >\n//         MAX\n//       </button>\n//     </div>\n//   </div>\n// );\n// };\n\n// export default AccountGraph;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = () => {\n  const chartRef = useRef(null); // Reference to the canvas element\n  const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n  const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n  useEffect(() => {\n    // Fetch top profitable trades from API\n    const fetchTopProfitableTrades = () => {\n      fetch(\"http://localhost:8000/trades/top-profitable/\").then(response => response.json()).then(data => setTopProfitableTrades(data)).catch(error => console.error(\"Error fetching top profitable trades:\", error));\n    };\n    fetchTopProfitableTrades();\n  }, []); // Fetch data only once on component mount\n\n  useEffect(() => {\n    if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n    // Load Chart.js from the CDN dynamically\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n    script.async = true;\n    script.onload = () => {\n      // Initialize Chart.js instance after the script has loaded\n      const ctx = chartRef.current.getContext(\"2d\");\n      const myChart = new window.Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: getLabels(),\n          // Get labels based on the selected time period\n          datasets: [{\n            label: \"Profit\",\n            data: getData(),\n            // Get data based on the selected time period\n            borderColor: \"green\",\n            // Green color for line\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            // Transparent background color\n            borderWidth: 2 // Width of the line\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: true,\n              position: \"top\"\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              grid: {\n                display: true\n              },\n              title: {\n                display: true,\n                text: \"Profit\"\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        myChart.destroy(); // Clean up chart on unmount\n      };\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script); // Clean up script tag on unmount\n    };\n  }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\n\n  // Function to get labels based on the selected time period\n  const getLabels = () => {\n    return topProfitableTrades.map(trade => trade.date); // Assuming trade object has 'date' property\n  };\n\n  // Function to get data based on the selected time period\n  const getData = () => {\n    return topProfitableTrades.map(trade => trade.profit); // Assuming trade object has 'profit' property\n  };\n\n  // Function to handle time period change (not used in this simplified version)\n  const handleTimePeriodChange = period => {\n    // Here you can implement logic to handle time period change if needed\n    setTimePeriod(period);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"days\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"weeks\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"months\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"3-months\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"1-year\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","chartRef","timePeriod","setTimePeriod","topProfitableTrades","setTopProfitableTrades","fetchTopProfitableTrades","fetch","then","response","json","data","catch","error","console","length","script","document","createElement","src","async","onload","ctx","current","getContext","myChart","window","Chart","type","labels","getLabels","datasets","label","getData","borderColor","backgroundColor","borderWidth","options","plugins","legend","display","position","scales","x","grid","y","title","text","destroy","body","appendChild","removeChild","map","trade","date","profit","handleTimePeriodChange","period","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top profitable trades from API\r\n//     const fetchTopProfitableTrades = () => {\r\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTopProfitableTrades(data))\r\n//         .catch((error) =>\r\n//           console.error(\"Error fetching top profitable trades:\", error)\r\n//         );\r\n//     };\r\n\r\n//     fetchTopProfitableTrades();\r\n//   }, []); // Fetch data only once on component mount\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = (period) => {\r\n//     // Implement logic to return labels based on the selected time period\r\n//     // For example,\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = (period) => {\r\n//     // Implement logic to return data based on the selected time period\r\n//     // For example, if period is \"weeks\", return data for weeks\r\n//   };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n// return (\r\n//   <div className=\"account-graph\">\r\n//     <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//     <div className=\"time-period-selector\">\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"days\")}\r\n//       >\r\n//         1D\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//       >\r\n//         1W\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"months\")}\r\n//       >\r\n//         1M\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//       >\r\n//         3M\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//       >\r\n//         YTD\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//       >\r\n//         1Y\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"max\")}\r\n//       >\r\n//         MAX\r\n//       </button>\r\n//     </div>\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// export default AccountGraph;\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = () => {\r\n  const chartRef = useRef(null); // Reference to the canvas element\r\n  const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n  const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n  useEffect(() => {\r\n    // Fetch top profitable trades from API\r\n    const fetchTopProfitableTrades = () => {\r\n      fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n        .then((response) => response.json())\r\n        .then((data) => setTopProfitableTrades(data))\r\n        .catch((error) =>\r\n          console.error(\"Error fetching top profitable trades:\", error)\r\n        );\r\n    };\r\n\r\n    fetchTopProfitableTrades();\r\n  }, []); // Fetch data only once on component mount\r\n\r\n  useEffect(() => {\r\n    if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n    // Load Chart.js from the CDN dynamically\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      // Initialize Chart.js instance after the script has loaded\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"line\",\r\n        data: {\r\n          labels: getLabels(), // Get labels based on the selected time period\r\n          datasets: [\r\n            {\r\n              label: \"Profit\",\r\n              data: getData(), // Get data based on the selected time period\r\n              borderColor: \"green\", // Green color for line\r\n              backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n              borderWidth: 2, // Width of the line\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: \"top\",\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              grid: {\r\n                display: true,\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: \"Profit\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy(); // Clean up chart on unmount\r\n      };\r\n    };\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script); // Clean up script tag on unmount\r\n    };\r\n  }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\r\n\r\n  // Function to get labels based on the selected time period\r\n  const getLabels = () => {\r\n    return topProfitableTrades.map((trade) => trade.date); // Assuming trade object has 'date' property\r\n  };\r\n\r\n  // Function to get data based on the selected time period\r\n  const getData = () => {\r\n    return topProfitableTrades.map((trade) => trade.profit); // Assuming trade object has 'profit' property\r\n  };\r\n\r\n  // Function to handle time period change (not used in this simplified version)\r\n  const handleTimePeriodChange = (period) => {\r\n    // Here you can implement logic to handle time period change if needed\r\n    setTimePeriod(period);\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"days\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"weeks\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"months\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"3-months\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"1-year\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,2BAA2B;AAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,QAAQ,GAAGH,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,MAAM,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACK,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpEF,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,wBAAwB,GAAGA,CAAA,KAAM;MACrCC,KAAK,CAAC,8CAA8C,CAAC,CAClDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKN,sBAAsB,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"},"metadata":{},"sourceType":"module"}
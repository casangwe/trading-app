{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades\n}) => {\n  const chartRef = useRef(null); // Reference to the canvas element\n  const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\n  const [periodPL, setPeriodPL] = useState(0);\n  useEffect(() => {\n    const calculatePeriodPL = () => {\n      let periodProfitLoss = 0;\n      const startDate = calculateStartDate(timePeriod);\n      const filteredTrades = trades.filter(trade => new Date(trade.close_date) >= startDate);\n      filteredTrades.forEach(trade => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        const profit = (exitPrice - entryPrice) * contracts * 100;\n        periodProfitLoss += profit;\n      });\n      setPeriodPL(periodProfitLoss);\n    };\n    calculatePeriodPL();\n  }, [trades, timePeriod]);\n  useEffect(() => {\n    if (!trades || trades.length === 0) return;\n    const data = getData(timePeriod, trades);\n    const labels = getLabels(timePeriod);\n    updateChart(data, labels);\n  }, [trades, timePeriod]);\n  const calculateStartDate = period => {\n    const currentDate = new Date();\n    switch (period) {\n      case \"1D\":\n        return new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);\n      case \"1W\":\n        return new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 7);\n      case \"1M\":\n        return new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, currentDate.getDate());\n      case \"3M\":\n        return new Date(currentDate.getFullYear(), currentDate.getMonth() - 3, currentDate.getDate());\n      case \"YTD\":\n        return new Date(currentDate.getFullYear(), 0, 1);\n      case \"1Y\":\n        return new Date(currentDate.getFullYear() - 1, currentDate.getMonth(), currentDate.getDate());\n      default:\n        return currentDate;\n    }\n  };\n  const getLabels = period => {\n    switch (period) {\n      case \"1D\":\n        // Implement logic to return labels for 1 day\n        break;\n      case \"1W\":\n        // Implement logic to return labels for 1 week\n        break;\n      case \"1M\":\n        // Implement logic to return labels for 1 month\n        break;\n      case \"3M\":\n        // Implement logic to return labels for 3 months\n        break;\n      case \"YTD\":\n        // Implement logic to return labels for year-to-date\n        break;\n      case \"1Y\":\n        // Implement logic to return labels for 1 year\n        break;\n      default:\n        return [];\n    }\n  };\n  const getData = (period, trades) => {\n    switch (period) {\n      case \"1D\":\n        // Implement logic to return data for 1 day\n        break;\n      case \"1W\":\n        // Implement logic to return data for 1 week\n        break;\n      case \"1M\":\n        // Implement logic to return data for 1 month\n        break;\n      case \"3M\":\n        // Implement logic to return data for 3 months\n        break;\n      case \"YTD\":\n        // Implement logic to return data for year-to-date\n        break;\n      case \"1Y\":\n        // Implement logic to return data for 1 year\n        break;\n      default:\n        return [];\n    }\n  };\n  const updateChart = (data, labels) => {\n    if (!chartRef.current || !data || !labels || data.length !== labels.length) return;\n    const ctx = chartRef.current.getContext(\"2d\");\n    const myChart = new window.Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [{\n          data: data,\n          borderColor: \"green\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderWidth: 2\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            },\n            min: 0,\n            max: 1000,\n            position: \"center\"\n          },\n          y: {\n            display: false\n          }\n        }\n      }\n    });\n  };\n  const handleTimePeriodChange = period => {\n    setTimePeriod(period);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, \"1Y\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"period-pl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, `${timePeriod} P/L`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, periodPL.toFixed(2))));\n};\nexport default AccountGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }); // Re-render the chart when the time period changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = (period) => {\n//     // Implement logic to return labels based on the selected time period\n//     // For example,\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = (period) => {\n//     // Implement logic to return data based on the selected time period\n//     // For example, if period is \"weeks\", return data for weeks\n//   };\n\n//   // Function to handle time period change\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"days\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"months\")}\n//         >\n//           1M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\n//         >\n//           3M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\n//         >\n//           YTD\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\n//         >\n//           1Y\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"max\")}\n//         >\n//           MAX\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n//   useEffect(() => {\n//     // Fetch top profitable trades from API\n//     const fetchTopProfitableTrades = () => {\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\n//         .then((response) => response.json())\n//         .then((data) => setTopProfitableTrades(data))\n//         .catch((error) =>\n//           console.error(\"Error fetching top profitable trades:\", error)\n//         );\n//     };\n\n//     fetchTopProfitableTrades();\n//   }, []); // Fetch data only once on component mount\n\n//   useEffect(() => {\n//     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"bar\", // Change chart type to \"bar\"\n//         data: {\n//           labels: topProfitableTrades.map((trade) => trade.trade_date), // Labels as trade dates\n//           datasets: [\n//             {\n//               label: \"Profit/Loss\",\n//               data: getData(), // Call getData function to get profit data\n//               backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Blue color with transparency\n//               borderColor: \"rgba(54, 162, 235, 1)\", // Solid blue border color\n//               borderWidth: 1, // Width of the border\n//             },\n//           ],\n//         },\n//         options: {\n//           scales: {\n//             y: {\n//               beginAtZero: true, // Start y-axis from zero\n//               title: {\n//                 display: true,\n//                 text: \"Profit/Loss\", // Y-axis title\n//               },\n//             },\n//             x: {\n//               title: {\n//                 display: true,\n//                 text: \"Trade Date\", // X-axis title\n//               },\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\n\n//   // Function to get profit data from topProfitableTrades\n//   const getData = () => {\n//     return topProfitableTrades.map((trade) => parseFloat(trade.profit)); // Convert profit to float\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","trades","chartRef","timePeriod","setTimePeriod","periodPL","setPeriodPL","calculatePeriodPL","periodProfitLoss","startDate","calculateStartDate","filteredTrades","filter","trade","Date","close_date","forEach","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","profit","length","data","getData","labels","getLabels","updateChart","period","currentDate","getFullYear","getMonth","getDate","current","ctx","getContext","myChart","window","Chart","type","datasets","borderColor","backgroundColor","borderWidth","options","plugins","legend","display","scales","x","grid","ticks","min","max","position","y","handleTimePeriodChange","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades }) => {\r\n  const chartRef = useRef(null); // Reference to the canvas element\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\r\n  const [periodPL, setPeriodPL] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const calculatePeriodPL = () => {\r\n      let periodProfitLoss = 0;\r\n\r\n      const startDate = calculateStartDate(timePeriod);\r\n\r\n      const filteredTrades = trades.filter(\r\n        (trade) => new Date(trade.close_date) >= startDate\r\n      );\r\n\r\n      filteredTrades.forEach((trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n        const profit = (exitPrice - entryPrice) * contracts * 100;\r\n        periodProfitLoss += profit;\r\n      });\r\n\r\n      setPeriodPL(periodProfitLoss);\r\n    };\r\n\r\n    calculatePeriodPL();\r\n  }, [trades, timePeriod]);\r\n\r\n  useEffect(() => {\r\n    if (!trades || trades.length === 0) return;\r\n\r\n    const data = getData(timePeriod, trades);\r\n    const labels = getLabels(timePeriod);\r\n\r\n    updateChart(data, labels);\r\n  }, [trades, timePeriod]);\r\n\r\n  const calculateStartDate = (period) => {\r\n    const currentDate = new Date();\r\n    switch (period) {\r\n      case \"1D\":\r\n        return new Date(\r\n          currentDate.getFullYear(),\r\n          currentDate.getMonth(),\r\n          currentDate.getDate() - 1\r\n        );\r\n      case \"1W\":\r\n        return new Date(\r\n          currentDate.getFullYear(),\r\n          currentDate.getMonth(),\r\n          currentDate.getDate() - 7\r\n        );\r\n      case \"1M\":\r\n        return new Date(\r\n          currentDate.getFullYear(),\r\n          currentDate.getMonth() - 1,\r\n          currentDate.getDate()\r\n        );\r\n      case \"3M\":\r\n        return new Date(\r\n          currentDate.getFullYear(),\r\n          currentDate.getMonth() - 3,\r\n          currentDate.getDate()\r\n        );\r\n      case \"YTD\":\r\n        return new Date(currentDate.getFullYear(), 0, 1);\r\n      case \"1Y\":\r\n        return new Date(\r\n          currentDate.getFullYear() - 1,\r\n          currentDate.getMonth(),\r\n          currentDate.getDate()\r\n        );\r\n      default:\r\n        return currentDate;\r\n    }\r\n  };\r\n\r\n  const getLabels = (period) => {\r\n    switch (period) {\r\n      case \"1D\":\r\n        // Implement logic to return labels for 1 day\r\n        break;\r\n      case \"1W\":\r\n        // Implement logic to return labels for 1 week\r\n        break;\r\n      case \"1M\":\r\n        // Implement logic to return labels for 1 month\r\n        break;\r\n      case \"3M\":\r\n        // Implement logic to return labels for 3 months\r\n        break;\r\n      case \"YTD\":\r\n        // Implement logic to return labels for year-to-date\r\n        break;\r\n      case \"1Y\":\r\n        // Implement logic to return labels for 1 year\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  const getData = (period, trades) => {\r\n    switch (period) {\r\n      case \"1D\":\r\n        // Implement logic to return data for 1 day\r\n        break;\r\n      case \"1W\":\r\n        // Implement logic to return data for 1 week\r\n        break;\r\n      case \"1M\":\r\n        // Implement logic to return data for 1 month\r\n        break;\r\n      case \"3M\":\r\n        // Implement logic to return data for 3 months\r\n        break;\r\n      case \"YTD\":\r\n        // Implement logic to return data for year-to-date\r\n        break;\r\n      case \"1Y\":\r\n        // Implement logic to return data for 1 year\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  const updateChart = (data, labels) => {\r\n    if (!chartRef.current || !data || !labels || data.length !== labels.length)\r\n      return;\r\n\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    const myChart = new window.Chart(ctx, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            data: data,\r\n            borderColor: \"green\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: false,\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              display: false,\r\n            },\r\n            min: 0,\r\n            max: 1000,\r\n            position: \"center\",\r\n          },\r\n          y: {\r\n            display: false,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleTimePeriodChange = (period) => {\r\n    setTimePeriod(period);\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} />\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n      </div>\r\n      <div className=\"period-pl\">\r\n        <p>{`${timePeriod} P/L`}</p>\r\n        <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }); // Re-render the chart when the time period changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = (period) => {\r\n//     // Implement logic to return labels based on the selected time period\r\n//     // For example,\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = (period) => {\r\n//     // Implement logic to return data based on the selected time period\r\n//     // For example, if period is \"weeks\", return data for weeks\r\n//   };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"days\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"months\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//         >\r\n//           3M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//         >\r\n//           YTD\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//         >\r\n//           1Y\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"max\")}\r\n//         >\r\n//           MAX\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top profitable trades from API\r\n//     const fetchTopProfitableTrades = () => {\r\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTopProfitableTrades(data))\r\n//         .catch((error) =>\r\n//           console.error(\"Error fetching top profitable trades:\", error)\r\n//         );\r\n//     };\r\n\r\n//     fetchTopProfitableTrades();\r\n//   }, []); // Fetch data only once on component mount\r\n\r\n//   useEffect(() => {\r\n//     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"bar\", // Change chart type to \"bar\"\r\n//         data: {\r\n//           labels: topProfitableTrades.map((trade) => trade.trade_date), // Labels as trade dates\r\n//           datasets: [\r\n//             {\r\n//               label: \"Profit/Loss\",\r\n//               data: getData(), // Call getData function to get profit data\r\n//               backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Blue color with transparency\r\n//               borderColor: \"rgba(54, 162, 235, 1)\", // Solid blue border color\r\n//               borderWidth: 1, // Width of the border\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           scales: {\r\n//             y: {\r\n//               beginAtZero: true, // Start y-axis from zero\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Profit/Loss\", // Y-axis title\r\n//               },\r\n//             },\r\n//             x: {\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Trade Date\", // X-axis title\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\r\n\r\n//   // Function to get profit data from topProfitableTrades\r\n//   const getData = () => {\r\n//     return topProfitableTrades.map((trade) => parseFloat(trade.profit)); // Convert profit to float\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
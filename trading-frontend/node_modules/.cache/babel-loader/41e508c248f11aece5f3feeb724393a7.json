{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\InvestmentChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { getCash } from \"../api/CashApi\";\nimport { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nimport { calculateInitialCash, calculateNetPL, calculateCashBalance, calculateROI } from \"../cash/CashCalc\";\nconst InvestmentChart = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [investmentSummary, setInvestmentSummary] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    const fetchInvestmentData = async () => {\n      try {\n        const [dailyPnls, cashData] = await Promise.all([fetchDailyPnls(), getCash()]);\n        if (dailyPnls && cashData) {\n          const sortedData = dailyPnls.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          setTransactions(sortedData);\n          setChartData(formatChartData(sortedData, cashData));\n          setInvestmentSummary(calculateInvestmentSummary(sortedData, cashData));\n        } else {\n          setError(\"No daily PNL or cash data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInvestmentData();\n  }, []);\n  const calculateInvestmentSummary = (dailyPnls, cashData) => {\n    var _dailyPnls;\n    const initialCash = calculateInitialCash(cashData);\n    const netPL = calculateNetPL(dailyPnls);\n    const cashBalance = calculateCashBalance(initialCash, netPL, transactions);\n    const roi = calculateROI(initialCash, netPL);\n    const latestDate = formatDate(dailyPnls.length > 0 ? (_dailyPnls = dailyPnls[dailyPnls.length - 1]) === null || _dailyPnls === void 0 ? void 0 : _dailyPnls.entry_date : null);\n    return {\n      balance: cashBalance,\n      roi: roi,\n      latestDate: latestDate,\n      pnl: netPL\n    };\n  };\n  const formatChartData = (data, cashData) => {\n    const initialEntry = {\n      date: formatDate(cashData.entry_date),\n      closingBalance: parseFloat(cashData.initial_cash || 0)\n    };\n    const formattedData = data.map(entry => ({\n      date: formatDate(entry.entry_date),\n      closingBalance: parseFloat(entry.close_cash || 0)\n    }));\n    return [initialEntry, ...formattedData];\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-roi\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, investmentSummary ? `${formatCash(investmentSummary.pnl || 0)} (${investmentSummary.roi.toFixed(2)}%)` : \"Loading...\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, (investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.latestDate) || \"Loading...\")), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    style: {\n      background: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: false,\n    axisLine: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: false,\n    content: ({\n      payload\n    }) => {\n      if (payload && payload.length) {\n        const {\n          date,\n          closingBalance\n        } = payload[0].payload;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tooltip-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 23\n          }\n        }, formatCash(closingBalance)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"invest-date\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 23\n          }\n        }, date));\n      }\n      return null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"closingBalance\",\n    stroke: \"#4a90e2\",\n    strokeWidth: 2,\n    dot: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default InvestmentChart;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// // import { getCash } from \"../api/CashApi\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\n// // import { formatCash, formatDate } from \"../func/functions\";\n\n// // const InvestmentChart = () => {\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [chartData, setChartData] = useState([]);\n// //   const [investmentSummary, setInvestmentSummary] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchInvestmentData = async () => {\n// //       try {\n// //         const dailyPnls = await fetchDailyPnls();\n// //         const cashData = await getCash();\n// //         const transactions = await fetchTransactions();\n\n// //         console.log(\"Fetched DailyPNL data:\", dailyPnls);\n// //         console.log(\"Fetched Cash data:\", cashData);\n// //         console.log(\"Fetched Transactions data:\", transactions);\n\n// //         if (dailyPnls && cashData) {\n// //           const sortedData = dailyPnls.sort(\n// //             (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\n// //           );\n\n// //           // Log the last day's closing cash (which should be used as the next day's opening cash)\n// //           console.log(\n// //             \"Last day's closing cash:\",\n// //             sortedData[sortedData.length - 1]?.close_cash\n// //           );\n\n// //           setChartData(formatChartData(sortedData, cashData));\n// //           setInvestmentSummary(\n// //             calculateInvestmentSummary(sortedData, cashData, transactions)\n// //           );\n// //         } else {\n// //           setError(\"No daily PNL or cash data available\");\n// //         }\n// //       } catch (error) {\n// //         setError(\"Error fetching data\");\n// //         console.error(\"Error fetching daily PNL data:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchInvestmentData();\n// //   }, []);\n\n// //   const calculateInvestmentSummary = (data, cashData, transactions) => {\n// //     if (!data.length && !cashData) {\n// //       console.log(\"No data available for investment summary calculation\");\n// //       return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\n// //     }\n\n// //     const initialBalance = parseFloat(cashData.initial_cash || 0);\n// //     const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\n\n// //     console.log(\"Initial balance (without deposits):\", initialBalance);\n// //     console.log(\"Final balance (today's close cash):\", finalBalance);\n\n// //     // Calculate deposit and withdrawal adjustments\n// //     let depositAdjustment = 0;\n// //     let withdrawalAdjustment = 0;\n\n// //     transactions.forEach((transaction) => {\n// //       if (transaction.transaction_type === \"deposit\") {\n// //         depositAdjustment += parseFloat(transaction.amount);\n// //       } else if (transaction.transaction_type === \"withdrawal\") {\n// //         withdrawalAdjustment += parseFloat(transaction.amount);\n// //       }\n// //     });\n\n// //     console.log(\"Total deposits:\", depositAdjustment);\n// //     console.log(\"Total withdrawals:\", withdrawalAdjustment);\n\n// //     // Adjust the displayed balance by adding deposits and subtracting withdrawals\n// //     // const adjustedBalance =\n// //     //   finalBalance + depositAdjustment - withdrawalAdjustment;\n// //     const adjustedBalance = finalBalance;\n// //     const pnl = finalBalance - initialBalance; // PNL should be based only on trading activity\n\n// //     console.log(\"PNL (based on trading):\", pnl);\n// //     console.log(\n// //       \"Adjusted balance (including deposits/withdrawals):\",\n// //       adjustedBalance\n// //     );\n\n// //     const percentageChange = (pnl / initialBalance) * 100; // Reflect only trading performance\n\n// //     const latestDate = formatDate(data[data.length - 1]?.entry_date);\n\n// //     return {\n// //       balance: adjustedBalance, // For display purposes only\n// //       percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n// //       latestDate: latestDate,\n// //       pnl: pnl, // Keep PNL reflective of trading only\n// //     };\n// //   };\n\n// //   const formatChartData = (data, cashData) => {\n// //     const initialEntry = {\n// //       date: formatDate(cashData.entry_date),\n// //       closingBalance: parseFloat(cashData.initial_cash || 0),\n// //     };\n\n// //     const formattedData = data.map((entry) => ({\n// //       date: formatDate(entry.entry_date),\n// //       closingBalance: parseFloat(entry.close_cash || 0),\n// //     }));\n\n// //     return [initialEntry, ...formattedData];\n// //   };\n\n// //   return (\n// //     <div className=\"investment-chart-container\">\n// //       <div className=\"summary-section\">\n// //         <p className=\"investment-cash\">\n// //           {formatCash(investmentSummary?.balance || 0)}\n// //         </p>\n// //         <p className=\"investment-roi\">\n// //           {investmentSummary\n// //             ? `${formatCash(\n// //                 investmentSummary.pnl || 0\n// //               )} (${investmentSummary.percentageChange.toFixed(2)}%)`\n// //             : \"Loading...\"}\n// //         </p>\n// //         <p className=\"investment-date\">\n// //           {investmentSummary?.latestDate || \"Loading...\"}\n// //         </p>\n// //       </div>\n\n// //       {loading ? (\n// //         <div>Loading...</div>\n// //       ) : error ? (\n// //         <div>{error}</div>\n// //       ) : (\n// //         <ResponsiveContainer width=\"100%\" height={300}>\n// //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// //             <Tooltip\n// //               cursor={false}\n// //               content={({ payload }) => {\n// //                 if (payload && payload.length) {\n// //                   const { date, closingBalance } = payload[0].payload;\n// //                   return (\n// //                     <div className=\"tooltip-content\">\n// //                       <p>{formatCash(closingBalance)}</p>\n// //                       <p className=\"invest-date\">{date}</p>\n// //                     </div>\n// //                   );\n// //                 }\n// //                 return null;\n// //               }}\n// //             />\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"closingBalance\"\n// //               stroke=\"#4a90e2\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //             />\n// //           </LineChart>\n// //         </ResponsiveContainer>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default InvestmentChart;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// // import { getCash } from \"../api/CashApi\";\n// // import { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\n// // import { formatCash, formatDate } from \"../func/functions\";\n\n// // const InvestmentChart = () => {\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [chartData, setChartData] = useState([]);\n// //   const [investmentSummary, setInvestmentSummary] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchInvestmentData = async () => {\n// //       try {\n// //         const dailyPnls = await fetchDailyPnls();\n// //         const cashData = await getCash();\n// //         const transactions = await fetchTransactions(); // Fetch transactions to adjust balance\n\n// //         if (dailyPnls && cashData) {\n// //           const sortedData = dailyPnls.sort(\n// //             (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\n// //           );\n// //           setChartData(formatChartData(sortedData, cashData));\n// //           setInvestmentSummary(\n// //             calculateInvestmentSummary(sortedData, cashData, transactions) // Pass transactions to adjust the balance\n// //           );\n// //         } else {\n// //           setError(\"No daily PNL or cash data available\");\n// //         }\n// //       } catch (error) {\n// //         setError(\"Error fetching data\");\n// //         console.error(\"Error fetching daily PNL data:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchInvestmentData();\n// //   }, []);\n\n// //   // const calculateInvestmentSummary = (data, cashData, transactions) => {\n// //   //   if (!data.length && !cashData)\n// //   //     return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\n\n// //   //   const initialBalance = parseFloat(cashData.initial_cash || 0);\n// //   //   const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\n\n// //   //   // Calculate deposit and withdrawal adjustments\n// //   //   let depositAdjustment = 0;\n// //   //   let withdrawalAdjustment = 0;\n\n// //   //   transactions.forEach((transaction) => {\n// //   //     if (transaction.transaction_type === \"deposit\") {\n// //   //       depositAdjustment += parseFloat(transaction.amount);\n// //   //     } else if (transaction.transaction_type === \"withdrawal\") {\n// //   //       withdrawalAdjustment += parseFloat(transaction.amount);\n// //   //     }\n// //   //   });\n\n// //   //   // Adjust the displayed balance but keep PNL calculation clean\n// //   //   const adjustedBalance =\n// //   //     finalBalance + depositAdjustment - withdrawalAdjustment;\n\n// //   //   const pnl = finalBalance - initialBalance; // PNL should remain based on trading activity only\n// //   //   const percentageChange = (pnl / initialBalance) * 100; // Reflect only trading performance\n\n// //   //   const latestDate = formatDate(data[data.length - 1]?.entry_date);\n\n// //   //   return {\n// //   //     balance: adjustedBalance, // This is used for display purposes\n// //   //     percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n// //   //     latestDate: latestDate,\n// //   //     pnl: pnl, // Keep PNL clean and reflective of trading only\n// //   //   };\n// //   // };\n\n// //   // const calculateInvestmentSummary = (data, cashData, transactions) => {\n// //   //   if (!data.length && !cashData)\n// //   //     return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\n\n// //   //   const initialBalance = parseFloat(cashData.initial_cash || 0);\n// //   //   const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\n\n// //   //   // Calculate deposit and withdrawal adjustments\n// //   //   let depositAdjustment = 0;\n// //   //   let withdrawalAdjustment = 0;\n\n// //   //   transactions.forEach((transaction) => {\n// //   //     if (transaction.transaction_type === \"deposit\") {\n// //   //       depositAdjustment += parseFloat(transaction.amount);\n// //   //     } else if (transaction.transaction_type === \"withdrawal\") {\n// //   //       withdrawalAdjustment += parseFloat(transaction.amount);\n// //   //     }\n// //   //   });\n\n// //   //   // Adjust the final balance by the deposit/withdrawal amounts\n// //   //   const adjustedBalance =\n// //   //     finalBalance + depositAdjustment - withdrawalAdjustment;\n\n// //   //   const pnl = adjustedBalance - initialBalance;\n// //   //   const percentageChange =\n// //   //     ((adjustedBalance - initialBalance) / initialBalance) * 100;\n// //   //   const latestDate = formatDate(data[data.length - 1]?.entry_date);\n\n// //   //   return {\n// //   //     balance: adjustedBalance,\n// //   //     percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n// //   //     latestDate: latestDate,\n// //   //     pnl: pnl,\n// //   //   };\n// //   // };\n\n// //   const formatChartData = (data, cashData) => {\n// //     const initialEntry = {\n// //       date: formatDate(cashData.entry_date),\n// //       closingBalance: parseFloat(cashData.initial_cash || 0),\n// //     };\n\n// //     const formattedData = data.map((entry) => ({\n// //       date: formatDate(entry.entry_date),\n// //       closingBalance: parseFloat(entry.close_cash || 0),\n// //     }));\n\n// //     return [initialEntry, ...formattedData];\n// //   };\n\n// //   return (\n// //     <div className=\"investment-chart-container\">\n// //       <div className=\"summary-section\">\n// //         <p className=\"investment-cash\">\n// //           {formatCash(investmentSummary?.balance || 0)}\n// //         </p>\n// //         <p className=\"investment-roi\">\n// //           {investmentSummary\n// //             ? `${formatCash(\n// //                 investmentSummary.pnl || 0\n// //               )} (${investmentSummary.percentageChange.toFixed(2)}%)`\n// //             : \"Loading...\"}\n// //         </p>\n// //         <p className=\"investment-date\">\n// //           {investmentSummary?.latestDate || \"Loading...\"}\n// //         </p>\n// //       </div>\n\n// //       {loading ? (\n// //         <div>Loading...</div>\n// //       ) : error ? (\n// //         <div>{error}</div>\n// //       ) : (\n// //         <ResponsiveContainer width=\"100%\" height={300}>\n// //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// //             <Tooltip\n// //               cursor={false}\n// //               content={({ payload }) => {\n// //                 if (payload && payload.length) {\n// //                   const { date, closingBalance } = payload[0].payload;\n// //                   return (\n// //                     <div className=\"tooltip-content\">\n// //                       <p>{formatCash(closingBalance)}</p>\n// //                       <p className=\"invest-date\">{date}</p>\n// //                     </div>\n// //                   );\n// //                 }\n// //                 return null;\n// //               }}\n// //             />\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"closingBalance\"\n// //               stroke=\"#4a90e2\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //             />\n// //           </LineChart>\n// //         </ResponsiveContainer>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default InvestmentChart;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { getCash } from \"../api/CashApi\";\n// import { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const InvestmentChart = () => {\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [chartData, setChartData] = useState([]);\n//   const [investmentSummary, setInvestmentSummary] = useState(null);\n\n//   useEffect(() => {\n//     const fetchInvestmentData = async () => {\n//       try {\n//         const dailyPnls = await fetchDailyPnls();\n//         const cashData = await getCash();\n\n//         if (dailyPnls && cashData) {\n//           const sortedData = dailyPnls.sort(\n//             (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\n//           );\n//           setChartData(formatChartData(sortedData, cashData));\n//           setInvestmentSummary(\n//             calculateInvestmentSummary(sortedData, cashData)\n//           );\n//         } else {\n//           setError(\"No daily PNL or cash data available\");\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching data\");\n//         console.error(\"Error fetching daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchInvestmentData();\n//   }, []);\n\n//   const calculateInvestmentSummary = (data, cashData) => {\n//     if (!data.length && !cashData)\n//       return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\n\n//     const initialBalance = parseFloat(cashData.initial_cash || 0);\n//     const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\n//     const pnl = finalBalance - initialBalance;\n//     const percentageChange =\n//       ((finalBalance - initialBalance) / initialBalance) * 100;\n//     const latestDate = formatDate(data[data.length - 1]?.entry_date);\n\n//     return {\n//       balance: finalBalance,\n//       percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n//       latestDate: latestDate,\n//       pnl: pnl,\n//     };\n//   };\n\n//   const formatChartData = (data, cashData) => {\n//     const initialEntry = {\n//       date: formatDate(cashData.entry_date),\n//       closingBalance: parseFloat(cashData.initial_cash || 0),\n//     };\n\n//     const formattedData = data.map((entry) => ({\n//       date: formatDate(entry.entry_date),\n//       closingBalance: parseFloat(entry.close_cash || 0),\n//     }));\n\n//     return [initialEntry, ...formattedData];\n//   };\n\n//   return (\n//     <div className=\"investment-chart-container\">\n//       <div className=\"summary-section\">\n//         <p className=\"investment-cash\">\n//           {formatCash(investmentSummary?.balance || 0)}\n//         </p>\n//         <p className=\"investment-roi\">\n//           {investmentSummary\n//             ? `${formatCash(\n//                 investmentSummary.pnl || 0\n//               )} (${investmentSummary.percentageChange.toFixed(2)}%)`\n//             : \"Loading...\"}\n//         </p>\n//         <p className=\"investment-date\">\n//           {investmentSummary?.latestDate || \"Loading...\"}\n//         </p>\n//       </div>\n\n//       {loading ? (\n//         <div>Loading...</div>\n//       ) : error ? (\n//         <div>{error}</div>\n//       ) : (\n//         <ResponsiveContainer width=\"100%\" height={300}>\n//           <LineChart data={chartData} style={{ background: \"transparent\" }}>\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { date, closingBalance } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{formatCash(closingBalance)}</p>\n//                       <p className=\"invest-date\">{date}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"closingBalance\"\n//               stroke=\"#4a90e2\"\n//               strokeWidth={2}\n//               dot={false}\n//             />\n//           </LineChart>\n//         </ResponsiveContainer>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default InvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","getCash","LineChart","Line","XAxis","Tooltip","ResponsiveContainer","formatCash","formatDate","calculateInitialCash","calculateNetPL","calculateCashBalance","calculateROI","InvestmentChart","loading","setLoading","error","setError","chartData","setChartData","investmentSummary","setInvestmentSummary","transactions","setTransactions","fetchInvestmentData","dailyPnls","cashData","Promise","all","sortedData","sort","a","b","Date","entry_date","formatChartData","calculateInvestmentSummary","console","_dailyPnls","initialCash","netPL","cashBalance","roi","latestDate","length","balance","pnl","data","initialEntry","date","closingBalance","parseFloat","initial_cash","formattedData","map","entry","close_cash","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","width","height","style","background","dataKey","tick","axisLine","cursor","content","payload","type","stroke","strokeWidth","dot"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/InvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { getCash } from \"../api/CashApi\";\r\nimport { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\nimport {\r\n  calculateInitialCash,\r\n  calculateNetPL,\r\n  calculateCashBalance,\r\n  calculateROI,\r\n} from \"../cash/CashCalc\";\r\n\r\nconst InvestmentChart = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [investmentSummary, setInvestmentSummary] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchInvestmentData = async () => {\r\n      try {\r\n        const [dailyPnls, cashData] = await Promise.all([\r\n          fetchDailyPnls(),\r\n          getCash(),\r\n        ]);\r\n\r\n        if (dailyPnls && cashData) {\r\n          const sortedData = dailyPnls.sort(\r\n            (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n          );\r\n\r\n          setTransactions(sortedData);\r\n\r\n          setChartData(formatChartData(sortedData, cashData));\r\n          setInvestmentSummary(\r\n            calculateInvestmentSummary(sortedData, cashData)\r\n          );\r\n        } else {\r\n          setError(\"No daily PNL or cash data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInvestmentData();\r\n  }, []);\r\n\r\n  const calculateInvestmentSummary = (dailyPnls, cashData) => {\r\n    const initialCash = calculateInitialCash(cashData);\r\n    const netPL = calculateNetPL(dailyPnls);\r\n    const cashBalance = calculateCashBalance(initialCash, netPL, transactions);\r\n    const roi = calculateROI(initialCash, netPL);\r\n\r\n    const latestDate = formatDate(\r\n      dailyPnls.length > 0 ? dailyPnls[dailyPnls.length - 1]?.entry_date : null\r\n    );\r\n\r\n    return {\r\n      balance: cashBalance,\r\n      roi: roi,\r\n      latestDate: latestDate,\r\n      pnl: netPL,\r\n    };\r\n  };\r\n\r\n  const formatChartData = (data, cashData) => {\r\n    const initialEntry = {\r\n      date: formatDate(cashData.entry_date),\r\n      closingBalance: parseFloat(cashData.initial_cash || 0),\r\n    };\r\n\r\n    const formattedData = data.map((entry) => ({\r\n      date: formatDate(entry.entry_date),\r\n      closingBalance: parseFloat(entry.close_cash || 0),\r\n    }));\r\n\r\n    return [initialEntry, ...formattedData];\r\n  };\r\n\r\n  return (\r\n    <div className=\"investment-chart-container\">\r\n      <div className=\"summary-section\">\r\n        <p className=\"investment-cash\">\r\n          {formatCash(investmentSummary?.balance || 0)}\r\n        </p>\r\n        <p className=\"investment-roi\">\r\n          {investmentSummary\r\n            ? `${formatCash(\r\n                investmentSummary.pnl || 0\r\n              )} (${investmentSummary.roi.toFixed(2)}%)`\r\n            : \"Loading...\"}\r\n        </p>\r\n        <p className=\"investment-date\">\r\n          {investmentSummary?.latestDate || \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n            <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n            <Tooltip\r\n              cursor={false}\r\n              content={({ payload }) => {\r\n                if (payload && payload.length) {\r\n                  const { date, closingBalance } = payload[0].payload;\r\n                  return (\r\n                    <div className=\"tooltip-content\">\r\n                      <p>{formatCash(closingBalance)}</p>\r\n                      <p className=\"invest-date\">{date}</p>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"closingBalance\"\r\n              stroke=\"#4a90e2\"\r\n              strokeWidth={2}\r\n              dot={false}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentChart;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// // import { getCash } from \"../api/CashApi\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // const InvestmentChart = () => {\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [chartData, setChartData] = useState([]);\r\n// //   const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchInvestmentData = async () => {\r\n// //       try {\r\n// //         const dailyPnls = await fetchDailyPnls();\r\n// //         const cashData = await getCash();\r\n// //         const transactions = await fetchTransactions();\r\n\r\n// //         console.log(\"Fetched DailyPNL data:\", dailyPnls);\r\n// //         console.log(\"Fetched Cash data:\", cashData);\r\n// //         console.log(\"Fetched Transactions data:\", transactions);\r\n\r\n// //         if (dailyPnls && cashData) {\r\n// //           const sortedData = dailyPnls.sort(\r\n// //             (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n// //           );\r\n\r\n// //           // Log the last day's closing cash (which should be used as the next day's opening cash)\r\n// //           console.log(\r\n// //             \"Last day's closing cash:\",\r\n// //             sortedData[sortedData.length - 1]?.close_cash\r\n// //           );\r\n\r\n// //           setChartData(formatChartData(sortedData, cashData));\r\n// //           setInvestmentSummary(\r\n// //             calculateInvestmentSummary(sortedData, cashData, transactions)\r\n// //           );\r\n// //         } else {\r\n// //           setError(\"No daily PNL or cash data available\");\r\n// //         }\r\n// //       } catch (error) {\r\n// //         setError(\"Error fetching data\");\r\n// //         console.error(\"Error fetching daily PNL data:\", error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchInvestmentData();\r\n// //   }, []);\r\n\r\n// //   const calculateInvestmentSummary = (data, cashData, transactions) => {\r\n// //     if (!data.length && !cashData) {\r\n// //       console.log(\"No data available for investment summary calculation\");\r\n// //       return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\r\n// //     }\r\n\r\n// //     const initialBalance = parseFloat(cashData.initial_cash || 0);\r\n// //     const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n\r\n// //     console.log(\"Initial balance (without deposits):\", initialBalance);\r\n// //     console.log(\"Final balance (today's close cash):\", finalBalance);\r\n\r\n// //     // Calculate deposit and withdrawal adjustments\r\n// //     let depositAdjustment = 0;\r\n// //     let withdrawalAdjustment = 0;\r\n\r\n// //     transactions.forEach((transaction) => {\r\n// //       if (transaction.transaction_type === \"deposit\") {\r\n// //         depositAdjustment += parseFloat(transaction.amount);\r\n// //       } else if (transaction.transaction_type === \"withdrawal\") {\r\n// //         withdrawalAdjustment += parseFloat(transaction.amount);\r\n// //       }\r\n// //     });\r\n\r\n// //     console.log(\"Total deposits:\", depositAdjustment);\r\n// //     console.log(\"Total withdrawals:\", withdrawalAdjustment);\r\n\r\n// //     // Adjust the displayed balance by adding deposits and subtracting withdrawals\r\n// //     // const adjustedBalance =\r\n// //     //   finalBalance + depositAdjustment - withdrawalAdjustment;\r\n// //     const adjustedBalance = finalBalance;\r\n// //     const pnl = finalBalance - initialBalance; // PNL should be based only on trading activity\r\n\r\n// //     console.log(\"PNL (based on trading):\", pnl);\r\n// //     console.log(\r\n// //       \"Adjusted balance (including deposits/withdrawals):\",\r\n// //       adjustedBalance\r\n// //     );\r\n\r\n// //     const percentageChange = (pnl / initialBalance) * 100; // Reflect only trading performance\r\n\r\n// //     const latestDate = formatDate(data[data.length - 1]?.entry_date);\r\n\r\n// //     return {\r\n// //       balance: adjustedBalance, // For display purposes only\r\n// //       percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n// //       latestDate: latestDate,\r\n// //       pnl: pnl, // Keep PNL reflective of trading only\r\n// //     };\r\n// //   };\r\n\r\n// //   const formatChartData = (data, cashData) => {\r\n// //     const initialEntry = {\r\n// //       date: formatDate(cashData.entry_date),\r\n// //       closingBalance: parseFloat(cashData.initial_cash || 0),\r\n// //     };\r\n\r\n// //     const formattedData = data.map((entry) => ({\r\n// //       date: formatDate(entry.entry_date),\r\n// //       closingBalance: parseFloat(entry.close_cash || 0),\r\n// //     }));\r\n\r\n// //     return [initialEntry, ...formattedData];\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"investment-chart-container\">\r\n// //       <div className=\"summary-section\">\r\n// //         <p className=\"investment-cash\">\r\n// //           {formatCash(investmentSummary?.balance || 0)}\r\n// //         </p>\r\n// //         <p className=\"investment-roi\">\r\n// //           {investmentSummary\r\n// //             ? `${formatCash(\r\n// //                 investmentSummary.pnl || 0\r\n// //               )} (${investmentSummary.percentageChange.toFixed(2)}%)`\r\n// //             : \"Loading...\"}\r\n// //         </p>\r\n// //         <p className=\"investment-date\">\r\n// //           {investmentSummary?.latestDate || \"Loading...\"}\r\n// //         </p>\r\n// //       </div>\r\n\r\n// //       {loading ? (\r\n// //         <div>Loading...</div>\r\n// //       ) : error ? (\r\n// //         <div>{error}</div>\r\n// //       ) : (\r\n// //         <ResponsiveContainer width=\"100%\" height={300}>\r\n// //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// //             <Tooltip\r\n// //               cursor={false}\r\n// //               content={({ payload }) => {\r\n// //                 if (payload && payload.length) {\r\n// //                   const { date, closingBalance } = payload[0].payload;\r\n// //                   return (\r\n// //                     <div className=\"tooltip-content\">\r\n// //                       <p>{formatCash(closingBalance)}</p>\r\n// //                       <p className=\"invest-date\">{date}</p>\r\n// //                     </div>\r\n// //                   );\r\n// //                 }\r\n// //                 return null;\r\n// //               }}\r\n// //             />\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"closingBalance\"\r\n// //               stroke=\"#4a90e2\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //             />\r\n// //           </LineChart>\r\n// //         </ResponsiveContainer>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default InvestmentChart;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// // import { getCash } from \"../api/CashApi\";\r\n// // import { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // const InvestmentChart = () => {\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [chartData, setChartData] = useState([]);\r\n// //   const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchInvestmentData = async () => {\r\n// //       try {\r\n// //         const dailyPnls = await fetchDailyPnls();\r\n// //         const cashData = await getCash();\r\n// //         const transactions = await fetchTransactions(); // Fetch transactions to adjust balance\r\n\r\n// //         if (dailyPnls && cashData) {\r\n// //           const sortedData = dailyPnls.sort(\r\n// //             (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n// //           );\r\n// //           setChartData(formatChartData(sortedData, cashData));\r\n// //           setInvestmentSummary(\r\n// //             calculateInvestmentSummary(sortedData, cashData, transactions) // Pass transactions to adjust the balance\r\n// //           );\r\n// //         } else {\r\n// //           setError(\"No daily PNL or cash data available\");\r\n// //         }\r\n// //       } catch (error) {\r\n// //         setError(\"Error fetching data\");\r\n// //         console.error(\"Error fetching daily PNL data:\", error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchInvestmentData();\r\n// //   }, []);\r\n\r\n// //   // const calculateInvestmentSummary = (data, cashData, transactions) => {\r\n// //   //   if (!data.length && !cashData)\r\n// //   //     return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\r\n\r\n// //   //   const initialBalance = parseFloat(cashData.initial_cash || 0);\r\n// //   //   const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n\r\n// //   //   // Calculate deposit and withdrawal adjustments\r\n// //   //   let depositAdjustment = 0;\r\n// //   //   let withdrawalAdjustment = 0;\r\n\r\n// //   //   transactions.forEach((transaction) => {\r\n// //   //     if (transaction.transaction_type === \"deposit\") {\r\n// //   //       depositAdjustment += parseFloat(transaction.amount);\r\n// //   //     } else if (transaction.transaction_type === \"withdrawal\") {\r\n// //   //       withdrawalAdjustment += parseFloat(transaction.amount);\r\n// //   //     }\r\n// //   //   });\r\n\r\n// //   //   // Adjust the displayed balance but keep PNL calculation clean\r\n// //   //   const adjustedBalance =\r\n// //   //     finalBalance + depositAdjustment - withdrawalAdjustment;\r\n\r\n// //   //   const pnl = finalBalance - initialBalance; // PNL should remain based on trading activity only\r\n// //   //   const percentageChange = (pnl / initialBalance) * 100; // Reflect only trading performance\r\n\r\n// //   //   const latestDate = formatDate(data[data.length - 1]?.entry_date);\r\n\r\n// //   //   return {\r\n// //   //     balance: adjustedBalance, // This is used for display purposes\r\n// //   //     percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n// //   //     latestDate: latestDate,\r\n// //   //     pnl: pnl, // Keep PNL clean and reflective of trading only\r\n// //   //   };\r\n// //   // };\r\n\r\n// //   // const calculateInvestmentSummary = (data, cashData, transactions) => {\r\n// //   //   if (!data.length && !cashData)\r\n// //   //     return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\r\n\r\n// //   //   const initialBalance = parseFloat(cashData.initial_cash || 0);\r\n// //   //   const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n\r\n// //   //   // Calculate deposit and withdrawal adjustments\r\n// //   //   let depositAdjustment = 0;\r\n// //   //   let withdrawalAdjustment = 0;\r\n\r\n// //   //   transactions.forEach((transaction) => {\r\n// //   //     if (transaction.transaction_type === \"deposit\") {\r\n// //   //       depositAdjustment += parseFloat(transaction.amount);\r\n// //   //     } else if (transaction.transaction_type === \"withdrawal\") {\r\n// //   //       withdrawalAdjustment += parseFloat(transaction.amount);\r\n// //   //     }\r\n// //   //   });\r\n\r\n// //   //   // Adjust the final balance by the deposit/withdrawal amounts\r\n// //   //   const adjustedBalance =\r\n// //   //     finalBalance + depositAdjustment - withdrawalAdjustment;\r\n\r\n// //   //   const pnl = adjustedBalance - initialBalance;\r\n// //   //   const percentageChange =\r\n// //   //     ((adjustedBalance - initialBalance) / initialBalance) * 100;\r\n// //   //   const latestDate = formatDate(data[data.length - 1]?.entry_date);\r\n\r\n// //   //   return {\r\n// //   //     balance: adjustedBalance,\r\n// //   //     percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n// //   //     latestDate: latestDate,\r\n// //   //     pnl: pnl,\r\n// //   //   };\r\n// //   // };\r\n\r\n// //   const formatChartData = (data, cashData) => {\r\n// //     const initialEntry = {\r\n// //       date: formatDate(cashData.entry_date),\r\n// //       closingBalance: parseFloat(cashData.initial_cash || 0),\r\n// //     };\r\n\r\n// //     const formattedData = data.map((entry) => ({\r\n// //       date: formatDate(entry.entry_date),\r\n// //       closingBalance: parseFloat(entry.close_cash || 0),\r\n// //     }));\r\n\r\n// //     return [initialEntry, ...formattedData];\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"investment-chart-container\">\r\n// //       <div className=\"summary-section\">\r\n// //         <p className=\"investment-cash\">\r\n// //           {formatCash(investmentSummary?.balance || 0)}\r\n// //         </p>\r\n// //         <p className=\"investment-roi\">\r\n// //           {investmentSummary\r\n// //             ? `${formatCash(\r\n// //                 investmentSummary.pnl || 0\r\n// //               )} (${investmentSummary.percentageChange.toFixed(2)}%)`\r\n// //             : \"Loading...\"}\r\n// //         </p>\r\n// //         <p className=\"investment-date\">\r\n// //           {investmentSummary?.latestDate || \"Loading...\"}\r\n// //         </p>\r\n// //       </div>\r\n\r\n// //       {loading ? (\r\n// //         <div>Loading...</div>\r\n// //       ) : error ? (\r\n// //         <div>{error}</div>\r\n// //       ) : (\r\n// //         <ResponsiveContainer width=\"100%\" height={300}>\r\n// //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// //             <Tooltip\r\n// //               cursor={false}\r\n// //               content={({ payload }) => {\r\n// //                 if (payload && payload.length) {\r\n// //                   const { date, closingBalance } = payload[0].payload;\r\n// //                   return (\r\n// //                     <div className=\"tooltip-content\">\r\n// //                       <p>{formatCash(closingBalance)}</p>\r\n// //                       <p className=\"invest-date\">{date}</p>\r\n// //                     </div>\r\n// //                   );\r\n// //                 }\r\n// //                 return null;\r\n// //               }}\r\n// //             />\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"closingBalance\"\r\n// //               stroke=\"#4a90e2\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //             />\r\n// //           </LineChart>\r\n// //         </ResponsiveContainer>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default InvestmentChart;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { getCash } from \"../api/CashApi\";\r\n// import { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const InvestmentChart = () => {\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [chartData, setChartData] = useState([]);\r\n//   const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchInvestmentData = async () => {\r\n//       try {\r\n//         const dailyPnls = await fetchDailyPnls();\r\n//         const cashData = await getCash();\r\n\r\n//         if (dailyPnls && cashData) {\r\n//           const sortedData = dailyPnls.sort(\r\n//             (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n//           );\r\n//           setChartData(formatChartData(sortedData, cashData));\r\n//           setInvestmentSummary(\r\n//             calculateInvestmentSummary(sortedData, cashData)\r\n//           );\r\n//         } else {\r\n//           setError(\"No daily PNL or cash data available\");\r\n//         }\r\n//       } catch (error) {\r\n//         setError(\"Error fetching data\");\r\n//         console.error(\"Error fetching daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchInvestmentData();\r\n//   }, []);\r\n\r\n//   const calculateInvestmentSummary = (data, cashData) => {\r\n//     if (!data.length && !cashData)\r\n//       return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\r\n\r\n//     const initialBalance = parseFloat(cashData.initial_cash || 0);\r\n//     const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n//     const pnl = finalBalance - initialBalance;\r\n//     const percentageChange =\r\n//       ((finalBalance - initialBalance) / initialBalance) * 100;\r\n//     const latestDate = formatDate(data[data.length - 1]?.entry_date);\r\n\r\n//     return {\r\n//       balance: finalBalance,\r\n//       percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n//       latestDate: latestDate,\r\n//       pnl: pnl,\r\n//     };\r\n//   };\r\n\r\n//   const formatChartData = (data, cashData) => {\r\n//     const initialEntry = {\r\n//       date: formatDate(cashData.entry_date),\r\n//       closingBalance: parseFloat(cashData.initial_cash || 0),\r\n//     };\r\n\r\n//     const formattedData = data.map((entry) => ({\r\n//       date: formatDate(entry.entry_date),\r\n//       closingBalance: parseFloat(entry.close_cash || 0),\r\n//     }));\r\n\r\n//     return [initialEntry, ...formattedData];\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"investment-chart-container\">\r\n//       <div className=\"summary-section\">\r\n//         <p className=\"investment-cash\">\r\n//           {formatCash(investmentSummary?.balance || 0)}\r\n//         </p>\r\n//         <p className=\"investment-roi\">\r\n//           {investmentSummary\r\n//             ? `${formatCash(\r\n//                 investmentSummary.pnl || 0\r\n//               )} (${investmentSummary.percentageChange.toFixed(2)}%)`\r\n//             : \"Loading...\"}\r\n//         </p>\r\n//         <p className=\"investment-date\">\r\n//           {investmentSummary?.latestDate || \"Loading...\"}\r\n//         </p>\r\n//       </div>\r\n\r\n//       {loading ? (\r\n//         <div>Loading...</div>\r\n//       ) : error ? (\r\n//         <div>{error}</div>\r\n//       ) : (\r\n//         <ResponsiveContainer width=\"100%\" height={300}>\r\n//           <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { date, closingBalance } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{formatCash(closingBalance)}</p>\r\n//                       <p className=\"invest-date\">{date}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"closingBalance\"\r\n//               stroke=\"#4a90e2\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//             />\r\n//           </LineChart>\r\n//         </ResponsiveContainer>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default InvestmentChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAEC,mBAAmB,QAAQ,UAAU;AAC/E,SAASC,UAAU,EAAEC,UAAU,QAAQ,mBAAmB;AAC1D,SACEC,oBAAoB,EACpBC,cAAc,EACdC,oBAAoB,EACpBC,YAAY,QACP,kBAAkB;AAEzB,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMyB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC9C5B,cAAc,CAAC,CAAC,EAChBC,OAAO,CAAC,CAAC,CACV,CAAC;QAEF,IAAIwB,SAAS,IAAIC,QAAQ,EAAE;UACzB,MAAMG,UAAU,GAAGJ,SAAS,CAACK,IAAI,CAC/B,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,UAAU,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,UAAU,CAC1D,CAAC;UAEDX,eAAe,CAACM,UAAU,CAAC;UAE3BV,YAAY,CAACgB,eAAe,CAACN,UAAU,EAAEH,QAAQ,CAAC,CAAC;UACnDL,oBAAoB,CAClBe,0BAA0B,CAACP,UAAU,EAAEH,QAAQ,CACjD,CAAC;QACH,CAAC,MAAM;UACLT,QAAQ,CAAC,qCAAqC,CAAC;QACjD;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,qBAAqB,CAAC;QAC/BoB,OAAO,CAACrB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD,CAAC,SAAS;QACRD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDS,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,0BAA0B,GAAGA,CAACX,SAAS,EAAEC,QAAQ,KAAK;IAAA,IAAAY,UAAA;IAC1D,MAAMC,WAAW,GAAG9B,oBAAoB,CAACiB,QAAQ,CAAC;IAClD,MAAMc,KAAK,GAAG9B,cAAc,CAACe,SAAS,CAAC;IACvC,MAAMgB,WAAW,GAAG9B,oBAAoB,CAAC4B,WAAW,EAAEC,KAAK,EAAElB,YAAY,CAAC;IAC1E,MAAMoB,GAAG,GAAG9B,YAAY,CAAC2B,WAAW,EAAEC,KAAK,CAAC;IAE5C,MAAMG,UAAU,GAAGnC,UAAU,CAC3BiB,SAAS,CAACmB,MAAM,GAAG,CAAC,IAAAN,UAAA,GAAGb,SAAS,CAACA,SAAS,CAACmB,MAAM,GAAG,CAAC,CAAC,cAAAN,UAAA,uBAA/BA,UAAA,CAAiCJ,UAAU,GAAG,IACvE,CAAC;IAED,OAAO;MACLW,OAAO,EAAEJ,WAAW;MACpBC,GAAG,EAAEA,GAAG;MACRC,UAAU,EAAEA,UAAU;MACtBG,GAAG,EAAEN;IACP,CAAC;EACH,CAAC;EAED,MAAML,eAAe,GAAGA,CAACY,IAAI,EAAErB,QAAQ,KAAK;IAC1C,MAAMsB,YAAY,GAAG;MACnBC,IAAI,EAAEzC,UAAU,CAACkB,QAAQ,CAACQ,UAAU,CAAC;MACrCgB,cAAc,EAAEC,UAAU,CAACzB,QAAQ,CAAC0B,YAAY,IAAI,CAAC;IACvD,CAAC;IAED,MAAMC,aAAa,GAAGN,IAAI,CAACO,GAAG,CAAEC,KAAK,KAAM;MACzCN,IAAI,EAAEzC,UAAU,CAAC+C,KAAK,CAACrB,UAAU,CAAC;MAClCgB,cAAc,EAAEC,UAAU,CAACI,KAAK,CAACC,UAAU,IAAI,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,OAAO,CAACR,YAAY,EAAE,GAAGK,aAAa,CAAC;EACzC,CAAC;EAED,oBACExD,KAAA,CAAA4D,aAAA;IAAKC,SAAS,EAAC,4BAA4B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACzCnE,KAAA,CAAA4D,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BnE,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3BzD,UAAU,CAAC,CAAAa,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEyB,OAAO,KAAI,CAAC,CAC1C,CAAC,eACJhD,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,gBAAgB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1B5C,iBAAiB,GACb,GAAEb,UAAU,CACXa,iBAAiB,CAAC0B,GAAG,IAAI,CAC3B,CAAE,KAAI1B,iBAAiB,CAACsB,GAAG,CAACuB,OAAO,CAAC,CAAC,CAAE,IAAG,GAC1C,YACH,CAAC,eACJpE,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3B,CAAA5C,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEuB,UAAU,KAAI,YACjC,CACA,CAAC,EAEL7B,OAAO,gBACNjB,KAAA,CAAA4D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,YAAe,CAAC,GACnBhD,KAAK,gBACPnB,KAAA,CAAA4D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAMhD,KAAW,CAAC,gBAElBnB,KAAA,CAAA4D,aAAA,CAACnD,mBAAmB;IAAC4D,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5CnE,KAAA,CAAA4D,aAAA,CAACvD,SAAS;IAAC6C,IAAI,EAAE7B,SAAU;IAACkD,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAc,CAAE;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/DnE,KAAA,CAAA4D,aAAA,CAACrD,KAAK;IAACkE,OAAO,EAAC,MAAM;IAACC,IAAI,EAAE,KAAM;IAACC,QAAQ,EAAE,KAAM;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACtDnE,KAAA,CAAA4D,aAAA,CAACpD,OAAO;IACNoE,MAAM,EAAE,KAAM;IACdC,OAAO,EAAEA,CAAC;MAAEC;IAAQ,CAAC,KAAK;MACxB,IAAIA,OAAO,IAAIA,OAAO,CAAC/B,MAAM,EAAE;QAC7B,MAAM;UAAEK,IAAI;UAAEC;QAAe,CAAC,GAAGyB,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO;QACnD,oBACE9E,KAAA,CAAA4D,aAAA;UAAKC,SAAS,EAAC,iBAAiB;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBAC9BnE,KAAA,CAAA4D,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAIzD,UAAU,CAAC2C,cAAc,CAAK,CAAC,eACnCrD,KAAA,CAAA4D,aAAA;UAAGC,SAAS,EAAC,aAAa;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAEf,IAAQ,CACjC,CAAC;MAEV;MACA,OAAO,IAAI;IACb,CAAE;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CAAC,eACFnE,KAAA,CAAA4D,aAAA,CAACtD,IAAI;IACHyE,IAAI,EAAC,UAAU;IACfN,OAAO,EAAC,gBAAgB;IACxBO,MAAM,EAAC,SAAS;IAChBC,WAAW,EAAE,CAAE;IACfC,GAAG,EAAE,KAAM;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACZ,CACQ,CACQ,CAEpB,CAAC;AAEV,CAAC;AAED,eAAenD,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}
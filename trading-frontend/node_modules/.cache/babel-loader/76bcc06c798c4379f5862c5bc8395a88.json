{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000\"; // Ensure this is the correct URL for your API\n\n// Retrieve userId from localStorage\nconst getUserId = () => {\n  const userDataString = localStorage.getItem(\"user_data\");\n  if (!userDataString) {\n    console.error(\"No user data found in localStorage\");\n    return null;\n  }\n  try {\n    const userData = JSON.parse(userDataString);\n    return userData.sub;\n  } catch (error) {\n    console.error(\"Error parsing user data:\", error);\n    return null;\n  }\n};\n\n// Retrieve the userId\nconst userId = getUserId();\n\n// Fetch all transactions for a specific user\nexport const fetchTransactions = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/transactions?user_id=${userId}`);\n    if (!response.ok) throw new Error(\"Error fetching transactions\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Transactions Error:\", error);\n    throw error;\n  }\n};\n\n// Create a new transaction for a specific user\nexport const createTransaction = async transactionData => {\n  const response = await fetch(`${API_BASE_URL}/transactions?user_id=${userId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      ...transactionData,\n      user_id: userId\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || \"Error creating transaction\");\n  }\n  return await response.json();\n};\n\n// Update an existing transaction for a specific user\nexport const updateTransaction = async (transactionId, transactionData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/transactions/${transactionId}?user_id=${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(transactionData)\n    });\n    if (!response.ok) throw new Error(\"Error updating transaction\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update Transaction Error:\", error);\n    throw error;\n  }\n};\n\n// Delete a transaction for a specific user\nexport const deleteTransaction = async transactionId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/transactions/${transactionId}?user_id=${userId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Error deleting transaction\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete Transaction Error:\", error);\n    throw error;\n  }\n};\n\n// Fetch a single transaction by ID for a specific user\nexport const fetchTransactionById = async transactionId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/transactions/${transactionId}?user_id=${userId}`);\n    if (!response.ok) throw new Error(\"Transaction not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Transaction Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getUserId","userDataString","localStorage","getItem","console","error","userData","JSON","parse","sub","userId","fetchTransactions","response","fetch","ok","Error","json","createTransaction","transactionData","method","headers","body","stringify","user_id","errorData","detail","updateTransaction","transactionId","deleteTransaction","fetchTransactionById"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/TransactionsAPI.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000\"; // Ensure this is the correct URL for your API\r\n\r\n// Retrieve userId from localStorage\r\nconst getUserId = () => {\r\n  const userDataString = localStorage.getItem(\"user_data\");\r\n  if (!userDataString) {\r\n    console.error(\"No user data found in localStorage\");\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const userData = JSON.parse(userDataString);\r\n    return userData.sub;\r\n  } catch (error) {\r\n    console.error(\"Error parsing user data:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Retrieve the userId\r\nconst userId = getUserId();\r\n\r\n// Fetch all transactions for a specific user\r\nexport const fetchTransactions = async () => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/transactions?user_id=${userId}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Error fetching transactions\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Transactions Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new transaction for a specific user\r\nexport const createTransaction = async (transactionData) => {\r\n  const response = await fetch(\r\n    `${API_BASE_URL}/transactions?user_id=${userId}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ ...transactionData, user_id: userId }),\r\n    }\r\n  );\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || \"Error creating transaction\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\n// Update an existing transaction for a specific user\r\nexport const updateTransaction = async (transactionId, transactionData) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/transactions/${transactionId}?user_id=${userId}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(transactionData),\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error updating transaction\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update Transaction Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a transaction for a specific user\r\nexport const deleteTransaction = async (transactionId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/transactions/${transactionId}?user_id=${userId}`,\r\n      {\r\n        method: \"DELETE\",\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error deleting transaction\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete Transaction Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a single transaction by ID for a specific user\r\nexport const fetchTransactionById = async (transactionId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/transactions/${transactionId}?user_id=${userId}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Transaction not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Transaction Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
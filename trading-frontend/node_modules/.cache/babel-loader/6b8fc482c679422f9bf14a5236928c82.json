{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange,\n  periodPL,\n  timePeriod\n}) => {\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const calculateProfitsForAllTimePeriods = trades => {\n      const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n      const profitsData = [];\n      timePeriods.forEach(selectedTimePeriod => {\n        let startDate = new Date();\n        switch (selectedTimePeriod) {\n          case \"1D\":\n            startDate.setDate(startDate.getDate() - 1);\n            break;\n          case \"1W\":\n            startDate.setDate(startDate.getDate() - 7);\n            break;\n          case \"1M\":\n            startDate.setMonth(startDate.getMonth() - 1);\n            break;\n          case \"3M\":\n            startDate.setMonth(startDate.getMonth() - 3);\n            break;\n          case \"YTD\":\n            startDate = new Date(startDate.getFullYear(), 0, 1); // Year to Date\n            break;\n          case \"1Y\":\n            startDate.setFullYear(startDate.getFullYear() - 1);\n            break;\n          default:\n            break;\n        }\n        const filteredTrades = trades.filter(trade => new Date(trade.close_date) >= startDate);\n        const profits = filteredTrades.map(trade => {\n          const entryPrice = parseFloat(trade.entry_price);\n          const exitPrice = parseFloat(trade.exit_price);\n          const contracts = trade.contracts;\n          if (!isNaN(exitPrice)) {\n            return (exitPrice - entryPrice) * contracts * 100;\n          }\n          return 0;\n        });\n        const totalProfit = profits.reduce((sum, profit) => sum + profit, 0);\n        profitsData.push({\n          timePeriod: selectedTimePeriod,\n          profit: totalProfit\n        });\n      });\n      return profitsData;\n    };\n    const ctx = chartRef.current.getContext(\"2d\");\n    const profitsData = calculateProfitsForAllTimePeriods(trades);\n    const myChart = new window.Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: profitsData.map(data => data.timePeriod),\n        datasets: [{\n          label: \"Profit/Loss\",\n          data: profitsData.map(data => data.profit),\n          backgroundColor: \"lightgreen\"\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: \"Profit/Loss\"\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      myChart.destroy();\n    };\n  }, [trades]);\n  const handleTimePeriodClick = period => {\n    onTimePeriodChange(period);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"Max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","AccountGraph","trades","onTimePeriodChange","periodPL","timePeriod","chartRef","calculateProfitsForAllTimePeriods","timePeriods","profitsData","forEach","selectedTimePeriod","startDate","Date","setDate","getDate","setMonth","getMonth","getFullYear","setFullYear","filteredTrades","filter","trade","close_date","profits","map","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","totalProfit","reduce","sum","profit","push","ctx","current","getContext","myChart","window","Chart","type","data","labels","datasets","label","backgroundColor","options","plugins","legend","display","scales","x","grid","y","title","text","destroy","handleTimePeriodClick","period","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange, periodPL, timePeriod }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const calculateProfitsForAllTimePeriods = (trades) => {\r\n      const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n      const profitsData = [];\r\n\r\n      timePeriods.forEach((selectedTimePeriod) => {\r\n        let startDate = new Date();\r\n\r\n        switch (selectedTimePeriod) {\r\n          case \"1D\":\r\n            startDate.setDate(startDate.getDate() - 1);\r\n            break;\r\n          case \"1W\":\r\n            startDate.setDate(startDate.getDate() - 7);\r\n            break;\r\n          case \"1M\":\r\n            startDate.setMonth(startDate.getMonth() - 1);\r\n            break;\r\n          case \"3M\":\r\n            startDate.setMonth(startDate.getMonth() - 3);\r\n            break;\r\n          case \"YTD\":\r\n            startDate = new Date(startDate.getFullYear(), 0, 1); // Year to Date\r\n            break;\r\n          case \"1Y\":\r\n            startDate.setFullYear(startDate.getFullYear() - 1);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        const filteredTrades = trades.filter(\r\n          (trade) => new Date(trade.close_date) >= startDate\r\n        );\r\n\r\n        const profits = filteredTrades.map((trade) => {\r\n          const entryPrice = parseFloat(trade.entry_price);\r\n          const exitPrice = parseFloat(trade.exit_price);\r\n          const contracts = trade.contracts;\r\n          if (!isNaN(exitPrice)) {\r\n            return (exitPrice - entryPrice) * contracts * 100;\r\n          }\r\n          return 0;\r\n        });\r\n\r\n        const totalProfit = profits.reduce((sum, profit) => sum + profit, 0);\r\n        profitsData.push({\r\n          timePeriod: selectedTimePeriod,\r\n          profit: totalProfit,\r\n        });\r\n      });\r\n\r\n      return profitsData;\r\n    };\r\n\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    const profitsData = calculateProfitsForAllTimePeriods(trades);\r\n\r\n    const myChart = new window.Chart(ctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: profitsData.map((data) => data.timePeriod),\r\n        datasets: [\r\n          {\r\n            label: \"Profit/Loss\",\r\n            data: profitsData.map((data) => data.profit),\r\n            backgroundColor: \"lightgreen\",\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            display: true,\r\n            title: {\r\n              display: true,\r\n              text: \"Profit/Loss\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      myChart.destroy();\r\n    };\r\n  }, [trades]);\r\n\r\n  const handleTimePeriodClick = (period) => {\r\n    onTimePeriodChange(period);\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} />\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"Max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 0;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100;\n//           balance += profit;\n//           dailyProfitLoss += profit;\n//         }\n\n//         const tradeCloseDate = new Date(trade.close_date);\n\n//         // Calculate the period profit based on the selected time period\n//         if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date(), trade)) {\n//           periodProfitLoss += calculateProfit(trade);\n//         }\n//       });\n\n//       setAccountBalance(balance);\n//       setDailyPL(dailyProfitLoss);\n//       setPeriodPL(periodProfitLoss);\n//     };\n\n//     const calculateProfit = (trade) => {\n//       const entryPrice = parseFloat(trade.entry_price);\n//       const exitPrice = parseFloat(trade.exit_price);\n//       const contracts = trade.contracts;\n//       if (!isNaN(exitPrice)) {\n//         return (exitPrice - entryPrice) * contracts * 100;\n//       }\n//       return 0;\n//     };\n\n//     const isWithinTimePeriod = (tradeCloseDate, period, today, trade) => {\n//       const periodStartDate = new Date();\n\n//       switch (period) {\n//         case \"1D\":\n//           periodStartDate.setDate(today.getDate() - 1);\n//           break;\n//         case \"1W\":\n//           periodStartDate.setDate(today.getDate() - 7);\n//           break;\n//         case \"1M\":\n//           periodStartDate.setMonth(today.getMonth() - 1);\n//           break;\n//         case \"3M\":\n//           periodStartDate.setMonth(today.getMonth() - 3);\n//           break;\n//         case \"YTD\":\n//           periodStartDate.setFullYear(today.getFullYear(), 0, 1);\n//           break;\n//         case \"1Y\":\n//           periodStartDate.setFullYear(today.getFullYear() - 1);\n//           break;\n//         case \"Max\":\n//           return trades.reduce((total, trade) => {\n//             const entryPrice = parseFloat(trade.entry_price);\n//             const exitPrice = parseFloat(trade.exit_price);\n//             const contracts = trade.contracts;\n//             if (!isNaN(exitPrice)) {\n//               return total + (exitPrice - entryPrice) * contracts * 100;\n//             }\n//             return total;\n//           }, 0);\n//         default:\n//           break;\n//       }\n\n//       return period === \"Max\" || tradeCloseDate >= periodStartDate;\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>{`${timePeriod}`}</p>\n//         <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph\n//         trades={trades}\n//         onTimePeriodChange={handleTimePeriodChange}\n//         periodPL={periodPL}\n//         timePeriod={timePeriod}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Account;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 0;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100;\r\n//           balance += profit;\r\n//           dailyProfitLoss += profit;\r\n//         }\r\n\r\n//         const tradeCloseDate = new Date(trade.close_date);\r\n\r\n//         // Calculate the period profit based on the selected time period\r\n//         if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date(), trade)) {\r\n//           periodProfitLoss += calculateProfit(trade);\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance);\r\n//       setDailyPL(dailyProfitLoss);\r\n//       setPeriodPL(periodProfitLoss);\r\n//     };\r\n\r\n//     const calculateProfit = (trade) => {\r\n//       const entryPrice = parseFloat(trade.entry_price);\r\n//       const exitPrice = parseFloat(trade.exit_price);\r\n//       const contracts = trade.contracts;\r\n//       if (!isNaN(exitPrice)) {\r\n//         return (exitPrice - entryPrice) * contracts * 100;\r\n//       }\r\n//       return 0;\r\n//     };\r\n\r\n//     const isWithinTimePeriod = (tradeCloseDate, period, today, trade) => {\r\n//       const periodStartDate = new Date();\r\n\r\n//       switch (period) {\r\n//         case \"1D\":\r\n//           periodStartDate.setDate(today.getDate() - 1);\r\n//           break;\r\n//         case \"1W\":\r\n//           periodStartDate.setDate(today.getDate() - 7);\r\n//           break;\r\n//         case \"1M\":\r\n//           periodStartDate.setMonth(today.getMonth() - 1);\r\n//           break;\r\n//         case \"3M\":\r\n//           periodStartDate.setMonth(today.getMonth() - 3);\r\n//           break;\r\n//         case \"YTD\":\r\n//           periodStartDate.setFullYear(today.getFullYear(), 0, 1);\r\n//           break;\r\n//         case \"1Y\":\r\n//           periodStartDate.setFullYear(today.getFullYear() - 1);\r\n//           break;\r\n//         case \"Max\":\r\n//           return trades.reduce((total, trade) => {\r\n//             const entryPrice = parseFloat(trade.entry_price);\r\n//             const exitPrice = parseFloat(trade.exit_price);\r\n//             const contracts = trade.contracts;\r\n//             if (!isNaN(exitPrice)) {\r\n//               return total + (exitPrice - entryPrice) * contracts * 100;\r\n//             }\r\n//             return total;\r\n//           }, 0);\r\n//         default:\r\n//           break;\r\n//       }\r\n\r\n//       return period === \"Max\" || tradeCloseDate >= periodStartDate;\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>{`${timePeriod}`}</p>\r\n//         <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph\r\n//         trades={trades}\r\n//         onTimePeriodChange={handleTimePeriodChange}\r\n//         periodPL={periodPL}\r\n//         timePeriod={timePeriod}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
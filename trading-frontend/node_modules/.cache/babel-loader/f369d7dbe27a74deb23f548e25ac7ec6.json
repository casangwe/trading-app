{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nconst Graph = () => {\n  const chartRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [trades, setTrades] = useState([]);\n  const [profits, setProfits] = useState({});\n  console.log(\"Graph component mounted\");\n  const calculateProfitsForAllTimePeriods = trades => {\n    console.log(\"Calculating profits for all time periods\");\n    const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n    const profitsData = {};\n    const now = new Date();\n    const startDates = {\n      \"1D\": new Date(now.setDate(now.getDate() - 1)),\n      \"1W\": new Date(now.setDate(now.getDate() - 7)),\n      \"1M\": new Date(now.setMonth(now.getMonth() - 1)),\n      \"3M\": new Date(now.setMonth(now.getMonth() - 3)),\n      YTD: new Date(now.getFullYear(), 0, 1),\n      \"1Y\": new Date(now.setFullYear(now.getFullYear() - 1)),\n      Max: new Date(0)\n    };\n    for (const period of timePeriods) {\n      console.log(`Processing period: ${period}`);\n      const startDate = startDates[period];\n      const filteredTrades = trades.filter(trade => new Date(trade.close_date) >= startDate);\n      console.log(`Filtered trades: ${JSON.stringify(filteredTrades)}`);\n      const totalProfit = filteredTrades.reduce((sum, trade) => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          return sum + (exitPrice - entryPrice) * contracts * 100;\n        }\n        return sum;\n      }, 0);\n      console.log(`Total profit for period: ${period} is ${totalProfit}`);\n      profitsData[period] = totalProfit;\n    }\n    console.log(\"Profits data calculated\");\n    return profitsData;\n  };\n  useEffect(() => {\n    console.log(\"useEffect hook triggered\");\n    const fetchData = async () => {\n      console.log(\"Fetching data from API\");\n      try {\n        const fetchedTrades = await fetchTrades();\n        console.log(`Fetched trades: ${JSON.stringify(fetchedTrades)}`);\n        setTrades(fetchedTrades);\n        const calculatedProfits = calculateProfitsForAllTimePeriods(fetchedTrades);\n        console.log(`Calculated profits: ${JSON.stringify(calculatedProfits)}`);\n        setProfits(calculatedProfits);\n        setLoading(false);\n        console.log(\"Data fetched and processed successfully\");\n      } catch (error) {\n        console.error(\"Error fetching trades:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    console.log(\"Second useEffect hook triggered\");\n    if (!loading && trades.length > 0) {\n      console.log(\"Creating chart\");\n      const ctx = chartRef.current.getContext(\"2d\");\n      const profitValues = Object.values(profits);\n      const backgroundColors = profitValues.map(value => value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\");\n      console.log(\"Creating chart with values: ${JSON.stringify(profitValues)} and colors: ${JSON.stringify(backgroundColors)}\");\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: Object.keys(profits),\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitValues,\n            backgroundColor: backgroundColors,\n            barThickness: 40\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              },\n              grid: {\n                color: context => context.tick.value === 0 ? \"rgba(0, 0, 0, 1)\" : \"rgba(0, 0, 0, 0)\",\n                lineWidth: 0.5\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return value === 0 ? value : \"\";\n                }\n              }\n            }\n          }\n        }\n      });\n      console.log(\"Chart created\");\n      return () => {\n        if (myChart) {\n          console.log(\"Destroying chart\");\n          myChart.destroy();\n        }\n      };\n    }\n  }, [loading, trades, profits]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 38\n    }\n  }));\n};\nexport default Graph;\n// import React, { useEffect, useRef, useState } from \"react\";\n// import { fetchTrades } from \"./ApiCalls\";\n\n// const Graph = () => {\n//   const chartRef = useRef(null);\n//   const [loading, setLoading] = useState(true);\n//   const [trades, setTrades] = useState([]);\n//   const [profits, setProfits] = useState({});\n\n//   const calculateProfitsForAllTimePeriods = (trades) => {\n//     const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n//     const profitsData = {};\n//     const now = new Date();\n\n//     const startDates = {\n//       \"1D\": new Date(now.setDate(now.getDate() - 1)),\n//       \"1W\": new Date(now.setDate(now.getDate() - 7)),\n//       \"1M\": new Date(now.setMonth(now.getMonth() - 1)),\n//       \"3M\": new Date(now.setMonth(now.getMonth() - 3)),\n//       YTD: new Date(now.getFullYear(), 0, 1),\n//       \"1Y\": new Date(now.setFullYear(now.getFullYear() - 1)),\n//       Max: new Date(0),\n//     };\n\n//     for (const period of timePeriods) {\n//       const startDate = startDates[period];\n//       const filteredTrades = trades.filter(\n//         (trade) => new Date(trade.close_date) >= startDate\n//       );\n\n//       const totalProfit = filteredTrades.reduce((sum, trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n//         if (!isNaN(exitPrice)) {\n//           return sum + (exitPrice - entryPrice) * contracts * 100;\n//         }\n//         return sum;\n//       }, 0);\n\n//       profitsData[period] = totalProfit;\n//     }\n\n//     return profitsData;\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const fetchedTrades = await fetchTrades(); // Fetch trade data from the backend\n//         setTrades(fetchedTrades); // Set fetched trade data\n//         const calculatedProfits =\n//           calculateProfitsForAllTimePeriods(fetchedTrades);\n//         setProfits(calculatedProfits);\n//         setLoading(false); // Set loading state to false\n//       } catch (error) {\n//         console.error(\"Error fetching trades:\", error);\n//       }\n//     };\n\n//     fetchData(); // Fetch trade data when component mounts\n//   }, []);\n\n//   useEffect(() => {\n//     if (!loading && trades.length > 0) {\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const profitValues = Object.values(profits);\n//       const backgroundColors = profitValues.map((value) =>\n//         value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\n//       );\n\n//       const myChart = new window.Chart(ctx, {\n//         type: \"bar\",\n//         data: {\n//           labels: Object.keys(profits),\n//           datasets: [\n//             {\n//               label: \"Profit/Loss\",\n//               data: profitValues,\n//               backgroundColor: backgroundColors,\n//               barThickness: 40,\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false,\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false,\n//               },\n//             },\n//             y: {\n//               display: true,\n//               title: {\n//                 display: true,\n//                 text: \"Profit/Loss\",\n//               },\n//               grid: {\n//                 color: (context) =>\n//                   context.tick.value === 0\n//                     ? \"rgba(0, 0, 0, 1)\"\n//                     : \"rgba(0, 0, 0, 0)\",\n//                 lineWidth: 0.5,\n//               },\n//               ticks: {\n//                 callback: function (value, index, values) {\n//                   return value === 0 ? value : \"\";\n//                 },\n//               },\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         if (myChart) {\n//           myChart.destroy();\n//         }\n//       };\n//     }\n//   }, [loading, trades, profits]);\n\n//   return (\n//     <div className=\"graph\">\n//       {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\n//     </div>\n//   );\n// };\n\n// export default Graph;","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchTrades","Graph","chartRef","loading","setLoading","trades","setTrades","profits","setProfits","console","log","calculateProfitsForAllTimePeriods","timePeriods","profitsData","now","Date","startDates","setDate","getDate","setMonth","getMonth","YTD","getFullYear","setFullYear","Max","period","startDate","filteredTrades","filter","trade","close_date","JSON","stringify","totalProfit","reduce","sum","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","fetchData","fetchedTrades","calculatedProfits","error","length","ctx","current","getContext","profitValues","Object","values","backgroundColors","map","value","myChart","window","Chart","type","data","labels","keys","datasets","label","backgroundColor","barThickness","options","plugins","legend","display","scales","x","grid","y","title","text","color","context","tick","lineWidth","ticks","callback","index","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\n\r\nconst Graph = () => {\r\n  const chartRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [trades, setTrades] = useState([]);\r\n  const [profits, setProfits] = useState({});\r\n\r\n  console.log(\"Graph component mounted\");\r\n\r\n  const calculateProfitsForAllTimePeriods = (trades) => {\r\n    console.log(\"Calculating profits for all time periods\");\r\n    const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n    const profitsData = {};\r\n    const now = new Date();\r\n\r\n    const startDates = {\r\n      \"1D\": new Date(now.setDate(now.getDate() - 1)),\r\n      \"1W\": new Date(now.setDate(now.getDate() - 7)),\r\n      \"1M\": new Date(now.setMonth(now.getMonth() - 1)),\r\n      \"3M\": new Date(now.setMonth(now.getMonth() - 3)),\r\n      YTD: new Date(now.getFullYear(), 0, 1),\r\n      \"1Y\": new Date(now.setFullYear(now.getFullYear() - 1)),\r\n      Max: new Date(0),\r\n    };\r\n\r\n    for (const period of timePeriods) {\r\n      console.log(`Processing period: ${period}`);\r\n      const startDate = startDates[period];\r\n      const filteredTrades = trades.filter(\r\n        (trade) => new Date(trade.close_date) >= startDate\r\n      );\r\n\r\n      console.log(`Filtered trades: ${JSON.stringify(filteredTrades)}`);\r\n\r\n      const totalProfit = filteredTrades.reduce((sum, trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n        if (!isNaN(exitPrice)) {\r\n          return sum + (exitPrice - entryPrice) * contracts * 100;\r\n        }\r\n        return sum;\r\n      }, 0);\r\n\r\n      console.log(`Total profit for period: ${period} is ${totalProfit}`);\r\n      profitsData[period] = totalProfit;\r\n    }\r\n\r\n    console.log(\"Profits data calculated\");\r\n    return profitsData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect hook triggered\");\r\n    const fetchData = async () => {\r\n      console.log(\"Fetching data from API\");\r\n      try {\r\n        const fetchedTrades = await fetchTrades();\r\n        console.log(`Fetched trades: ${JSON.stringify(fetchedTrades)}`);\r\n        setTrades(fetchedTrades);\r\n        const calculatedProfits =\r\n          calculateProfitsForAllTimePeriods(fetchedTrades);\r\n        console.log(`Calculated profits: ${JSON.stringify(calculatedProfits)}`);\r\n        setProfits(calculatedProfits);\r\n        setLoading(false);\r\n        console.log(\"Data fetched and processed successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error fetching trades:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Second useEffect hook triggered\");\r\n    if (!loading && trades.length > 0) {\r\n      console.log(\"Creating chart\");\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const profitValues = Object.values(profits);\r\n      const backgroundColors = profitValues.map((value) =>\r\n        value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n      );\r\n\r\n      console.log(\r\n        \"Creating chart with values: ${JSON.stringify(profitValues)} and colors: ${JSON.stringify(backgroundColors)}\"\r\n      );\r\n\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: Object.keys(profits),\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitValues,\r\n              backgroundColor: backgroundColors,\r\n              barThickness: 40,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n              grid: {\r\n                color: (context) =>\r\n                  context.tick.value === 0\r\n                    ? \"rgba(0, 0, 0, 1)\"\r\n                    : \"rgba(0, 0, 0, 0)\",\r\n                lineWidth: 0.5,\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  return value === 0 ? value : \"\";\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      console.log(\"Chart created\");\r\n\r\n      return () => {\r\n        if (myChart) {\r\n          console.log(\"Destroying chart\");\r\n          myChart.destroy();\r\n        }\r\n      };\r\n    }\r\n  }, [loading, trades, profits]);\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import { fetchTrades } from \"./ApiCalls\";\r\n\r\n// const Graph = () => {\r\n//   const chartRef = useRef(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [trades, setTrades] = useState([]);\r\n//   const [profits, setProfits] = useState({});\r\n\r\n//   const calculateProfitsForAllTimePeriods = (trades) => {\r\n//     const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n//     const profitsData = {};\r\n//     const now = new Date();\r\n\r\n//     const startDates = {\r\n//       \"1D\": new Date(now.setDate(now.getDate() - 1)),\r\n//       \"1W\": new Date(now.setDate(now.getDate() - 7)),\r\n//       \"1M\": new Date(now.setMonth(now.getMonth() - 1)),\r\n//       \"3M\": new Date(now.setMonth(now.getMonth() - 3)),\r\n//       YTD: new Date(now.getFullYear(), 0, 1),\r\n//       \"1Y\": new Date(now.setFullYear(now.getFullYear() - 1)),\r\n//       Max: new Date(0),\r\n//     };\r\n\r\n//     for (const period of timePeriods) {\r\n//       const startDate = startDates[period];\r\n//       const filteredTrades = trades.filter(\r\n//         (trade) => new Date(trade.close_date) >= startDate\r\n//       );\r\n\r\n//       const totalProfit = filteredTrades.reduce((sum, trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n//         if (!isNaN(exitPrice)) {\r\n//           return sum + (exitPrice - entryPrice) * contracts * 100;\r\n//         }\r\n//         return sum;\r\n//       }, 0);\r\n\r\n//       profitsData[period] = totalProfit;\r\n//     }\r\n\r\n//     return profitsData;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const fetchedTrades = await fetchTrades(); // Fetch trade data from the backend\r\n//         setTrades(fetchedTrades); // Set fetched trade data\r\n//         const calculatedProfits =\r\n//           calculateProfitsForAllTimePeriods(fetchedTrades);\r\n//         setProfits(calculatedProfits);\r\n//         setLoading(false); // Set loading state to false\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching trades:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData(); // Fetch trade data when component mounts\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!loading && trades.length > 0) {\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const profitValues = Object.values(profits);\r\n//       const backgroundColors = profitValues.map((value) =>\r\n//         value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n//       );\r\n\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"bar\",\r\n//         data: {\r\n//           labels: Object.keys(profits),\r\n//           datasets: [\r\n//             {\r\n//               label: \"Profit/Loss\",\r\n//               data: profitValues,\r\n//               backgroundColor: backgroundColors,\r\n//               barThickness: 40,\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false,\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false,\r\n//               },\r\n//             },\r\n//             y: {\r\n//               display: true,\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Profit/Loss\",\r\n//               },\r\n//               grid: {\r\n//                 color: (context) =>\r\n//                   context.tick.value === 0\r\n//                     ? \"rgba(0, 0, 0, 1)\"\r\n//                     : \"rgba(0, 0, 0, 0)\",\r\n//                 lineWidth: 0.5,\r\n//               },\r\n//               ticks: {\r\n//                 callback: function (value, index, values) {\r\n//                   return value === 0 ? value : \"\";\r\n//                 },\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         if (myChart) {\r\n//           myChart.destroy();\r\n//         }\r\n//       };\r\n//     }\r\n//   }, [loading, trades, profits]);\r\n\r\n//   return (\r\n//     <div className=\"graph\">\r\n//       {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Graph;\r\n"],"mappings":"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pignoreList":[]},"metadata":{},"sourceType":"module"}
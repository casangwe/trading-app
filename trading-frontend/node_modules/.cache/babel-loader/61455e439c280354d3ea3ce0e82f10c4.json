{"ast":null,"code":"// CashApi.js\nconst API_BASE_URL = \"http://localhost:8000\";\nexport async function createCash(cashAmount) {\n  const token = localStorage.getItem(\"token\");\n  const userId = localStorage.getItem(\"sub\");\n  const response = await fetch(\"/api/cash/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user_id: userId,\n      initial_cash: cashAmount,\n      entry_date: new Date().toISOString().split(\"T\")[0]\n    })\n  });\n  const data = await response.json();\n  if (response.ok) {\n    console.log(\"Cash added successfully:\", data);\n  } else {\n    console.error(\"Error adding cash:\", data);\n  }\n}\n\n// Function to fetch cash entries (optional, can be implemented as needed)\nexport const getCash = async () => {\n  const token = localStorage.getItem(\"access_token\");\n  const response = await fetch(`${API_BASE_URL}/cash/`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}` // the token is no longer needed since we can just filter the results based on the userId send from this.\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Error fetching cash data\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE_URL","createCash","cashAmount","token","localStorage","getItem","userId","response","fetch","method","headers","Authorization","body","JSON","stringify","user_id","initial_cash","entry_date","Date","toISOString","split","data","json","ok","console","log","error","getCash","Error"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/CashApi.js"],"sourcesContent":["// CashApi.js\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\nexport async function createCash(cashAmount) {\r\n  const token = localStorage.getItem(\"token\");\r\n  const userId = localStorage.getItem(\"sub\");\r\n\r\n  const response = await fetch(\"/api/cash/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      user_id: userId,\r\n      initial_cash: cashAmount,\r\n      entry_date: new Date().toISOString().split(\"T\")[0],\r\n    }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  if (response.ok) {\r\n    console.log(\"Cash added successfully:\", data);\r\n  } else {\r\n    console.error(\"Error adding cash:\", data);\r\n  }\r\n}\r\n\r\n// Function to fetch cash entries (optional, can be implemented as needed)\r\nexport const getCash = async () => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  const response = await fetch(`${API_BASE_URL}/cash/`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`, // the token is no longer needed since we can just filter the results based on the userId send from this.\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Error fetching cash data\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,eAAeC,UAAUA,CAACC,UAAU,EAAE;EAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,MAAM,GAAGF,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;EAE1C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;IACzCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASR,KAAM,EAAC;MAChC,cAAc,EAAE;IAClB,CAAC;IACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,OAAO,EAAET,MAAM;MACfU,YAAY,EAAEd,UAAU;MACxBe,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;EAClC,IAAIf,QAAQ,CAACgB,EAAE,EAAE;IACfC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEJ,IAAI,CAAC;EAC/C,CAAC,MAAM;IACLG,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEL,IAAI,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,MAAMM,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMxB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAElD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,YAAa,QAAO,EAAE;IACpDS,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASR,KAAM,EAAC,CAAE;IACpC;EACF,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACgB,EAAE,EAAE;IAChB,MAAM,IAAIK,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,OAAO,MAAMrB,QAAQ,CAACe,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\InvestmentChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst InvestmentChart = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [investmentSummary, setInvestmentSummary] = useState(null);\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        if (data && data.length > 0) {\n          const sortedData = data.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          setChartData(formatChartData(sortedData));\n          setInvestmentSummary(calculateInvestmentSummary(sortedData));\n        } else {\n          setError(\"No data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  const calculateInvestmentSummary = data => {\n    var _data$, _data, _data2;\n    const initialBalance = parseFloat(((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.close_cash) || 0);\n    const finalBalance = parseFloat(((_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.close_cash) || 0);\n    const percentageChange = (finalBalance - initialBalance) / initialBalance * 100;\n    const pnl = finalBalance - initialBalance;\n    const latestDate = formatDate((_data2 = data[data.length - 1]) === null || _data2 === void 0 ? void 0 : _data2.entry_date);\n    return {\n      balance: finalBalance,\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n      latestDate: latestDate,\n      pnl: pnl\n    };\n  };\n  const formatChartData = data => {\n    return data.map(entry => ({\n      date: formatDate(entry.entry_date),\n      closingBalance: parseFloat(entry.close_cash || 0)\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-roi\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, investmentSummary ? `${formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)}${\"\"}${investmentSummary.percentageChange.toFixed(2)}%` : \"Loading...\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, (investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.latestDate) || \"Loading...\")), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    style: {\n      background: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: false,\n    axisLine: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: false,\n    content: ({\n      payload\n    }) => {\n      if (payload && payload.length) {\n        const {\n          date,\n          closingBalance\n        } = payload[0].payload;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tooltip-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 23\n          }\n        }, formatCash(closingBalance)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"invest-date\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 23\n          }\n        }, date));\n      }\n      return null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"closingBalance\",\n    stroke: \"#4a90e2\",\n    strokeWidth: 2,\n    dot: {\n      r: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default InvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","LineChart","Line","XAxis","Tooltip","ResponsiveContainer","formatCash","formatDate","InvestmentChart","loading","setLoading","error","setError","chartData","setChartData","investmentSummary","setInvestmentSummary","fetchDailyPNLData","data","length","sortedData","sort","a","b","Date","entry_date","formatChartData","calculateInvestmentSummary","console","_data$","_data","_data2","initialBalance","parseFloat","close_cash","finalBalance","percentageChange","pnl","latestDate","balance","isNaN","map","entry","date","closingBalance","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","width","height","style","background","dataKey","tick","axisLine","cursor","content","payload","type","stroke","strokeWidth","dot","r"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/InvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { LineChart, Line, XAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst InvestmentChart = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        if (data && data.length > 0) {\r\n          const sortedData = data.sort(\r\n            (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n          );\r\n          setChartData(formatChartData(sortedData));\r\n          setInvestmentSummary(calculateInvestmentSummary(sortedData));\r\n        } else {\r\n          setError(\"No data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  const calculateInvestmentSummary = (data) => {\r\n    const initialBalance = parseFloat(data[0]?.close_cash || 0);\r\n    const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n    const percentageChange =\r\n      ((finalBalance - initialBalance) / initialBalance) * 100;\r\n    const pnl = finalBalance - initialBalance;\r\n    const latestDate = formatDate(data[data.length - 1]?.entry_date);\r\n\r\n    return {\r\n      balance: finalBalance,\r\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n      latestDate: latestDate,\r\n      pnl: pnl,\r\n    };\r\n  };\r\n\r\n  const formatChartData = (data) => {\r\n    return data.map((entry) => ({\r\n      date: formatDate(entry.entry_date),\r\n      closingBalance: parseFloat(entry.close_cash || 0),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"investment-chart-container\">\r\n      <div className=\"summary-section\">\r\n        <p className=\"investment-cash\">\r\n          {formatCash(investmentSummary?.balance || 0)}\r\n        </p>\r\n        <p className=\"investment-roi\">\r\n          {investmentSummary\r\n            ? `${formatCash(\r\n                investmentSummary?.balance || 0\r\n              )}${\"\"}${investmentSummary.percentageChange.toFixed(2)}%`\r\n            : \"Loading...\"}\r\n        </p>\r\n        <p className=\"investment-date\">\r\n          {investmentSummary?.latestDate || \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n            <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n            <Tooltip\r\n              cursor={false}\r\n              content={({ payload }) => {\r\n                if (payload && payload.length) {\r\n                  const { date, closingBalance } = payload[0].payload;\r\n                  return (\r\n                    <div className=\"tooltip-content\">\r\n                      <p>{formatCash(closingBalance)}</p>\r\n                      <p className=\"invest-date\">{date}</p>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"closingBalance\"\r\n              stroke=\"#4a90e2\"\r\n              strokeWidth={2}\r\n              dot={{ r: 4 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
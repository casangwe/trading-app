{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\trades\\\\EQTcurve.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { getCash } from \"../api/CashApi\";\nimport { Line, XAxis, YAxis, ResponsiveContainer, AreaChart } from \"recharts\";\nimport { formatCash } from \"../func/functions\";\nconst EQTCurve = () => {\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAndFormatData = async () => {\n      try {\n        const cashData = await getCash();\n        const trades = await fetchTrades();\n        if (cashData && trades && trades.length > 0) {\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\n          const formattedData = formatChartData(trades, startingEquity);\n          setChartData(formattedData);\n          console.log(\"Formatted Chart Data:\", formattedData); // Log the data to check\n        } else {\n          setError(\"No trade or cash data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching trade or cash data\");\n        console.error(\"Error:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAndFormatData();\n  }, []);\n  const formatChartData = (trades, startingEquity) => {\n    let cumulativeEquity = startingEquity;\n    const idealIncrement = (startingEquity * 3 - startingEquity) / trades.length;\n    const sortedTrades = trades.sort((a, b) => new Date(a.close_date) - new Date(b.close_date));\n    return sortedTrades.map((trade, index) => {\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\n      return {\n        date: trade.close_date,\n        equity: cumulativeEquity,\n        idealEquity: idealEquity\n      };\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"equity-curve-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: true,\n    axisLine: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickFormatter: formatCash,\n    domain: [\"dataMin\", \"dataMax\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"idealEquity\",\n    stroke: \"#32CD32\" // Lime Green for visibility\n    ,\n    strokeWidth: 2,\n    dot: false,\n    name: \"Ideal Line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"equity\",\n    stroke: \"#8A2BE2\" // BlueViolet for visibility\n    ,\n    strokeWidth: 2,\n    dot: {\n      r: 3\n    },\n    name: \"Equity Curve\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default EQTCurve;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","getCash","Line","XAxis","YAxis","ResponsiveContainer","AreaChart","formatCash","EQTCurve","chartData","setChartData","loading","setLoading","error","setError","fetchAndFormatData","cashData","trades","length","startingEquity","parseFloat","initial_cash","formattedData","formatChartData","console","log","cumulativeEquity","idealIncrement","sortedTrades","sort","a","b","Date","close_date","map","trade","index","profit_loss","idealEquity","date","equity","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","dataKey","tick","axisLine","tickFormatter","domain","type","stroke","strokeWidth","dot","name","r"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/trades/EQTcurve.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport { getCash } from \"../api/CashApi\";\r\nimport { Line, XAxis, YAxis, ResponsiveContainer, AreaChart } from \"recharts\";\r\nimport { formatCash } from \"../func/functions\";\r\n\r\nconst EQTCurve = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAndFormatData = async () => {\r\n      try {\r\n        const cashData = await getCash();\r\n        const trades = await fetchTrades();\r\n\r\n        if (cashData && trades && trades.length > 0) {\r\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n          const formattedData = formatChartData(trades, startingEquity);\r\n          setChartData(formattedData);\r\n          console.log(\"Formatted Chart Data:\", formattedData); // Log the data to check\r\n        } else {\r\n          setError(\"No trade or cash data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching trade or cash data\");\r\n        console.error(\"Error:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAndFormatData();\r\n  }, []);\r\n\r\n  const formatChartData = (trades, startingEquity) => {\r\n    let cumulativeEquity = startingEquity;\r\n    const idealIncrement =\r\n      (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n    const sortedTrades = trades.sort(\r\n      (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n    );\r\n\r\n    return sortedTrades.map((trade, index) => {\r\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n      return {\r\n        date: trade.close_date,\r\n        equity: cumulativeEquity,\r\n        idealEquity: idealEquity,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"equity-curve-chart-container\">\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <AreaChart data={chartData}>\r\n            <XAxis dataKey=\"date\" tick={true} axisLine={true} />\r\n            <YAxis tickFormatter={formatCash} domain={[\"dataMin\", \"dataMax\"]} />\r\n\r\n            {/* Ideal Line */}\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"idealEquity\"\r\n              stroke=\"#32CD32\" // Lime Green for visibility\r\n              strokeWidth={2}\r\n              dot={false}\r\n              name=\"Ideal Line\"\r\n            />\r\n\r\n            {/* Equity Curve Line */}\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"equity\"\r\n              stroke=\"#8A2BE2\" // BlueViolet for visibility\r\n              strokeWidth={2}\r\n              dot={{ r: 3 }}\r\n              name=\"Equity Curve\"\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EQTCurve;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\ProfitChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/TradesAPI\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\nconst ProfitChart = () => {\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const dailyPnls = await fetchDailyPnls();\n        const data = prepareChartData(dailyPnls);\n        setChartData(data);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareChartData = pnlData => {\n    // Sort PNL data by date\n    pnlData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Cumulative sum for balance line\n    let cumulativeBalance = 0;\n    const labels = pnlData.map(pnl => new Date(pnl.date).toLocaleDateString());\n    const balanceData = pnlData.map(pnl => {\n      cumulativeBalance += pnl.balance;\n      return cumulativeBalance;\n    });\n    return {\n      labels,\n      datasets: [{\n        label: \"Portfolio Balance\",\n        data: balanceData,\n        fill: false,\n        borderColor: \"#4a90e2\",\n        tension: 0.2\n      }]\n    };\n  };\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"Error loading chart data\");\n  if (!chartData) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 26\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profit-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Profit Progress\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\nexport default ProfitChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","register","ProfitChart","chartData","setChartData","error","setError","fetchData","dailyPnls","data","prepareChartData","err","pnlData","sort","a","b","Date","date","cumulativeBalance","labels","map","pnl","toLocaleDateString","balanceData","balance","datasets","label","fill","borderColor","tension","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","options","responsive","maintainAspectRatio"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/ProfitChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/TradesAPI\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst ProfitChart = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const dailyPnls = await fetchDailyPnls();\r\n        const data = prepareChartData(dailyPnls);\r\n        setChartData(data);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareChartData = (pnlData) => {\r\n    // Sort PNL data by date\r\n    pnlData.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    // Cumulative sum for balance line\r\n    let cumulativeBalance = 0;\r\n    const labels = pnlData.map((pnl) =>\r\n      new Date(pnl.date).toLocaleDateString()\r\n    );\r\n    const balanceData = pnlData.map((pnl) => {\r\n      cumulativeBalance += pnl.balance;\r\n      return cumulativeBalance;\r\n    });\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Portfolio Balance\",\r\n          data: balanceData,\r\n          fill: false,\r\n          borderColor: \"#4a90e2\",\r\n          tension: 0.2,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  if (error) return <div>Error loading chart data</div>;\r\n  if (!chartData) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"profit-chart-container\">\r\n      <h3>Profit Progress</h3>\r\n      <Line\r\n        data={chartData}\r\n        options={{ responsive: true, maintainAspectRatio: false }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfitChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
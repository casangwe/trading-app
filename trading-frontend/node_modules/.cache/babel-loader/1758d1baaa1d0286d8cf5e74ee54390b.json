{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"No Daily PNL data\");\n        console.error(\"No Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, error);\n  if (!dailyPNLData) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }\n  }, \"No PNL data available\");\n  const calculateBars = () => {\n    let balances = [];\n    let labels = [];\n    if (view === \"daily\") {\n      const currentWeek = getCurrentWeek(dailyPNLData);\n      balances = currentWeek.map(day => parseFloat(day.balance || 0));\n      labels = currentWeek.map(day => day.entry_date ? formatDate(day.entry_date) : \"Date\");\n    } else if (view === \"weekly\") {\n      const currentMonth = getCurrentMonth(dailyPNLData);\n      currentMonth.forEach(week => {\n        var _week$, _week;\n        const weekSum = week.reduce((sum, day) => sum + parseFloat(day.balance || 0), 0);\n        balances.push(weekSum);\n        labels.push(((_week$ = week[0]) === null || _week$ === void 0 ? void 0 : _week$.entry_date) && ((_week = week[week.length - 1]) === null || _week === void 0 ? void 0 : _week.entry_date) ? `${formatDate(week[0].entry_date)} - ${formatDate(week[week.length - 1].entry_date)}` : \"Week\");\n      });\n    } else if (view === \"monthly\") {\n      const months = getMonthsData(dailyPNLData);\n      months.forEach(month => {\n        var _month$;\n        const monthSum = month.reduce((sum, day) => sum + parseFloat(day.balance || 0), 0);\n        balances.push(monthSum);\n        labels.push(((_month$ = month[0]) === null || _month$ === void 0 ? void 0 : _month$.entry_date) ? formatMonthYear(month[0].entry_date) : \"Month\");\n      });\n    }\n    return {\n      balances,\n      labels\n    };\n  };\n  const getCurrentWeek = data => {\n    const weekData = [];\n    const today = new Date();\n    const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay() - 1));\n    const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n        weekData.push(entry);\n      }\n    });\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n    return weekData;\n  };\n  const getCurrentMonth = data => {\n    const weeks = [];\n    let week = [];\n    const today = new Date();\n    const month = today.getMonth() + 1;\n    data.forEach((entry, index) => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate.getMonth() + 1 === month) {\n        week.push(entry);\n        if ((index + 1) % 5 === 0) {\n          week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          weeks.push(week);\n          week = [];\n        }\n      }\n    });\n    if (week.length) {\n      week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n      weeks.push(week);\n    }\n    return weeks;\n  };\n  const getMonthsData = data => {\n    const months = Array.from({\n      length: 12\n    }, () => []);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      months[entryDate.getMonth()].push(entry);\n    });\n    return months.filter(month => month.length > 0);\n  };\n  const {\n    balances,\n    labels\n  } = calculateBars();\n  const maxBalance = Math.max(...balances);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"1Y\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bar-origin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), \" \", balances.map((balance, index) => {\n    const percentage = Math.abs(balance) / maxBalance * 100;\n    const isPositive = balance >= 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      className: `bar ${isPositive ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `${percentage}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"No Daily PNL data\");\n//         console.error(\"No Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance || 0));\n//       labels = currentWeek.map((day) =>\n//         day.entry_date ? formatDate(day.entry_date) : \"Date\"\n//       );\n//     } else if (view === \"weekly\") {\n//       const currentMonth = getCurrentMonth(dailyPNLData);\n//       currentMonth.forEach((week) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance || 0),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           week[0]?.entry_date && week[week.length - 1]?.entry_date\n//             ? `${formatDate(week[0].entry_date)} - ${formatDate(\n//                 week[week.length - 1].entry_date\n//               )}`\n//             : \"Week\"\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance || 0),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(\n//           month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\n//         );\n//       });\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() - 1)\n//     );\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const month = today.getMonth() + 1;\n\n//     data.forEach((entry, index) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() + 1 === month) {\n//         week.push(entry);\n//         if ((index + 1) % 5 === 0) {\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//       weeks.push(week);\n//     }\n\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     return months.filter((month) => month.length > 0);\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 5;\n\n//   const headerDate = dailyPNLData[0]?.entry_date\n//     ? view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date + \"T00:00:00\").toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0]\n//     : \"Date\";\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             1D\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             1M\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             1Y\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 65;\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","fetchDailyPNLData","data","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","calculateBars","balances","labels","currentWeek","getCurrentWeek","map","day","parseFloat","balance","entry_date","currentMonth","getCurrentMonth","forEach","week","_week$","_week","weekSum","reduce","sum","push","length","months","getMonthsData","month","_month$","monthSum","formatMonthYear","weekData","today","Date","startOfWeek","setDate","getDate","getDay","endOfWeek","entry","entryDate","sort","a","b","weeks","getMonth","index","Array","from","filter","maxBalance","Math","max","className","onClick","percentage","abs","isPositive","key","style","width"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"No Daily PNL data\");\r\n        console.error(\"No Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n  if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n  const calculateBars = () => {\r\n    let balances = [];\r\n    let labels = [];\r\n\r\n    if (view === \"daily\") {\r\n      const currentWeek = getCurrentWeek(dailyPNLData);\r\n      balances = currentWeek.map((day) => parseFloat(day.balance || 0));\r\n      labels = currentWeek.map((day) =>\r\n        day.entry_date ? formatDate(day.entry_date) : \"Date\"\r\n      );\r\n    } else if (view === \"weekly\") {\r\n      const currentMonth = getCurrentMonth(dailyPNLData);\r\n      currentMonth.forEach((week) => {\r\n        const weekSum = week.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance || 0),\r\n          0\r\n        );\r\n        balances.push(weekSum);\r\n        labels.push(\r\n          week[0]?.entry_date && week[week.length - 1]?.entry_date\r\n            ? `${formatDate(week[0].entry_date)} - ${formatDate(\r\n                week[week.length - 1].entry_date\r\n              )}`\r\n            : \"Week\"\r\n        );\r\n      });\r\n    } else if (view === \"monthly\") {\r\n      const months = getMonthsData(dailyPNLData);\r\n      months.forEach((month) => {\r\n        const monthSum = month.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance || 0),\r\n          0\r\n        );\r\n        balances.push(monthSum);\r\n        labels.push(\r\n          month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\r\n        );\r\n      });\r\n    }\r\n\r\n    return { balances, labels };\r\n  };\r\n\r\n  const getCurrentWeek = (data) => {\r\n    const weekData = [];\r\n    const today = new Date();\r\n    const startOfWeek = new Date(\r\n      today.setDate(today.getDate() - today.getDay() - 1)\r\n    );\r\n    const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n        weekData.push(entry);\r\n      }\r\n    });\r\n\r\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n    return weekData;\r\n  };\r\n\r\n  const getCurrentMonth = (data) => {\r\n    const weeks = [];\r\n    let week = [];\r\n    const today = new Date();\r\n    const month = today.getMonth() + 1;\r\n\r\n    data.forEach((entry, index) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate.getMonth() + 1 === month) {\r\n        week.push(entry);\r\n        if ((index + 1) % 5 === 0) {\r\n          week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n          weeks.push(week);\r\n          week = [];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (week.length) {\r\n      week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n      weeks.push(week);\r\n    }\r\n\r\n    return weeks;\r\n  };\r\n\r\n  const getMonthsData = (data) => {\r\n    const months = Array.from({ length: 12 }, () => []);\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      months[entryDate.getMonth()].push(entry);\r\n    });\r\n    return months.filter((month) => month.length > 0);\r\n  };\r\n\r\n  const { balances, labels } = calculateBars();\r\n  const maxBalance = Math.max(...balances);\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            1D\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            1M\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            1Y\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bars-container\">\r\n        <div className=\"bar-origin\"></div> {/* Central origin line */}\r\n        {balances.map((balance, index) => {\r\n          const percentage = (Math.abs(balance) / maxBalance) * 100;\r\n          const isPositive = balance >= 0;\r\n          return (\r\n            <div key={index} className=\"bar-wrapper\">\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n                style={{\r\n                  width: `${percentage}%`,\r\n                }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"No Daily PNL data\");\r\n//         console.error(\"No Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance || 0));\r\n//       labels = currentWeek.map((day) =>\r\n//         day.entry_date ? formatDate(day.entry_date) : \"Date\"\r\n//       );\r\n//     } else if (view === \"weekly\") {\r\n//       const currentMonth = getCurrentMonth(dailyPNLData);\r\n//       currentMonth.forEach((week) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance || 0),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           week[0]?.entry_date && week[week.length - 1]?.entry_date\r\n//             ? `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//                 week[week.length - 1].entry_date\r\n//               )}`\r\n//             : \"Week\"\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance || 0),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(\r\n//           month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\r\n//         );\r\n//       });\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() - 1)\r\n//     );\r\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const month = today.getMonth() + 1;\r\n\r\n//     data.forEach((entry, index) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() + 1 === month) {\r\n//         week.push(entry);\r\n//         if ((index + 1) % 5 === 0) {\r\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//       weeks.push(week);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     return months.filter((month) => month.length > 0);\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 5;\r\n\r\n//   const headerDate = dailyPNLData[0]?.entry_date\r\n//     ? view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date + \"T00:00:00\").toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0]\r\n//     : \"Date\";\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             1D\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             1M\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             1Y\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 65;\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
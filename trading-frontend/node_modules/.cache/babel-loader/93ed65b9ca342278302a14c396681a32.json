{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\BiggestWinsLosses.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/biggestWinsLosses.css\";\nconst BiggestWinsLosses = ({\n  trades\n}) => {\n  const [biggestWins, setBiggestWins] = useState([]);\n  const [biggestLosses, setBiggestLosses] = useState([]);\n\n  // Calculate profits or losses for each trade\n  useEffect(() => {\n    if (trades && trades.length > 0) {\n      // Sort trades by profits (positive) or losses (negative)\n      const sortedTrades = trades.slice().sort((a, b) => b.profit - a.profit);\n      const wins = sortedTrades.filter(trade => trade.profit > 0).slice(0, 5); // Get top 5 biggest wins\n      const losses = sortedTrades.filter(trade => trade.profit < 0).slice(0, 5); // Get top 5 biggest losses\n      setBiggestWins(wins);\n      setBiggestLosses(losses);\n    }\n  }, [trades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-lost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"Biggest Wins\"), biggestWins.length > 0 ? biggestWins.map(trade => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    key: trade.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }, trade.symbol), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"profit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }, `+$${trade.profit}`))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, \"No data available\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"losses-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"Biggest Losses\"), biggestLosses.length > 0 ? biggestLosses.map(trade => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    key: trade.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, trade.symbol), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, `-$${Math.abs(trade.profit)}`))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"No data available\")));\n};\nexport default BiggestWinsLosses;\n\n/* import React from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ trades }) => {\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"card\">\r\n        <p>P/L</p>\r\n        <p className=\"menu\">::</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n*/","map":{"version":3,"names":["React","useState","useEffect","BiggestWinsLosses","trades","biggestWins","setBiggestWins","biggestLosses","setBiggestLosses","length","sortedTrades","slice","sort","a","b","profit","wins","filter","trade","losses","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","id","symbol","Math","abs"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ trades }) => {\r\n  const [biggestWins, setBiggestWins] = useState([]);\r\n  const [biggestLosses, setBiggestLosses] = useState([]);\r\n\r\n  // Calculate profits or losses for each trade\r\n  useEffect(() => {\r\n    if (trades && trades.length > 0) {\r\n      // Sort trades by profits (positive) or losses (negative)\r\n      const sortedTrades = trades.slice().sort((a, b) => b.profit - a.profit);\r\n      const wins = sortedTrades.filter((trade) => trade.profit > 0).slice(0, 5); // Get top 5 biggest wins\r\n      const losses = sortedTrades\r\n        .filter((trade) => trade.profit < 0)\r\n        .slice(0, 5); // Get top 5 biggest losses\r\n      setBiggestWins(wins);\r\n      setBiggestLosses(losses);\r\n    }\r\n  }, [trades]);\r\n\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"wins-container\">\r\n        <h2>Biggest Wins</h2>\r\n        {biggestWins.length > 0 ? (\r\n          biggestWins.map((trade) => (\r\n            <div className=\"card\" key={trade.id}>\r\n              <p>{trade.symbol}</p>\r\n              <p className=\"profit\">{`+$${trade.profit}`}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No data available</p>\r\n        )}\r\n      </div>\r\n      <div className=\"losses-container\">\r\n        <h2>Biggest Losses</h2>\r\n        {biggestLosses.length > 0 ? (\r\n          biggestLosses.map((trade) => (\r\n            <div className=\"card\" key={trade.id}>\r\n              <p>{trade.symbol}</p>\r\n              <p className=\"loss\">{`-$${Math.abs(trade.profit)}`}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No data available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n\r\n/* import React from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ trades }) => {\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"card\">\r\n        <p>P/L</p>\r\n        <p className=\"menu\">::</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
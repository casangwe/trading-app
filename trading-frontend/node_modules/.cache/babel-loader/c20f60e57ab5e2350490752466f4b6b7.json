{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Calender.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport { FaArrowUp, FaArrowDown } from \"react-icons/fa\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash } from \"../func/functions\";\nconst Calender = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [modalDetails, setModalDetails] = useState(null);\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"Error fetching Daily PNL data\");\n        console.error(\"Error fetching Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  const aggregateByMonth = () => {\n    const monthlyData = {};\n    dailyPNLData.forEach((entry, index) => {\n      const date = new Date(entry.entry_date);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n\n      // Check if this is the first entry for the month\n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = {\n          initial_balance: entry.balance,\n          // First entry's balance is the initial balance\n          balance: entry.balance,\n          roi: 0,\n          // Initial ROI starts at 0\n          open_cash: entry.open_cash,\n          close_cash: entry.close_cash\n        };\n      } else {\n        // Update balance and cash values\n        monthlyData[monthKey].balance += entry.balance;\n        monthlyData[monthKey].open_cash += entry.open_cash;\n        monthlyData[monthKey].close_cash += entry.close_cash;\n\n        // Update ROI: Calculate it based on the initial balance for the month\n        const currentBalance = monthlyData[monthKey].balance;\n        const initialBalance = monthlyData[monthKey].initial_balance;\n        monthlyData[monthKey].roi = (currentBalance - initialBalance) / initialBalance * 100;\n      }\n\n      // If you need to carry the balance forward:\n      if (index < dailyPNLData.length - 1) {\n        dailyPNLData[index + 1].balance += entry.balance;\n      }\n    });\n    console.log(monthlyData);\n    return monthlyData;\n  };\n\n  // const aggregateByMonth = () => {\n  //   const monthlyData = {};\n\n  //   dailyPNLData.forEach((entry, index) => {\n  //     const date = new Date(entry.entry_date);\n  //     const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n\n  //     // Initialize monthly data if not present\n  //     if (!monthlyData[monthKey]) {\n  //       monthlyData[monthKey] = {\n  //         balance: entry.balance,\n  //         roi: entry.roi,\n  //         open_cash: entry.open_cash,\n  //         close_cash: entry.close_cash,\n  //       };\n  //     } else {\n  //       monthlyData[monthKey].balance += entry.balance;\n  //       monthlyData[monthKey].roi += entry.roi;\n  //       monthlyData[monthKey].open_cash += entry.open_cash;\n  //       monthlyData[monthKey].close_cash += entry.close_cash;\n  //     }\n\n  //     // If you need to carry the balance forward:\n  //     if (index < dailyPNLData.length - 1) {\n  //       dailyPNLData[index + 1].balance += entry.balance;\n  //     }\n  //   });\n\n  //   console.log(monthlyData);\n  //   return monthlyData;\n  // };\n\n  // const aggregateByMonth = () => {\n  //   const monthlyData = {};\n\n  //   dailyPNLData.forEach((entry) => {\n  //     const date = new Date(entry.entry_date);\n  //     const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n\n  //     // Initialize monthly data if not present\n  //     if (!monthlyData[monthKey]) {\n  //       monthlyData[monthKey] = {\n  //         balance: 0,\n  //         roi: 0,\n  //         open_cash: 0,\n  //         close_cash: 0,\n  //       };\n  //     }\n\n  //     // Helper function to parse and accumulate totals\n  //     const accumulateTotals = (str) => {\n  //       const numbers = str.split(\"-\").map(Number);\n  //       let cumulativeTotal = 0;\n  //       return numbers.reduce((acc, current) => {\n  //         cumulativeTotal += current;\n  //         return cumulativeTotal;\n  //       }, 0);\n  //     };\n\n  //     // Aggregate each field\n  //     monthlyData[monthKey].balance += accumulateTotals(entry.balance);\n  //     monthlyData[monthKey].roi += accumulateTotals(entry.roi);\n  //     monthlyData[monthKey].open_cash += accumulateTotals(entry.open_cash);\n  //     monthlyData[monthKey].close_cash += accumulateTotals(entry.close_cash);\n  //   });\n\n  //   console.log(monthlyData);\n\n  //   return monthlyData;\n  // };\n\n  // Aggregates PNL data by month\n  // const aggregateByMonth = () => {\n  //   const monthlyData = {};\n\n  //   dailyPNLData.forEach((entry) => {\n  //     const date = new Date(entry.entry_date);\n  //     const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n\n  //     if (!monthlyData[monthKey]) {\n  //       monthlyData[monthKey] = {\n  //         balance: 0,\n  //         roi: 0,\n  //         open_cash: 0,\n  //         close_cash: 0,\n  //       };\n  //     }\n\n  //     monthlyData[monthKey].balance += entry.balance;\n  //     monthlyData[monthKey].roi += entry.roi;\n  //     monthlyData[monthKey].open_cash += entry.open_cash;\n  //     monthlyData[monthKey].close_cash += entry.close_cash;\n  //     console.log(\n  //       \"Monthly Balance: \",\n  //       (monthlyData[monthKey].balance += entry.balance)\n  //     );\n  //   });\n\n  //   console.log(monthlyData);\n\n  //   return monthlyData;\n  // };\n\n  // Aggregates PNL data by year\n  const aggregateByYear = () => {\n    const yearlyData = {};\n    dailyPNLData.forEach(entry => {\n      const date = new Date(entry.entry_date);\n      const yearKey = date.getFullYear();\n      if (!yearlyData[yearKey]) {\n        yearlyData[yearKey] = {\n          balance: 0,\n          roi: 0,\n          open_cash: 0,\n          close_cash: 0\n        };\n      }\n      yearlyData[yearKey].balance += entry.balance;\n      yearlyData[yearKey].roi += entry.roi;\n      yearlyData[yearKey].open_cash += entry.open_cash;\n      yearlyData[yearKey].close_cash += entry.close_cash;\n    });\n    return yearlyData;\n  };\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    if (view === \"month\") {\n      const pnlEntry = dailyPNLData.find(pnl => pnl.entry_date === formattedDate);\n      if (pnlEntry) {\n        const icon = pnlEntry.open_cash < pnlEntry.close_cash ? /*#__PURE__*/React.createElement(FaArrowUp, {\n          style: {\n            color: \"#4caf50\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }\n        }) : /*#__PURE__*/React.createElement(FaArrowDown, {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pnl-tile\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }\n        }, icon), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }\n        }, formatCash(pnlEntry.balance)), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }\n        }, pnlEntry.roi, \"%\"));\n      }\n    } else if (view === \"year\") {\n      const monthlyData = aggregateByMonth();\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      const monthlyEntry = monthlyData[monthKey];\n      if (monthlyEntry) {\n        const icon = monthlyEntry.open_cash < monthlyEntry.close_cash ? /*#__PURE__*/React.createElement(FaArrowUp, {\n          style: {\n            color: \"#4caf50\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }\n        }) : /*#__PURE__*/React.createElement(FaArrowDown, {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pnl-tile\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }\n        }, icon), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }\n        }, formatCash(monthlyEntry.balance)), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }\n        }, monthlyEntry.roi, \"%\"));\n      }\n    } else if (view === \"decade\") {\n      const yearlyData = aggregateByYear();\n      const yearKey = date.getFullYear();\n      const yearlyEntry = yearlyData[yearKey];\n      if (yearlyEntry) {\n        const icon = yearlyEntry.open_cash < yearlyEntry.close_cash ? /*#__PURE__*/React.createElement(FaArrowUp, {\n          style: {\n            color: \"#4caf50\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }\n        }) : /*#__PURE__*/React.createElement(FaArrowDown, {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pnl-tile\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }\n        }, icon), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }\n        }, formatCash(yearlyEntry.balance)), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }\n        }, yearlyEntry.roi, \"%\"));\n      }\n    }\n    return null;\n  };\n  const handleTileClick = (date, view) => {\n    let modalDetails = null;\n    if (view === \"month\") {\n      const formattedDate = date.toISOString().split(\"T\")[0];\n      const pnlEntry = dailyPNLData.find(pnl => pnl.entry_date === formattedDate);\n      if (pnlEntry) {\n        const formattedDateForDisplay = `${date.getMonth() + 1}/${date.getDate()}`;\n        modalDetails = {\n          date: formattedDateForDisplay,\n          ...pnlEntry\n        };\n      }\n    } else if (view === \"year\") {\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      const monthlyData = aggregateByMonth();\n      const monthlyEntry = monthlyData[monthKey];\n      if (monthlyEntry) {\n        modalDetails = {\n          date: monthKey,\n          ...monthlyEntry\n        };\n      }\n    } else if (view === \"decade\") {\n      const yearKey = date.getFullYear();\n      const yearlyData = aggregateByYear();\n      const yearlyEntry = yearlyData[yearKey];\n      if (yearlyEntry) {\n        modalDetails = {\n          date: yearKey,\n          ...yearlyEntry\n        };\n      }\n    }\n    if (modalDetails) {\n      setModalDetails(modalDetails);\n    }\n  };\n  const handleCloseModal = () => {\n    setModalDetails(null);\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    onChange: setSelectedDate,\n    value: selectedDate,\n    tileContent: tileContent,\n    onClickDay: date => handleTileClick(date, \"month\"),\n    onActiveStartDateChange: ({\n      activeStartDate,\n      view\n    }) => handleTileClick(activeStartDate, view),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }), modalDetails && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 15\n    }\n  }, modalDetails.date), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-button\",\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 15\n    }\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }\n  }, \"Balance:\"), \" \", formatCash(modalDetails.balance)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }\n  }, \"RoI:\"), \" \", modalDetails.roi, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 17\n    }\n  }, \"Close Cash:\"), \" \", formatCash(modalDetails.close_cash)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }\n  }, \"Open Cash:\"), \" \", formatCash(modalDetails.open_cash))))), dailyPNLData.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 37\n    }\n  }, \"No P/L\"));\n};\nexport default Calender;\n\n// import React, { useState, useEffect } from \"react\";\n// import Calendar from \"react-calendar\";\n// import { FaArrowUp, FaArrowDown } from \"react-icons/fa\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash } from \"../func/functions\";\n\n// const Calender = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [selectedDate, setSelectedDate] = useState(new Date());\n//   const [modalDetails, setModalDetails] = useState(null);\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   const tileContent = ({ date, view }) => {\n//     if (view === \"month\") {\n//       const formattedDate = date.toISOString().split(\"T\")[0];\n//       const pnlEntry = dailyPNLData.find(\n//         (pnl) => pnl.entry_date === formattedDate\n//       );\n\n//       if (pnlEntry) {\n//         // Determine the icon and color based on open_cash and close_cash\n//         const icon =\n//           pnlEntry.open_cash < pnlEntry.close_cash ? (\n//             <FaArrowUp style={{ color: \"#4caf50\" }} />\n//           ) : (\n//             <FaArrowDown style={{ color: \"red\" }} />\n//           );\n\n//         return (\n//           <div className=\"pnl-tile\">\n//             <div>{icon}</div>\n//             <div>{formatCash(pnlEntry.balance)}</div>\n//             <div>{pnlEntry.roi}%</div>\n//           </div>\n//         );\n//       }\n//     }\n//     return null;\n//   };\n\n//   const handleTileClick = (date) => {\n//     const formattedDate = date.toISOString().split(\"T\")[0];\n//     const pnlEntry = dailyPNLData.find(\n//       (pnl) => pnl.entry_date === formattedDate\n//     );\n\n//     if (pnlEntry) {\n//       // Format the date to MM/DD\n//       const formattedDateForDisplay = `${\n//         date.getMonth() + 1\n//       }/${date.getDate()}`;\n\n//       setModalDetails({\n//         date: formattedDateForDisplay,\n//         ...pnlEntry,\n//       });\n//     }\n//   };\n\n//   const handleCloseModal = () => {\n//     setModalDetails(null);\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>{error}</p>;\n\n//   return (\n//     <div className=\"calendar-container\">\n//       <Calendar\n//         onChange={setSelectedDate}\n//         value={selectedDate}\n//         tileContent={tileContent}\n//         onClickDay={handleTileClick}\n//       />\n//       {modalDetails && (\n//         <div className=\"modal-container\">\n//           <div className=\"modal-content\">\n//             <div className=\"modal-header\">\n//               <h2>{modalDetails.date}</h2>\n//               <button className=\"close-button\" onClick={handleCloseModal}>\n//                 &times;\n//               </button>\n//             </div>\n//             <div className=\"modal-body\">\n//               <p>\n//                 <strong>Balance:</strong> {formatCash(modalDetails.balance)}\n//               </p>\n//               <p>\n//                 <strong>RoI:</strong> {modalDetails.roi}%\n//               </p>\n//               <p>\n//                 <strong>Close Cash:</strong>{\" \"}\n//                 {formatCash(modalDetails.close_cash)}\n//               </p>\n//               <p>\n//                 <strong>Open Cash:</strong> {formatCash(modalDetails.open_cash)}\n//               </p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//       {dailyPNLData.length === 0 && <p>No P/L</p>}\n//     </div>\n//   );\n// };\n\n// export default Calender;","map":{"version":3,"names":["React","useState","useEffect","Calendar","FaArrowUp","FaArrowDown","fetchDailyPnls","formatCash","Calender","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","selectedDate","setSelectedDate","Date","modalDetails","setModalDetails","fetchDailyPNLData","data","console","aggregateByMonth","monthlyData","forEach","entry","index","date","entry_date","monthKey","getFullYear","getMonth","initial_balance","balance","roi","open_cash","close_cash","currentBalance","initialBalance","length","log","aggregateByYear","yearlyData","yearKey","tileContent","view","formattedDate","toISOString","split","pnlEntry","find","pnl","icon","createElement","style","color","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","monthlyEntry","yearlyEntry","handleTileClick","formattedDateForDisplay","getDate","handleCloseModal","onChange","value","onClickDay","onActiveStartDateChange","activeStartDate","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Calender.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { FaArrowUp, FaArrowDown } from \"react-icons/fa\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash } from \"../func/functions\";\r\n\r\nconst Calender = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [modalDetails, setModalDetails] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"Error fetching Daily PNL data\");\r\n        console.error(\"Error fetching Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  const aggregateByMonth = () => {\r\n    const monthlyData = {};\r\n\r\n    dailyPNLData.forEach((entry, index) => {\r\n      const date = new Date(entry.entry_date);\r\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n\r\n      // Check if this is the first entry for the month\r\n      if (!monthlyData[monthKey]) {\r\n        monthlyData[monthKey] = {\r\n          initial_balance: entry.balance, // First entry's balance is the initial balance\r\n          balance: entry.balance,\r\n          roi: 0, // Initial ROI starts at 0\r\n          open_cash: entry.open_cash,\r\n          close_cash: entry.close_cash,\r\n        };\r\n      } else {\r\n        // Update balance and cash values\r\n        monthlyData[monthKey].balance += entry.balance;\r\n        monthlyData[monthKey].open_cash += entry.open_cash;\r\n        monthlyData[monthKey].close_cash += entry.close_cash;\r\n\r\n        // Update ROI: Calculate it based on the initial balance for the month\r\n        const currentBalance = monthlyData[monthKey].balance;\r\n        const initialBalance = monthlyData[monthKey].initial_balance;\r\n        monthlyData[monthKey].roi =\r\n          ((currentBalance - initialBalance) / initialBalance) * 100;\r\n      }\r\n\r\n      // If you need to carry the balance forward:\r\n      if (index < dailyPNLData.length - 1) {\r\n        dailyPNLData[index + 1].balance += entry.balance;\r\n      }\r\n    });\r\n\r\n    console.log(monthlyData);\r\n    return monthlyData;\r\n  };\r\n\r\n  // const aggregateByMonth = () => {\r\n  //   const monthlyData = {};\r\n\r\n  //   dailyPNLData.forEach((entry, index) => {\r\n  //     const date = new Date(entry.entry_date);\r\n  //     const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n\r\n  //     // Initialize monthly data if not present\r\n  //     if (!monthlyData[monthKey]) {\r\n  //       monthlyData[monthKey] = {\r\n  //         balance: entry.balance,\r\n  //         roi: entry.roi,\r\n  //         open_cash: entry.open_cash,\r\n  //         close_cash: entry.close_cash,\r\n  //       };\r\n  //     } else {\r\n  //       monthlyData[monthKey].balance += entry.balance;\r\n  //       monthlyData[monthKey].roi += entry.roi;\r\n  //       monthlyData[monthKey].open_cash += entry.open_cash;\r\n  //       monthlyData[monthKey].close_cash += entry.close_cash;\r\n  //     }\r\n\r\n  //     // If you need to carry the balance forward:\r\n  //     if (index < dailyPNLData.length - 1) {\r\n  //       dailyPNLData[index + 1].balance += entry.balance;\r\n  //     }\r\n  //   });\r\n\r\n  //   console.log(monthlyData);\r\n  //   return monthlyData;\r\n  // };\r\n\r\n  // const aggregateByMonth = () => {\r\n  //   const monthlyData = {};\r\n\r\n  //   dailyPNLData.forEach((entry) => {\r\n  //     const date = new Date(entry.entry_date);\r\n  //     const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n\r\n  //     // Initialize monthly data if not present\r\n  //     if (!monthlyData[monthKey]) {\r\n  //       monthlyData[monthKey] = {\r\n  //         balance: 0,\r\n  //         roi: 0,\r\n  //         open_cash: 0,\r\n  //         close_cash: 0,\r\n  //       };\r\n  //     }\r\n\r\n  //     // Helper function to parse and accumulate totals\r\n  //     const accumulateTotals = (str) => {\r\n  //       const numbers = str.split(\"-\").map(Number);\r\n  //       let cumulativeTotal = 0;\r\n  //       return numbers.reduce((acc, current) => {\r\n  //         cumulativeTotal += current;\r\n  //         return cumulativeTotal;\r\n  //       }, 0);\r\n  //     };\r\n\r\n  //     // Aggregate each field\r\n  //     monthlyData[monthKey].balance += accumulateTotals(entry.balance);\r\n  //     monthlyData[monthKey].roi += accumulateTotals(entry.roi);\r\n  //     monthlyData[monthKey].open_cash += accumulateTotals(entry.open_cash);\r\n  //     monthlyData[monthKey].close_cash += accumulateTotals(entry.close_cash);\r\n  //   });\r\n\r\n  //   console.log(monthlyData);\r\n\r\n  //   return monthlyData;\r\n  // };\r\n\r\n  // Aggregates PNL data by month\r\n  // const aggregateByMonth = () => {\r\n  //   const monthlyData = {};\r\n\r\n  //   dailyPNLData.forEach((entry) => {\r\n  //     const date = new Date(entry.entry_date);\r\n  //     const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n\r\n  //     if (!monthlyData[monthKey]) {\r\n  //       monthlyData[monthKey] = {\r\n  //         balance: 0,\r\n  //         roi: 0,\r\n  //         open_cash: 0,\r\n  //         close_cash: 0,\r\n  //       };\r\n  //     }\r\n\r\n  //     monthlyData[monthKey].balance += entry.balance;\r\n  //     monthlyData[monthKey].roi += entry.roi;\r\n  //     monthlyData[monthKey].open_cash += entry.open_cash;\r\n  //     monthlyData[monthKey].close_cash += entry.close_cash;\r\n  //     console.log(\r\n  //       \"Monthly Balance: \",\r\n  //       (monthlyData[monthKey].balance += entry.balance)\r\n  //     );\r\n  //   });\r\n\r\n  //   console.log(monthlyData);\r\n\r\n  //   return monthlyData;\r\n  // };\r\n\r\n  // Aggregates PNL data by year\r\n  const aggregateByYear = () => {\r\n    const yearlyData = {};\r\n\r\n    dailyPNLData.forEach((entry) => {\r\n      const date = new Date(entry.entry_date);\r\n      const yearKey = date.getFullYear();\r\n\r\n      if (!yearlyData[yearKey]) {\r\n        yearlyData[yearKey] = {\r\n          balance: 0,\r\n          roi: 0,\r\n          open_cash: 0,\r\n          close_cash: 0,\r\n        };\r\n      }\r\n\r\n      yearlyData[yearKey].balance += entry.balance;\r\n      yearlyData[yearKey].roi += entry.roi;\r\n      yearlyData[yearKey].open_cash += entry.open_cash;\r\n      yearlyData[yearKey].close_cash += entry.close_cash;\r\n    });\r\n\r\n    return yearlyData;\r\n  };\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    const formattedDate = date.toISOString().split(\"T\")[0];\r\n\r\n    if (view === \"month\") {\r\n      const pnlEntry = dailyPNLData.find(\r\n        (pnl) => pnl.entry_date === formattedDate\r\n      );\r\n\r\n      if (pnlEntry) {\r\n        const icon =\r\n          pnlEntry.open_cash < pnlEntry.close_cash ? (\r\n            <FaArrowUp style={{ color: \"#4caf50\" }} />\r\n          ) : (\r\n            <FaArrowDown style={{ color: \"red\" }} />\r\n          );\r\n\r\n        return (\r\n          <div className=\"pnl-tile\">\r\n            <div>{icon}</div>\r\n            <div>{formatCash(pnlEntry.balance)}</div>\r\n            <div>{pnlEntry.roi}%</div>\r\n          </div>\r\n        );\r\n      }\r\n    } else if (view === \"year\") {\r\n      const monthlyData = aggregateByMonth();\r\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n      const monthlyEntry = monthlyData[monthKey];\r\n\r\n      if (monthlyEntry) {\r\n        const icon =\r\n          monthlyEntry.open_cash < monthlyEntry.close_cash ? (\r\n            <FaArrowUp style={{ color: \"#4caf50\" }} />\r\n          ) : (\r\n            <FaArrowDown style={{ color: \"red\" }} />\r\n          );\r\n\r\n        return (\r\n          <div className=\"pnl-tile\">\r\n            <div>{icon}</div>\r\n            <div>{formatCash(monthlyEntry.balance)}</div>\r\n            <div>{monthlyEntry.roi}%</div>\r\n          </div>\r\n        );\r\n      }\r\n    } else if (view === \"decade\") {\r\n      const yearlyData = aggregateByYear();\r\n      const yearKey = date.getFullYear();\r\n      const yearlyEntry = yearlyData[yearKey];\r\n\r\n      if (yearlyEntry) {\r\n        const icon =\r\n          yearlyEntry.open_cash < yearlyEntry.close_cash ? (\r\n            <FaArrowUp style={{ color: \"#4caf50\" }} />\r\n          ) : (\r\n            <FaArrowDown style={{ color: \"red\" }} />\r\n          );\r\n\r\n        return (\r\n          <div className=\"pnl-tile\">\r\n            <div>{icon}</div>\r\n            <div>{formatCash(yearlyEntry.balance)}</div>\r\n            <div>{yearlyEntry.roi}%</div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleTileClick = (date, view) => {\r\n    let modalDetails = null;\r\n\r\n    if (view === \"month\") {\r\n      const formattedDate = date.toISOString().split(\"T\")[0];\r\n      const pnlEntry = dailyPNLData.find(\r\n        (pnl) => pnl.entry_date === formattedDate\r\n      );\r\n\r\n      if (pnlEntry) {\r\n        const formattedDateForDisplay = `${\r\n          date.getMonth() + 1\r\n        }/${date.getDate()}`;\r\n        modalDetails = { date: formattedDateForDisplay, ...pnlEntry };\r\n      }\r\n    } else if (view === \"year\") {\r\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n      const monthlyData = aggregateByMonth();\r\n      const monthlyEntry = monthlyData[monthKey];\r\n\r\n      if (monthlyEntry) {\r\n        modalDetails = { date: monthKey, ...monthlyEntry };\r\n      }\r\n    } else if (view === \"decade\") {\r\n      const yearKey = date.getFullYear();\r\n      const yearlyData = aggregateByYear();\r\n      const yearlyEntry = yearlyData[yearKey];\r\n\r\n      if (yearlyEntry) {\r\n        modalDetails = { date: yearKey, ...yearlyEntry };\r\n      }\r\n    }\r\n\r\n    if (modalDetails) {\r\n      setModalDetails(modalDetails);\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setModalDetails(null);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <Calendar\r\n        onChange={setSelectedDate}\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        onClickDay={(date) => handleTileClick(date, \"month\")}\r\n        onActiveStartDateChange={({ activeStartDate, view }) =>\r\n          handleTileClick(activeStartDate, view)\r\n        }\r\n      />\r\n      {modalDetails && (\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h2>{modalDetails.date}</h2>\r\n              <button className=\"close-button\" onClick={handleCloseModal}>\r\n                &times;\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>\r\n                <strong>Balance:</strong> {formatCash(modalDetails.balance)}\r\n              </p>\r\n              <p>\r\n                <strong>RoI:</strong> {modalDetails.roi}%\r\n              </p>\r\n              <p>\r\n                <strong>Close Cash:</strong>{\" \"}\r\n                {formatCash(modalDetails.close_cash)}\r\n              </p>\r\n              <p>\r\n                <strong>Open Cash:</strong> {formatCash(modalDetails.open_cash)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {dailyPNLData.length === 0 && <p>No P/L</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calender;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Calendar from \"react-calendar\";\r\n// import { FaArrowUp, FaArrowDown } from \"react-icons/fa\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash } from \"../func/functions\";\r\n\r\n// const Calender = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [selectedDate, setSelectedDate] = useState(new Date());\r\n//   const [modalDetails, setModalDetails] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   const tileContent = ({ date, view }) => {\r\n//     if (view === \"month\") {\r\n//       const formattedDate = date.toISOString().split(\"T\")[0];\r\n//       const pnlEntry = dailyPNLData.find(\r\n//         (pnl) => pnl.entry_date === formattedDate\r\n//       );\r\n\r\n//       if (pnlEntry) {\r\n//         // Determine the icon and color based on open_cash and close_cash\r\n//         const icon =\r\n//           pnlEntry.open_cash < pnlEntry.close_cash ? (\r\n//             <FaArrowUp style={{ color: \"#4caf50\" }} />\r\n//           ) : (\r\n//             <FaArrowDown style={{ color: \"red\" }} />\r\n//           );\r\n\r\n//         return (\r\n//           <div className=\"pnl-tile\">\r\n//             <div>{icon}</div>\r\n//             <div>{formatCash(pnlEntry.balance)}</div>\r\n//             <div>{pnlEntry.roi}%</div>\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n//     return null;\r\n//   };\r\n\r\n//   const handleTileClick = (date) => {\r\n//     const formattedDate = date.toISOString().split(\"T\")[0];\r\n//     const pnlEntry = dailyPNLData.find(\r\n//       (pnl) => pnl.entry_date === formattedDate\r\n//     );\r\n\r\n//     if (pnlEntry) {\r\n//       // Format the date to MM/DD\r\n//       const formattedDateForDisplay = `${\r\n//         date.getMonth() + 1\r\n//       }/${date.getDate()}`;\r\n\r\n//       setModalDetails({\r\n//         date: formattedDateForDisplay,\r\n//         ...pnlEntry,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setModalDetails(null);\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n//   if (error) return <p>{error}</p>;\r\n\r\n//   return (\r\n//     <div className=\"calendar-container\">\r\n//       <Calendar\r\n//         onChange={setSelectedDate}\r\n//         value={selectedDate}\r\n//         tileContent={tileContent}\r\n//         onClickDay={handleTileClick}\r\n//       />\r\n//       {modalDetails && (\r\n//         <div className=\"modal-container\">\r\n//           <div className=\"modal-content\">\r\n//             <div className=\"modal-header\">\r\n//               <h2>{modalDetails.date}</h2>\r\n//               <button className=\"close-button\" onClick={handleCloseModal}>\r\n//                 &times;\r\n//               </button>\r\n//             </div>\r\n//             <div className=\"modal-body\">\r\n//               <p>\r\n//                 <strong>Balance:</strong> {formatCash(modalDetails.balance)}\r\n//               </p>\r\n//               <p>\r\n//                 <strong>RoI:</strong> {modalDetails.roi}%\r\n//               </p>\r\n//               <p>\r\n//                 <strong>Close Cash:</strong>{\" \"}\r\n//                 {formatCash(modalDetails.close_cash)}\r\n//               </p>\r\n//               <p>\r\n//                 <strong>Open Cash:</strong> {formatCash(modalDetails.open_cash)}\r\n//               </p>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {dailyPNLData.length === 0 && <p>No P/L</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Calender;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
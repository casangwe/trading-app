{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\analysis\\\\AnalysisDisplay.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\nimport { performAnalysis } from \"./AnalysisGet\";\nimport { Line } from \"rc-progress\";\nconst AnalysisDisplay = () => {\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const results = await performAnalysis();\n        setAnalysisResults(results);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    fetchData();\n  }, []);\n  if (error) {\n    console.error(\"Error fetching analysis data:\", error);\n  }\n  if (!analysisResults && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  const {\n    absoluteReturn = 0,\n    sharpeRatio = 0,\n    winRate = 0,\n    numberOfTrades = 0,\n    winningTrades = 0,\n    losingTrades = 0,\n    averageWin = 0,\n    averageLoss = 0\n  } = analysisResults || {};\n  const total = averageWin + averageLoss;\n  const winPercent = total > 0 ? averageWin / total * 100 : 50;\n  const formatCash = value => `$${value.toFixed(2)}`;\n  const data = [{\n    name: \"Average Win\",\n    value: winPercent,\n    color: \"#4a90e2\",\n    amount: averageWin\n  }, {\n    name: \"Average Loss\",\n    value: 100 - winPercent,\n    color: \"#f44336\",\n    amount: averageLoss\n  }];\n  const winRateData = [{\n    name: \"Win Rate\",\n    value: winRate,\n    color: \"#4a90e2\"\n  }, {\n    name: \"Remaining\",\n    value: 100 - winRate,\n    color: \"#d8e3ef\"\n  }];\n  const renderPieChart = (chartData, tooltipFormat) => /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 150,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PieChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Pie, {\n    data: chartData,\n    innerRadius: 50,\n    outerRadius: 70,\n    startAngle: 90,\n    endAngle: -270,\n    stroke: \"none\",\n    dataKey: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, chartData.map((entry, index) => /*#__PURE__*/React.createElement(Cell, {\n    key: `cell-${index}`,\n    fill: entry.color,\n    style: {\n      transition: \"filter 0.3s\",\n      cursor: \"pointer\"\n    },\n    onMouseEnter: e => {\n      e.currentTarget.style.filter = `drop-shadow(0 0 5px ${entry.color})`;\n    },\n    onMouseLeave: e => {\n      e.currentTarget.style.filter = \"none\";\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: false,\n    content: tooltipFormat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Trades\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, numberOfTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Wins\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, winningTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Losses\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, losingTrades))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, renderPieChart(winRateData, ({\n    payload\n  }) => {\n    if (payload && payload.length) {\n      const {\n        name,\n        value\n      } = payload[0].payload;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tooltip-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }, name), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, `${value.toFixed(2)}%`));\n    }\n    return null;\n  }), renderPieChart(data, ({\n    payload\n  }) => {\n    if (payload && payload.length) {\n      const {\n        name,\n        amount\n      } = payload[0].payload;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tooltip-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }, name), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, formatCash(amount)));\n    }\n    return null;\n  })));\n};\nexport default AnalysisDisplay;\n\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   BarChart,\n//   Bar,\n//   XAxis,\n//   YAxis,\n//   Tooltip,\n//   PieChart,\n//   Pie,\n//   Cell,\n//   ResponsiveContainer,\n// } from \"recharts\";\n// import { performAnalysis } from \"./AnalysisGet\";\n// import { Line } from \"rc-progress\";\n\n// const AnalysisDisplay = () => {\n//   const [analysisResults, setAnalysisResults] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await performAnalysis();\n//         setAnalysisResults(results);\n//       } catch (err) {\n//         setError(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   if (error) {\n//     console.error(\"Error fetching analysis data:\", error);\n//   }\n\n//   if (!analysisResults && !error) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const {\n//     absoluteReturn = 0,\n//     sharpeRatio = 0,\n//     winRate = 0,\n//     numberOfTrades = 0,\n//     winningTrades = 0,\n//     losingTrades = 0,\n//     averageWin = 0,\n//     averageLoss = 0,\n//     riskRewardRatio = 0,\n//   } = analysisResults || {};\n//   const total = averageWin + averageLoss;\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\n//   const absoluteReturnPercentage = absoluteReturn * 100;\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\n\n//   const data = [\n//     {\n//       name: \"Average Win\",\n//       value: winPercent,\n//       color: \"#4a90e2\",\n//       amount: averageWin,\n//     },\n//     {\n//       name: \"Average Loss\",\n//       value: 100 - winPercent,\n//       color: \"#f44336\",\n//       amount: averageLoss,\n//     },\n//   ];\n\n//   const winRateData = [\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\n//   ];\n//   const formatValue = (value, isCurrency = false) => {\n//     if (isNaN(value) || value === undefined) {\n//       return isCurrency ? \"$0.00\" : \"N/A\";\n//     }\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\n//   };\n//   return (\n//     <div className=\"analysis-container\">\n//       <div className=\"analysis-row\">\n//         <div className=\"analysis-circle\">\n//           <h3>Trades</h3>\n//           <p>{numberOfTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Wins</h3>\n//           <p>{winningTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Losses</h3>\n//           <p>{losingTrades}</p>\n//         </div>\n//       </div>\n\n//       <div className=\"analysis-metric-row\">\n//         {/* Absolute Return Metric */}\n//         <div className=\"analysis-metric\">\n//           <h3>Absolute Return</h3>\n//           <p>{`${absoluteReturn.toFixed(2) * 100}%`}</p>\n//           <ResponsiveContainer width=\"100%\" height={40}>\n//             <BarChart\n//               data={[\n//                 {\n//                   name: \"Abs. Return\",\n//                   value: absoluteReturnPercentage.toFixed(2),\n//                 },\n//               ]}\n//               layout=\"vertical\"\n//             >\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\n//               <Bar\n//                 dataKey=\"value\"\n//                 fill={absoluteReturnPercentage >= 50 ? \"#4a90e2\" : \"#e74c3c\"}\n//                 background={{\n//                   fill: \"#d8e3ef\",\n//                   radius: [5, 5, 5, 5],\n//                 }}\n//                 isAnimationActive={true}\n//                 radius={[5, 5, 5, 5]}\n//                 barSize={55}\n//               />\n//             </BarChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Sharpe Ratio Metric */}\n//         <div className=\"analysis-metric\">\n//           <h3>Sharpe Ratio</h3>\n//           <p>{sharpeRatio.toFixed(2)}</p>\n//           <ResponsiveContainer width=\"100%\" height={40}>\n//             <BarChart\n//               data={[{ name: \"Sharpe Ratio\", value: sharpeRatioPercentage }]}\n//               layout=\"vertical\"\n//             >\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\n//               <Bar\n//                 dataKey=\"value\"\n//                 fill={sharpeRatio >= 3 ? \"#4a90e2\" : \"#f44336\"}\n//                 background={{\n//                   fill: \"#d8e3ef\",\n//                   radius: [5, 5, 5, 5],\n//                 }}\n//                 isAnimationActive={true}\n//                 radius={[5, 5, 5, 5]}\n//                 barSize={55}\n//               />\n//             </BarChart>\n//           </ResponsiveContainer>\n//         </div>\n//       </div>\n\n//       {/* <div className=\"analysis-metric-row\">\n//         <div className=\"analysis-metric\">\n//           <h3>Absolute Return</h3>\n//           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\n//           <ResponsiveContainer width=\"100%\" height={40}>\n//             <BarChart\n//               data={[\n//                 { name: \"Absolute Return\", value: absoluteReturnPercentage },\n//               ]}\n//               layout=\"vertical\"\n//             >\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\n//               <Tooltip cursor={false} />\n//               <Bar\n//                 dataKey=\"value\"\n//                 fill=\"#4a90e2\"\n//                 background={{ fill: \"#d8e3ef\" }}\n//                 isAnimationActive={true}\n//               />\n//             </BarChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         <div className=\"analysis-metric\">\n//           <h3>Sharpe Ratio</h3>\n//           <p>{sharpeRatio.toFixed(2)}</p>\n//           <ResponsiveContainer width=\"100%\" height={40}>\n//             <BarChart\n//               data={[{ name: \"Sharpe Ratio\", value: sharpeRatioPercentage }]}\n//               layout=\"vertical\"\n//             >\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\n//               <Tooltip cursor={false} />\n//               <Bar\n//                 dataKey=\"value\"\n//                 fill=\"#4a90e2\"\n//                 background={{ fill: \"#d8e3ef\" }}\n//                 isAnimationActive={true}\n//               />\n//             </BarChart>\n//           </ResponsiveContainer>\n//         </div>\n//       </div> */}\n\n//       <div className=\"analysis-circle-row\">\n//         <ResponsiveContainer width=\"100%\" height={150}>\n//           <PieChart>\n//             <Pie\n//               data={winRateData}\n//               innerRadius={50}\n//               outerRadius={70}\n//               startAngle={90}\n//               endAngle={-270}\n//               stroke=\"none\"\n//               dataKey=\"value\"\n//             >\n//               {winRateData.map((entry, index) => (\n//                 <Cell\n//                   key={`winrate-cell-${index}`}\n//                   fill={entry.color}\n//                   style={{\n//                     transition: \"filter 0.3s\",\n//                     cursor: entry.name === \"Win Rate\" ? \"pointer\" : \"default\",\n//                   }}\n//                   onMouseEnter={(e) => {\n//                     if (entry.name === \"Win Rate\") {\n//                       e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n//                     }\n//                   }}\n//                   onMouseLeave={(e) => {\n//                     e.currentTarget.style.filter = \"none\";\n//                   }}\n//                 />\n//               ))}\n//             </Pie>\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (\n//                   payload &&\n//                   payload.length &&\n//                   payload[0].payload.name === \"Win Rate\"\n//                 ) {\n//                   const { name, value } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{name}</p>\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//           </PieChart>\n//         </ResponsiveContainer>\n\n//         {/* Average Win and Loss */}\n//         <ResponsiveContainer width=\"100%\" height={150}>\n//           <PieChart>\n//             <Pie\n//               data={data}\n//               innerRadius={50}\n//               outerRadius={70}\n//               dataKey=\"value\"\n//               startAngle={90}\n//               endAngle={-270}\n//               stroke=\"none\"\n//             >\n//               {data.map((entry, index) => (\n//                 <Cell\n//                   key={`cell-${index}`}\n//                   fill={entry.color}\n//                   style={{\n//                     transition: \"filter 0.3s\",\n//                     cursor: \"pointer\",\n//                   }}\n//                   onMouseEnter={(e) => {\n//                     e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n//                   }}\n//                   onMouseLeave={(e) => {\n//                     e.currentTarget.style.filter = \"none\";\n//                   }}\n//                 />\n//               ))}\n//             </Pie>\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { name, amount } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{name}</p>\n//                       <p className=\"amount\">{formatCash(amount)}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//           </PieChart>\n//         </ResponsiveContainer>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AnalysisDisplay;\n\n// import React, { useState, useEffect } from \"react\";\n// import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\n// import { performAnalysis } from \"./AnalysisGet\";\n\n// const AnalysisDisplay = () => {\n//   const [analysisResults, setAnalysisResults] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await performAnalysis();\n//         setAnalysisResults(results);\n//       } catch (err) {\n//         setError(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   if (error) {\n//     console.error(\"Error fetching analysis data:\", error);\n//   }\n\n//   if (!analysisResults && !error) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const {\n//     averageWin = 0,\n//     averageLoss = 0,\n//     winRate = 0,\n//   } = analysisResults || {};\n//   const total = averageWin + averageLoss;\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\n\n//   const data = [\n//     {\n//       name: \"Average Win\",\n//       value: winPercent,\n//       color: \"#4a90e2\",\n//       amount: averageWin,\n//     },\n//     {\n//       name: \"Average Loss\",\n//       value: 100 - winPercent,\n//       color: \"#f44336\",\n//       amount: averageLoss,\n//     },\n//   ];\n\n//   const winRateData = [\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\n//   ];\n\n//   return (\n//     <div\n//       className=\"analysis-display-container\"\n//       style={{ width: \"150px\", margin: \"0 auto\" }}\n//     >\n//       {/* Main Chart for Average Win and Loss */}\n//       <ResponsiveContainer width=\"100%\" height={250}>\n//         <PieChart>\n//           <Pie\n//             data={data}\n//             innerRadius={50}\n//             outerRadius={70}\n//             dataKey=\"value\"\n//             startAngle={90}\n//             endAngle={-270}\n//             stroke=\"none\"\n//           >\n//             {data.map((entry, index) => (\n//               <Cell\n//                 key={`cell-${index}`}\n//                 fill={entry.color}\n//                 style={{\n//                   transition: \"filter 0.3s\",\n//                   cursor: \"pointer\",\n//                 }}\n//                 onMouseEnter={(e) => {\n//                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n//                 }}\n//                 onMouseLeave={(e) => {\n//                   e.currentTarget.style.filter = \"none\";\n//                 }}\n//               />\n//             ))}\n//           </Pie>\n//           <Tooltip\n//             cursor={false}\n//             content={({ payload }) => {\n//               if (payload && payload.length) {\n//                 const { name, amount } = payload[0].payload;\n//                 return (\n//                   <div className=\"tooltip-content\">\n//                     <p>{name}</p>\n//                     <p className=\"amount\">{formatCash(amount)}</p>\n//                   </div>\n//                 );\n//               }\n//               return null;\n//             }}\n//           />\n//         </PieChart>\n//       </ResponsiveContainer>\n\n//       <div style={{ marginTop: \"20px\" }}>\n//         <ResponsiveContainer width=\"100%\" height={150}>\n//           <PieChart>\n//             <Pie\n//               data={winRateData}\n//               innerRadius={50}\n//               outerRadius={70}\n//               startAngle={90}\n//               endAngle={-270}\n//               stroke=\"none\"\n//               dataKey=\"value\"\n//             >\n//               {winRateData.map((entry, index) => (\n//                 <Cell key={`winrate-cell-${index}`} fill={entry.color} />\n//               ))}\n//             </Pie>\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { name, value } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{name}</p>\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//           </PieChart>\n//         </ResponsiveContainer>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AnalysisDisplay;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\n// // import { performAnalysis } from \"./AnalysisGet\";\n\n// // const AnalysisDisplay = () => {\n// //   const [analysisResults, setAnalysisResults] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const results = await performAnalysis();\n// //         setAnalysisResults(results);\n// //       } catch (err) {\n// //         setError(err);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, []);\n\n// //   if (error) {\n// //     console.error(\"Error fetching analysis data:\", error);\n// //   }\n\n// //   if (!analysisResults && !error) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   const { averageWin = 0, averageLoss = 0 } = analysisResults || {};\n// //   const total = averageWin + averageLoss;\n// //   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\n// //   const formatCash = (value) => `$${value.toFixed(2)}`;\n\n// //   const data = [\n// //     {\n// //       name: \"Average Win\",\n// //       value: winPercent,\n// //       color: \"#4a90e2\",\n// //       amount: averageWin,\n// //     },\n// //     {\n// //       name: \"Average Loss\",\n// //       value: 100 - winPercent,\n// //       color: \"#f44336\",\n// //       amount: averageLoss,\n// //     },\n// //   ];\n\n// //   return (\n// //     <div\n// //       className=\"analysis-display-container\"\n// //       style={{ width: \"150px\", margin: \"0 auto\" }}\n// //     >\n// //       <ResponsiveContainer width=\"100%\" height={250}>\n// //         <PieChart>\n// //           <Pie\n// //             data={data}\n// //             innerRadius={50}\n// //             outerRadius={70}\n// //             dataKey=\"value\"\n// //             startAngle={90}\n// //             endAngle={-270}\n// //             stroke=\"none\"\n// //           >\n// //             {data.map((entry, index) => (\n// //               <Cell\n// //                 key={`cell-${index}`}\n// //                 fill={entry.color}\n// //                 style={{\n// //                   transition: \"filter 0.3s\",\n// //                   filter: \"none\",\n// //                   cursor: \"pointer\",\n// //                   width: \"max-content\",\n// //                   padding: \"10px\",\n// //                   borderRadius: \"50%\",\n// //                 }}\n// //                 onMouseEnter={(e) => {\n// //                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n// //                 }}\n// //                 onMouseLeave={(e) => {\n// //                   e.currentTarget.style.filter = \"none\";\n// //                 }}\n// //               />\n// //             ))}\n// //           </Pie>\n// //           <Tooltip\n// //             cursor={false}\n// //             content={({ payload }) => {\n// //               if (payload && payload.length) {\n// //                 const { name, amount } = payload[0].payload;\n// //                 return (\n// //                   <div className=\"tooltip-content\">\n// //                     <p>{name}</p>\n// //                     <p className=\"amount\">{formatCash(amount)}</p>\n// //                   </div>\n// //                 );\n// //               }\n// //               return null;\n// //             }}\n// //           />\n// //         </PieChart>\n// //       </ResponsiveContainer>\n// //     </div>\n// //   );\n// // };\n\n// // export default AnalysisDisplay;\n\n// // // import React, { useState, useEffect } from \"react\";\n// // // import { performAnalysis } from \"./AnalysisGet\";\n// // // import { Line } from \"rc-progress\";\n\n// // // const AnalysisDisplay = () => {\n// // //   const [analysisResults, setAnalysisResults] = useState(null);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const results = await performAnalysis();\n// // //         setAnalysisResults(results);\n// // //       } catch (err) {\n// // //         setError(err);\n// // //       }\n// // //     };\n\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const formatValue = (value, isCurrency = false) => {\n// // //     if (isNaN(value) || value === undefined) {\n// // //       return isCurrency ? \"$0.00\" : \"N/A\";\n// // //     }\n// // //     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\n// // //   };\n\n// // //   if (error) {\n// // //     console.error(\"Error fetching analysis data:\", error);\n// // //   }\n\n// // //   if (!analysisResults && !error) {\n// // //     return <div>Loading...</div>;\n// // //   }\n\n// // //   const {\n// // //     absoluteReturn = 0,\n// // //     sharpeRatio = 0,\n// // //     winRate = 0,\n// // //     numberOfTrades = 0,\n// // //     winningTrades = 0,\n// // //     losingTrades = 0,\n// // //     averageWin = 0,\n// // //     averageLoss = 0,\n// // //     riskRewardRatio = 0,\n// // //   } = analysisResults || {};\n\n// // //   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\n// // //   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\n\n// // //   return (\n// // //     <div className=\"analysis-container\">\n// // //       <div className=\"analysis-metrics-row\">\n// // //         {/* Absolute Return Metric */}\n// // //         <div className=\"analysis-metric-top\">\n// // //           <h3>Absolute Return</h3>\n// // //           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\n// // //           <Line\n// // //             percent={absoluteReturnPercentage}\n// // //             strokeWidth=\"2\"\n// // //             trailWidth=\"2\"\n// // //             strokeColor={\"#4a90e2\"}\n// // //             trailColor=\"#d8e3ef\"\n// // //           />\n// // //         </div>\n\n// // //         {/* Sharpe Ratio Metric */}\n// // //         <div className=\"analysis-metric-top\">\n// // //           <h3>Sharpe Ratio</h3>\n// // //           <p>{formatValue(sharpeRatio)}</p>\n// // //           <Line\n// // //             percent={sharpeRatioPercentage}\n// // //             strokeWidth=\"2\"\n// // //             trailWidth=\"2\"\n// // //             strokeColor={\"#4a90e2\"}\n// // //             trailColor=\"#d8e3ef\"\n// // //           />\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Trades, Wins, and Losses Row */}\n// // //       <div className=\"analysis-row\">\n// // //         <div className=\"analysis-circle\">\n// // //           <h3>Trades</h3>\n// // //           <p>{numberOfTrades}</p>\n// // //         </div>\n// // //         <div className=\"analysis-circle\">\n// // //           <h3>Wins</h3>\n// // //           <p>{winningTrades}</p>\n// // //         </div>\n// // //         <div className=\"analysis-circle\">\n// // //           <h3>Losses</h3>\n// // //           <p>{losingTrades}</p>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Additional Metrics Row */}\n// // //       <div className=\"analysis-metrics-row\">\n// // //         <div className=\"analysis-metric\">\n// // //           <h3>Win Rate</h3>\n// // //           <p>{formatValue(winRate)}%</p>\n// // //         </div>\n// // //         <div className=\"analysis-metric\">\n// // //           <h3>Avg. Win</h3>\n// // //           <p>{formatValue(averageWin, true)}</p>\n// // //         </div>\n// // //         <div className=\"analysis-metric\">\n// // //           <h3>Avg. Loss</h3>\n// // //           <p>{formatValue(averageLoss, true)}</p>\n// // //         </div>\n// // //         <div className=\"analysis-metric\">\n// // //           <h3>Risk Reward</h3>\n// // //           <p>{formatValue(riskRewardRatio)}</p>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default AnalysisDisplay;","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","Tooltip","PieChart","Pie","Cell","ResponsiveContainer","performAnalysis","Line","AnalysisDisplay","analysisResults","setAnalysisResults","error","setError","fetchData","results","err","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","absoluteReturn","sharpeRatio","winRate","numberOfTrades","winningTrades","losingTrades","averageWin","averageLoss","total","winPercent","formatCash","value","toFixed","data","name","color","amount","winRateData","renderPieChart","chartData","tooltipFormat","width","height","innerRadius","outerRadius","startAngle","endAngle","stroke","dataKey","map","entry","index","key","fill","style","transition","cursor","onMouseEnter","e","currentTarget","filter","onMouseLeave","content","className","payload","length"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { performAnalysis } from \"./AnalysisGet\";\r\nimport { Line } from \"rc-progress\";\r\n\r\nconst AnalysisDisplay = () => {\r\n  const [analysisResults, setAnalysisResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const results = await performAnalysis();\r\n        setAnalysisResults(results);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (error) {\r\n    console.error(\"Error fetching analysis data:\", error);\r\n  }\r\n\r\n  if (!analysisResults && !error) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const {\r\n    absoluteReturn = 0,\r\n    sharpeRatio = 0,\r\n    winRate = 0,\r\n    numberOfTrades = 0,\r\n    winningTrades = 0,\r\n    losingTrades = 0,\r\n    averageWin = 0,\r\n    averageLoss = 0,\r\n  } = analysisResults || {};\r\n\r\n  const total = averageWin + averageLoss;\r\n  const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n  const formatCash = (value) => `$${value.toFixed(2)}`;\r\n\r\n  const data = [\r\n    {\r\n      name: \"Average Win\",\r\n      value: winPercent,\r\n      color: \"#4a90e2\",\r\n      amount: averageWin,\r\n    },\r\n    {\r\n      name: \"Average Loss\",\r\n      value: 100 - winPercent,\r\n      color: \"#f44336\",\r\n      amount: averageLoss,\r\n    },\r\n  ];\r\n\r\n  const winRateData = [\r\n    { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\r\n    { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\r\n  ];\r\n\r\n  const renderPieChart = (chartData, tooltipFormat) => (\r\n    <ResponsiveContainer width=\"100%\" height={150}>\r\n      <PieChart>\r\n        <Pie\r\n          data={chartData}\r\n          innerRadius={50}\r\n          outerRadius={70}\r\n          startAngle={90}\r\n          endAngle={-270}\r\n          stroke=\"none\"\r\n          dataKey=\"value\"\r\n        >\r\n          {chartData.map((entry, index) => (\r\n            <Cell\r\n              key={`cell-${index}`}\r\n              fill={entry.color}\r\n              style={{ transition: \"filter 0.3s\", cursor: \"pointer\" }}\r\n              onMouseEnter={(e) => {\r\n                e.currentTarget.style.filter = `drop-shadow(0 0 5px ${entry.color})`;\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                e.currentTarget.style.filter = \"none\";\r\n              }}\r\n            />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip cursor={false} content={tooltipFormat} />\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  return (\r\n    <div className=\"analysis-container\">\r\n      <div className=\"analysis-row\">\r\n        <div className=\"analysis-circle\">\r\n          <h3>Trades</h3>\r\n          <p>{numberOfTrades}</p>\r\n        </div>\r\n        <div className=\"analysis-circle\">\r\n          <h3>Wins</h3>\r\n          <p>{winningTrades}</p>\r\n        </div>\r\n        <div className=\"analysis-circle\">\r\n          <h3>Losses</h3>\r\n          <p>{losingTrades}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"analysis-circle-row\">\r\n        {/* Win Rate Chart */}\r\n        {renderPieChart(winRateData, ({ payload }) => {\r\n          if (payload && payload.length) {\r\n            const { name, value } = payload[0].payload;\r\n            return (\r\n              <div className=\"tooltip-content\">\r\n                <p>{name}</p>\r\n                <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\r\n              </div>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n\r\n        {/* Average Win/Loss Chart */}\r\n        {renderPieChart(data, ({ payload }) => {\r\n          if (payload && payload.length) {\r\n            const { name, amount } = payload[0].payload;\r\n            return (\r\n              <div className=\"tooltip-content\">\r\n                <p>{name}</p>\r\n                <p className=\"amount\">{formatCash(amount)}</p>\r\n              </div>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisDisplay;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   BarChart,\r\n//   Bar,\r\n//   XAxis,\r\n//   YAxis,\r\n//   Tooltip,\r\n//   PieChart,\r\n//   Pie,\r\n//   Cell,\r\n//   ResponsiveContainer,\r\n// } from \"recharts\";\r\n// import { performAnalysis } from \"./AnalysisGet\";\r\n// import { Line } from \"rc-progress\";\r\n\r\n// const AnalysisDisplay = () => {\r\n//   const [analysisResults, setAnalysisResults] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const results = await performAnalysis();\r\n//         setAnalysisResults(results);\r\n//       } catch (err) {\r\n//         setError(err);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   if (error) {\r\n//     console.error(\"Error fetching analysis data:\", error);\r\n//   }\r\n\r\n//   if (!analysisResults && !error) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const {\r\n//     absoluteReturn = 0,\r\n//     sharpeRatio = 0,\r\n//     winRate = 0,\r\n//     numberOfTrades = 0,\r\n//     winningTrades = 0,\r\n//     losingTrades = 0,\r\n//     averageWin = 0,\r\n//     averageLoss = 0,\r\n//     riskRewardRatio = 0,\r\n//   } = analysisResults || {};\r\n//   const total = averageWin + averageLoss;\r\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\r\n//   const absoluteReturnPercentage = absoluteReturn * 100;\r\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\r\n\r\n//   const data = [\r\n//     {\r\n//       name: \"Average Win\",\r\n//       value: winPercent,\r\n//       color: \"#4a90e2\",\r\n//       amount: averageWin,\r\n//     },\r\n//     {\r\n//       name: \"Average Loss\",\r\n//       value: 100 - winPercent,\r\n//       color: \"#f44336\",\r\n//       amount: averageLoss,\r\n//     },\r\n//   ];\r\n\r\n//   const winRateData = [\r\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\r\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\r\n//   ];\r\n//   const formatValue = (value, isCurrency = false) => {\r\n//     if (isNaN(value) || value === undefined) {\r\n//       return isCurrency ? \"$0.00\" : \"N/A\";\r\n//     }\r\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\r\n//   };\r\n//   return (\r\n//     <div className=\"analysis-container\">\r\n//       <div className=\"analysis-row\">\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Trades</h3>\r\n//           <p>{numberOfTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Wins</h3>\r\n//           <p>{winningTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Losses</h3>\r\n//           <p>{losingTrades}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"analysis-metric-row\">\r\n//         {/* Absolute Return Metric */}\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Absolute Return</h3>\r\n//           <p>{`${absoluteReturn.toFixed(2) * 100}%`}</p>\r\n//           <ResponsiveContainer width=\"100%\" height={40}>\r\n//             <BarChart\r\n//               data={[\r\n//                 {\r\n//                   name: \"Abs. Return\",\r\n//                   value: absoluteReturnPercentage.toFixed(2),\r\n//                 },\r\n//               ]}\r\n//               layout=\"vertical\"\r\n//             >\r\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\r\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\r\n//               <Bar\r\n//                 dataKey=\"value\"\r\n//                 fill={absoluteReturnPercentage >= 50 ? \"#4a90e2\" : \"#e74c3c\"}\r\n//                 background={{\r\n//                   fill: \"#d8e3ef\",\r\n//                   radius: [5, 5, 5, 5],\r\n//                 }}\r\n//                 isAnimationActive={true}\r\n//                 radius={[5, 5, 5, 5]}\r\n//                 barSize={55}\r\n//               />\r\n//             </BarChart>\r\n//           </ResponsiveContainer>\r\n//         </div>\r\n\r\n//         {/* Sharpe Ratio Metric */}\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Sharpe Ratio</h3>\r\n//           <p>{sharpeRatio.toFixed(2)}</p>\r\n//           <ResponsiveContainer width=\"100%\" height={40}>\r\n//             <BarChart\r\n//               data={[{ name: \"Sharpe Ratio\", value: sharpeRatioPercentage }]}\r\n//               layout=\"vertical\"\r\n//             >\r\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\r\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\r\n//               <Bar\r\n//                 dataKey=\"value\"\r\n//                 fill={sharpeRatio >= 3 ? \"#4a90e2\" : \"#f44336\"}\r\n//                 background={{\r\n//                   fill: \"#d8e3ef\",\r\n//                   radius: [5, 5, 5, 5],\r\n//                 }}\r\n//                 isAnimationActive={true}\r\n//                 radius={[5, 5, 5, 5]}\r\n//                 barSize={55}\r\n//               />\r\n//             </BarChart>\r\n//           </ResponsiveContainer>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* <div className=\"analysis-metric-row\">\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Absolute Return</h3>\r\n//           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\r\n//           <ResponsiveContainer width=\"100%\" height={40}>\r\n//             <BarChart\r\n//               data={[\r\n//                 { name: \"Absolute Return\", value: absoluteReturnPercentage },\r\n//               ]}\r\n//               layout=\"vertical\"\r\n//             >\r\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\r\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\r\n//               <Tooltip cursor={false} />\r\n//               <Bar\r\n//                 dataKey=\"value\"\r\n//                 fill=\"#4a90e2\"\r\n//                 background={{ fill: \"#d8e3ef\" }}\r\n//                 isAnimationActive={true}\r\n//               />\r\n//             </BarChart>\r\n//           </ResponsiveContainer>\r\n//         </div>\r\n\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Sharpe Ratio</h3>\r\n//           <p>{sharpeRatio.toFixed(2)}</p>\r\n//           <ResponsiveContainer width=\"100%\" height={40}>\r\n//             <BarChart\r\n//               data={[{ name: \"Sharpe Ratio\", value: sharpeRatioPercentage }]}\r\n//               layout=\"vertical\"\r\n//             >\r\n//               <XAxis type=\"number\" domain={[0, 100]} hide />\r\n//               <YAxis type=\"category\" dataKey=\"name\" hide />\r\n//               <Tooltip cursor={false} />\r\n//               <Bar\r\n//                 dataKey=\"value\"\r\n//                 fill=\"#4a90e2\"\r\n//                 background={{ fill: \"#d8e3ef\" }}\r\n//                 isAnimationActive={true}\r\n//               />\r\n//             </BarChart>\r\n//           </ResponsiveContainer>\r\n//         </div>\r\n//       </div> */}\r\n\r\n//       <div className=\"analysis-circle-row\">\r\n//         <ResponsiveContainer width=\"100%\" height={150}>\r\n//           <PieChart>\r\n//             <Pie\r\n//               data={winRateData}\r\n//               innerRadius={50}\r\n//               outerRadius={70}\r\n//               startAngle={90}\r\n//               endAngle={-270}\r\n//               stroke=\"none\"\r\n//               dataKey=\"value\"\r\n//             >\r\n//               {winRateData.map((entry, index) => (\r\n//                 <Cell\r\n//                   key={`winrate-cell-${index}`}\r\n//                   fill={entry.color}\r\n//                   style={{\r\n//                     transition: \"filter 0.3s\",\r\n//                     cursor: entry.name === \"Win Rate\" ? \"pointer\" : \"default\",\r\n//                   }}\r\n//                   onMouseEnter={(e) => {\r\n//                     if (entry.name === \"Win Rate\") {\r\n//                       e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n//                     }\r\n//                   }}\r\n//                   onMouseLeave={(e) => {\r\n//                     e.currentTarget.style.filter = \"none\";\r\n//                   }}\r\n//                 />\r\n//               ))}\r\n//             </Pie>\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (\r\n//                   payload &&\r\n//                   payload.length &&\r\n//                   payload[0].payload.name === \"Win Rate\"\r\n//                 ) {\r\n//                   const { name, value } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{name}</p>\r\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//           </PieChart>\r\n//         </ResponsiveContainer>\r\n\r\n//         {/* Average Win and Loss */}\r\n//         <ResponsiveContainer width=\"100%\" height={150}>\r\n//           <PieChart>\r\n//             <Pie\r\n//               data={data}\r\n//               innerRadius={50}\r\n//               outerRadius={70}\r\n//               dataKey=\"value\"\r\n//               startAngle={90}\r\n//               endAngle={-270}\r\n//               stroke=\"none\"\r\n//             >\r\n//               {data.map((entry, index) => (\r\n//                 <Cell\r\n//                   key={`cell-${index}`}\r\n//                   fill={entry.color}\r\n//                   style={{\r\n//                     transition: \"filter 0.3s\",\r\n//                     cursor: \"pointer\",\r\n//                   }}\r\n//                   onMouseEnter={(e) => {\r\n//                     e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n//                   }}\r\n//                   onMouseLeave={(e) => {\r\n//                     e.currentTarget.style.filter = \"none\";\r\n//                   }}\r\n//                 />\r\n//               ))}\r\n//             </Pie>\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { name, amount } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{name}</p>\r\n//                       <p className=\"amount\">{formatCash(amount)}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//           </PieChart>\r\n//         </ResponsiveContainer>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisDisplay;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// import { performAnalysis } from \"./AnalysisGet\";\r\n\r\n// const AnalysisDisplay = () => {\r\n//   const [analysisResults, setAnalysisResults] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const results = await performAnalysis();\r\n//         setAnalysisResults(results);\r\n//       } catch (err) {\r\n//         setError(err);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   if (error) {\r\n//     console.error(\"Error fetching analysis data:\", error);\r\n//   }\r\n\r\n//   if (!analysisResults && !error) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const {\r\n//     averageWin = 0,\r\n//     averageLoss = 0,\r\n//     winRate = 0,\r\n//   } = analysisResults || {};\r\n//   const total = averageWin + averageLoss;\r\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\r\n\r\n//   const data = [\r\n//     {\r\n//       name: \"Average Win\",\r\n//       value: winPercent,\r\n//       color: \"#4a90e2\",\r\n//       amount: averageWin,\r\n//     },\r\n//     {\r\n//       name: \"Average Loss\",\r\n//       value: 100 - winPercent,\r\n//       color: \"#f44336\",\r\n//       amount: averageLoss,\r\n//     },\r\n//   ];\r\n\r\n//   const winRateData = [\r\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\r\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"analysis-display-container\"\r\n//       style={{ width: \"150px\", margin: \"0 auto\" }}\r\n//     >\r\n//       {/* Main Chart for Average Win and Loss */}\r\n//       <ResponsiveContainer width=\"100%\" height={250}>\r\n//         <PieChart>\r\n//           <Pie\r\n//             data={data}\r\n//             innerRadius={50}\r\n//             outerRadius={70}\r\n//             dataKey=\"value\"\r\n//             startAngle={90}\r\n//             endAngle={-270}\r\n//             stroke=\"none\"\r\n//           >\r\n//             {data.map((entry, index) => (\r\n//               <Cell\r\n//                 key={`cell-${index}`}\r\n//                 fill={entry.color}\r\n//                 style={{\r\n//                   transition: \"filter 0.3s\",\r\n//                   cursor: \"pointer\",\r\n//                 }}\r\n//                 onMouseEnter={(e) => {\r\n//                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n//                 }}\r\n//                 onMouseLeave={(e) => {\r\n//                   e.currentTarget.style.filter = \"none\";\r\n//                 }}\r\n//               />\r\n//             ))}\r\n//           </Pie>\r\n//           <Tooltip\r\n//             cursor={false}\r\n//             content={({ payload }) => {\r\n//               if (payload && payload.length) {\r\n//                 const { name, amount } = payload[0].payload;\r\n//                 return (\r\n//                   <div className=\"tooltip-content\">\r\n//                     <p>{name}</p>\r\n//                     <p className=\"amount\">{formatCash(amount)}</p>\r\n//                   </div>\r\n//                 );\r\n//               }\r\n//               return null;\r\n//             }}\r\n//           />\r\n//         </PieChart>\r\n//       </ResponsiveContainer>\r\n\r\n//       <div style={{ marginTop: \"20px\" }}>\r\n//         <ResponsiveContainer width=\"100%\" height={150}>\r\n//           <PieChart>\r\n//             <Pie\r\n//               data={winRateData}\r\n//               innerRadius={50}\r\n//               outerRadius={70}\r\n//               startAngle={90}\r\n//               endAngle={-270}\r\n//               stroke=\"none\"\r\n//               dataKey=\"value\"\r\n//             >\r\n//               {winRateData.map((entry, index) => (\r\n//                 <Cell key={`winrate-cell-${index}`} fill={entry.color} />\r\n//               ))}\r\n//             </Pie>\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { name, value } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{name}</p>\r\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//           </PieChart>\r\n//         </ResponsiveContainer>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisDisplay;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// // import { performAnalysis } from \"./AnalysisGet\";\r\n\r\n// // const AnalysisDisplay = () => {\r\n// //   const [analysisResults, setAnalysisResults] = useState(null);\r\n// //   const [error, setError] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchData = async () => {\r\n// //       try {\r\n// //         const results = await performAnalysis();\r\n// //         setAnalysisResults(results);\r\n// //       } catch (err) {\r\n// //         setError(err);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchData();\r\n// //   }, []);\r\n\r\n// //   if (error) {\r\n// //     console.error(\"Error fetching analysis data:\", error);\r\n// //   }\r\n\r\n// //   if (!analysisResults && !error) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   const { averageWin = 0, averageLoss = 0 } = analysisResults || {};\r\n// //   const total = averageWin + averageLoss;\r\n// //   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n// //   const formatCash = (value) => `$${value.toFixed(2)}`;\r\n\r\n// //   const data = [\r\n// //     {\r\n// //       name: \"Average Win\",\r\n// //       value: winPercent,\r\n// //       color: \"#4a90e2\",\r\n// //       amount: averageWin,\r\n// //     },\r\n// //     {\r\n// //       name: \"Average Loss\",\r\n// //       value: 100 - winPercent,\r\n// //       color: \"#f44336\",\r\n// //       amount: averageLoss,\r\n// //     },\r\n// //   ];\r\n\r\n// //   return (\r\n// //     <div\r\n// //       className=\"analysis-display-container\"\r\n// //       style={{ width: \"150px\", margin: \"0 auto\" }}\r\n// //     >\r\n// //       <ResponsiveContainer width=\"100%\" height={250}>\r\n// //         <PieChart>\r\n// //           <Pie\r\n// //             data={data}\r\n// //             innerRadius={50}\r\n// //             outerRadius={70}\r\n// //             dataKey=\"value\"\r\n// //             startAngle={90}\r\n// //             endAngle={-270}\r\n// //             stroke=\"none\"\r\n// //           >\r\n// //             {data.map((entry, index) => (\r\n// //               <Cell\r\n// //                 key={`cell-${index}`}\r\n// //                 fill={entry.color}\r\n// //                 style={{\r\n// //                   transition: \"filter 0.3s\",\r\n// //                   filter: \"none\",\r\n// //                   cursor: \"pointer\",\r\n// //                   width: \"max-content\",\r\n// //                   padding: \"10px\",\r\n// //                   borderRadius: \"50%\",\r\n// //                 }}\r\n// //                 onMouseEnter={(e) => {\r\n// //                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n// //                 }}\r\n// //                 onMouseLeave={(e) => {\r\n// //                   e.currentTarget.style.filter = \"none\";\r\n// //                 }}\r\n// //               />\r\n// //             ))}\r\n// //           </Pie>\r\n// //           <Tooltip\r\n// //             cursor={false}\r\n// //             content={({ payload }) => {\r\n// //               if (payload && payload.length) {\r\n// //                 const { name, amount } = payload[0].payload;\r\n// //                 return (\r\n// //                   <div className=\"tooltip-content\">\r\n// //                     <p>{name}</p>\r\n// //                     <p className=\"amount\">{formatCash(amount)}</p>\r\n// //                   </div>\r\n// //                 );\r\n// //               }\r\n// //               return null;\r\n// //             }}\r\n// //           />\r\n// //         </PieChart>\r\n// //       </ResponsiveContainer>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default AnalysisDisplay;\r\n\r\n// // // import React, { useState, useEffect } from \"react\";\r\n// // // import { performAnalysis } from \"./AnalysisGet\";\r\n// // // import { Line } from \"rc-progress\";\r\n\r\n// // // const AnalysisDisplay = () => {\r\n// // //   const [analysisResults, setAnalysisResults] = useState(null);\r\n// // //   const [error, setError] = useState(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const fetchData = async () => {\r\n// // //       try {\r\n// // //         const results = await performAnalysis();\r\n// // //         setAnalysisResults(results);\r\n// // //       } catch (err) {\r\n// // //         setError(err);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     fetchData();\r\n// // //   }, []);\r\n\r\n// // //   const formatValue = (value, isCurrency = false) => {\r\n// // //     if (isNaN(value) || value === undefined) {\r\n// // //       return isCurrency ? \"$0.00\" : \"N/A\";\r\n// // //     }\r\n// // //     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\r\n// // //   };\r\n\r\n// // //   if (error) {\r\n// // //     console.error(\"Error fetching analysis data:\", error);\r\n// // //   }\r\n\r\n// // //   if (!analysisResults && !error) {\r\n// // //     return <div>Loading...</div>;\r\n// // //   }\r\n\r\n// // //   const {\r\n// // //     absoluteReturn = 0,\r\n// // //     sharpeRatio = 0,\r\n// // //     winRate = 0,\r\n// // //     numberOfTrades = 0,\r\n// // //     winningTrades = 0,\r\n// // //     losingTrades = 0,\r\n// // //     averageWin = 0,\r\n// // //     averageLoss = 0,\r\n// // //     riskRewardRatio = 0,\r\n// // //   } = analysisResults || {};\r\n\r\n// // //   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\r\n// // //   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\r\n\r\n// // //   return (\r\n// // //     <div className=\"analysis-container\">\r\n// // //       <div className=\"analysis-metrics-row\">\r\n// // //         {/* Absolute Return Metric */}\r\n// // //         <div className=\"analysis-metric-top\">\r\n// // //           <h3>Absolute Return</h3>\r\n// // //           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\r\n// // //           <Line\r\n// // //             percent={absoluteReturnPercentage}\r\n// // //             strokeWidth=\"2\"\r\n// // //             trailWidth=\"2\"\r\n// // //             strokeColor={\"#4a90e2\"}\r\n// // //             trailColor=\"#d8e3ef\"\r\n// // //           />\r\n// // //         </div>\r\n\r\n// // //         {/* Sharpe Ratio Metric */}\r\n// // //         <div className=\"analysis-metric-top\">\r\n// // //           <h3>Sharpe Ratio</h3>\r\n// // //           <p>{formatValue(sharpeRatio)}</p>\r\n// // //           <Line\r\n// // //             percent={sharpeRatioPercentage}\r\n// // //             strokeWidth=\"2\"\r\n// // //             trailWidth=\"2\"\r\n// // //             strokeColor={\"#4a90e2\"}\r\n// // //             trailColor=\"#d8e3ef\"\r\n// // //           />\r\n// // //         </div>\r\n// // //       </div>\r\n\r\n// // //       {/* Trades, Wins, and Losses Row */}\r\n// // //       <div className=\"analysis-row\">\r\n// // //         <div className=\"analysis-circle\">\r\n// // //           <h3>Trades</h3>\r\n// // //           <p>{numberOfTrades}</p>\r\n// // //         </div>\r\n// // //         <div className=\"analysis-circle\">\r\n// // //           <h3>Wins</h3>\r\n// // //           <p>{winningTrades}</p>\r\n// // //         </div>\r\n// // //         <div className=\"analysis-circle\">\r\n// // //           <h3>Losses</h3>\r\n// // //           <p>{losingTrades}</p>\r\n// // //         </div>\r\n// // //       </div>\r\n\r\n// // //       {/* Additional Metrics Row */}\r\n// // //       <div className=\"analysis-metrics-row\">\r\n// // //         <div className=\"analysis-metric\">\r\n// // //           <h3>Win Rate</h3>\r\n// // //           <p>{formatValue(winRate)}%</p>\r\n// // //         </div>\r\n// // //         <div className=\"analysis-metric\">\r\n// // //           <h3>Avg. Win</h3>\r\n// // //           <p>{formatValue(averageWin, true)}</p>\r\n// // //         </div>\r\n// // //         <div className=\"analysis-metric\">\r\n// // //           <h3>Avg. Loss</h3>\r\n// // //           <p>{formatValue(averageLoss, true)}</p>\r\n// // //         </div>\r\n// // //         <div className=\"analysis-metric\">\r\n// // //           <h3>Risk Reward</h3>\r\n// // //           <p>{formatValue(riskRewardRatio)}</p>\r\n// // //         </div>\r\n// // //       </div>\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default AnalysisDisplay;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
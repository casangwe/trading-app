{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//         console.log(\"Fetched Daily PNL Data:\", data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1].padStart(2, \"0\"); // Ensure two-digit month\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     console.log(\"Calculating bars for view:\", view);\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\n//     } else if (view === \"weekly\") {\n//       const weeks = getWeeksData(dailyPNLData);\n//       weeks.forEach((week, index) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\n//             week[week.length - 1].entry_date\n//           )}`\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month, index) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(formatMonthYear(month[0].entry_date));\n//       });\n//     }\n\n//     console.log(\"Balances:\", balances);\n//     console.log(\"Labels:\", labels);\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() + 1)\n//     ); // Adjust to Monday\n//     const endOfWeek = new Date(today.setDate(startOfWeek.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getWeeksData = (data) => {\n//     const weeks = [];\n//     const today = new Date();\n//     const startOfYear = new Date(today.getFullYear(), 0, 1); // Start of the year\n//     const weekDays = 7;\n\n//     let week = [];\n//     for (\n//       let date = startOfYear;\n//       date <= today;\n//       date.setDate(date.getDate() + 1)\n//     ) {\n//       const currentDate = new Date(date);\n//       const currentWeekStart = new Date(\n//         currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 1)\n//       );\n//       const currentWeekEnd = new Date(\n//         currentDate.setDate(currentWeekStart.getDate() + weekDays - 1)\n//       );\n\n//       week = data.filter((entry) => {\n//         const entryDate = new Date(entry.entry_date);\n//         return entryDate >= currentWeekStart && entryDate <= currentWeekEnd;\n//       });\n\n//       if (week.length > 0) {\n//         weeks.push(week);\n//       }\n//     }\n\n//     console.log(\"Weekly Data:\", weeks);\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     const nonEmptyMonths = months.filter((month) => month.length > 0);\n//     console.log(\"Monthly Data:\", nonEmptyMonths);\n//     return nonEmptyMonths;\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance || 1; // Prevent division by zero\n\n//   const headerDate =\n//     view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\n//       : view === \"weekly\"\n//       ? `${formatDate(new Date(dailyPNLData[0].entry_date))} - ${formatDate(\n//           new Date(dailyPNLData[dailyPNLData.length - 1].entry_date)\n//         )}`\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\n\n//   console.log(\"Header Date:\", headerDate);\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 100;\n//           const isPositive = balance >= 0;\n//           console.log(\n//             `Rendering bar for ${labels[index]}: Balance = ${balance}, Percentage = ${percentage}`\n//           );\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//         console.log(\"Fetched Daily PNL Data:\", data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1].padStart(2, \"0\"); // Ensure two-digit month\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     console.log(\"Calculating bars for view:\", view);\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\n//     } else if (view === \"weekly\") {\n//       const weeks = getCurrentMonth(dailyPNLData);\n//       weeks.forEach((week, index) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\n//             week[week.length - 1].entry_date\n//           )}`\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month, index) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(formatMonthYear(month[0].entry_date));\n//       });\n//     }\n\n//     console.log(\"Balances:\", balances);\n//     console.log(\"Labels:\", labels);\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() + 1)\n//     ); // Adjust to Monday\n//     const endOfWeek = new Date(today.setDate(startOfWeek.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const currentMonth = today.getMonth(); // Zero-based\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() === currentMonth) {\n//         week.push(entry);\n//         // Check if the week needs to be closed (e.g., 7 days)\n//         if (week.length > 6) {\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       weeks.push(week); // Add the last week if it exists\n//     }\n\n//     console.log(\"Weekly Data for Current Month:\", weeks);\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     const nonEmptyMonths = months.filter((month) => month.length > 0);\n//     console.log(\"Monthly Data:\", nonEmptyMonths);\n//     return nonEmptyMonths;\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance || 1; // Prevent division by zero\n\n//   const headerDate =\n//     view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\n\n//   console.log(\"Header Date:\", headerDate);\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 100;\n//           const isPositive = balance >= 0;\n//           console.log(\n//             `Rendering bar for ${labels[index]}: Balance = ${balance}, Percentage = ${percentage}`\n//           );\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// // import { formatCash, formatDate } from \"../func/functions\";\n\n// // const Bars = () => {\n// //   const [dailyPNLData, setDailyPNLData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [view, setView] = useState(\"daily\");\n\n// //   useEffect(() => {\n// //     const fetchDailyPNLData = async () => {\n// //       try {\n// //         const data = await fetchDailyPnls();\n// //         setDailyPNLData(data);\n// //       } catch (error) {\n// //         setError(\"Error fetching Daily PNL data\");\n// //         console.error(\"Error fetching Daily PNL data:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchDailyPNLData();\n// //   }, []);\n\n// //   if (loading) return <div>Loading...</div>;\n// //   if (error) return <div>{error}</div>;\n\n// //   const formatMonthYear = (dateStr) => {\n// //     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n// //     const dateParts = dateStr.split(\"-\");\n// //     const month = dateParts[1];\n// //     const year = dateParts[0];\n// //     return `${month}/${year}`;\n// //   };\n\n// //   const calculateBars = () => {\n// //     let balances = [];\n// //     let labels = [];\n\n// //     if (view === \"daily\") {\n// //       const currentWeek = getCurrentWeek(dailyPNLData);\n// //       balances = currentWeek.map((day) => parseFloat(day.balance));\n// //       labels = currentWeek.map((day) => formatDate(day.entry_date));\n// //     } else if (view === \"weekly\") {\n// //       const currentMonth = getCurrentMonth(dailyPNLData);\n// //       currentMonth.forEach((week) => {\n// //         const weekSum = week.reduce(\n// //           (sum, day) => sum + parseFloat(day.balance),\n// //           0\n// //         );\n// //         balances.push(weekSum);\n// //         labels.push(\n// //           `${formatDate(week[0].entry_date)} - ${formatDate(\n// //             week[week.length - 1].entry_date\n// //           )}`\n// //         );\n// //       });\n// //     } else if (view === \"monthly\") {\n// //       const months = getMonthsData(dailyPNLData);\n// //       months.forEach((month) => {\n// //         const monthSum = month.reduce(\n// //           (sum, day) => sum + parseFloat(day.balance),\n// //           0\n// //         );\n// //         balances.push(monthSum);\n// //         labels.push(formatMonthYear(month[0].entry_date));\n// //       });\n// //     }\n\n// //     return { balances, labels };\n// //   };\n\n// //   const getCurrentWeek = (data) => {\n// //     const weekData = [];\n// //     const today = new Date();\n// //     const startOfWeek = new Date(\n// //       today.setDate(today.getDate() - today.getDay() - 1)\n// //     );\n// //     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n\n// //     data.forEach((entry) => {\n// //       const entryDate = new Date(entry.entry_date);\n// //       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n// //         weekData.push(entry);\n// //       }\n// //     });\n\n// //     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n// //     console.log(\"Filtered Week Data:\", weekData);\n\n// //     return weekData;\n// //   };\n\n// //   const getCurrentMonth = (data) => {\n// //     const weeks = [];\n// //     let week = [];\n// //     const today = new Date();\n// //     const month = today.getMonth() + 1;\n\n// //     data.forEach((entry, index) => {\n// //       const entryDate = new Date(entry.entry_date);\n// //       if (entryDate.getMonth() + 1 === month) {\n// //         week.push(entry);\n// //         if ((index + 1) % 5 === 0) {\n// //           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n// //           weeks.push(week);\n// //           week = [];\n// //         }\n// //       }\n// //     });\n\n// //     if (week.length) {\n// //       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n// //       weeks.push(week);\n// //     }\n\n// //     return weeks;\n// //   };\n\n// //   const getMonthsData = (data) => {\n// //     const months = Array.from({ length: 12 }, () => []);\n// //     data.forEach((entry) => {\n// //       const entryDate = new Date(entry.entry_date);\n// //       months[entryDate.getMonth()].push(entry);\n// //     });\n// //     return months.filter((month) => month.length > 0);\n// //   };\n\n// //   const { balances, labels } = calculateBars();\n// //   const maxBalance = Math.max(...balances);\n// //   const threshold = maxBalance * 5;\n\n// //   const headerDate =\n// //     view === \"daily\"\n// //       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\n// //       : view === \"weekly\"\n// //       ? formatMonthYear(dailyPNLData[0].entry_date)\n// //       : dailyPNLData[0].entry_date.split(\"-\")[0];\n\n// //   return (\n// //     <div className=\"main-bars-container\">\n// //       <div className=\"header-card\">\n// //         <div className=\"tab-container\">\n// //           <button\n// //             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n// //             onClick={() => setView(\"daily\")}\n// //           >\n// //             Daily\n// //           </button>\n// //           <button\n// //             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n// //             onClick={() => setView(\"weekly\")}\n// //           >\n// //             Weekly\n// //           </button>\n// //           <button\n// //             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n// //             onClick={() => setView(\"monthly\")}\n// //           >\n// //             Monthly\n// //           </button>\n// //         </div>\n// //         <div className=\"header-date\">{headerDate}</div>\n// //       </div>\n\n// //       <hr />\n// //       <div className=\"bars-container\">\n// //         {balances.map((balance, index) => {\n// //           const percentage = (Math.abs(balance) / threshold) * 100;\n// //           const isPositive = balance >= 0;\n// //           return (\n// //             <div key={index} className=\"bar-wrapper\">\n// //               <span className=\"bar-label\">{labels[index]}</span>\n// //               <div\n// //                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n// //                 style={{\n// //                   width: `${percentage}%`,\n// //                 }}\n// //               >\n// //                 <span className=\"bar-value\">{formatCash(balance)}</span>\n// //               </div>\n// //             </div>\n// //           );\n// //         })}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Bars;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//         console.log(\"Fetched Daily PNL Data:\", data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1].padStart(2, \"0\"); // Ensure two-digit month\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     console.log(\"Calculating bars for view:\", view);\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\r\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n//     } else if (view === \"weekly\") {\r\n//       const weeks = getWeeksData(dailyPNLData);\r\n//       weeks.forEach((week, index) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//             week[week.length - 1].entry_date\r\n//           )}`\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month, index) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(formatMonthYear(month[0].entry_date));\r\n//       });\r\n//     }\r\n\r\n//     console.log(\"Balances:\", balances);\r\n//     console.log(\"Labels:\", labels);\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() + 1)\r\n//     ); // Adjust to Monday\r\n//     const endOfWeek = new Date(today.setDate(startOfWeek.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getWeeksData = (data) => {\r\n//     const weeks = [];\r\n//     const today = new Date();\r\n//     const startOfYear = new Date(today.getFullYear(), 0, 1); // Start of the year\r\n//     const weekDays = 7;\r\n\r\n//     let week = [];\r\n//     for (\r\n//       let date = startOfYear;\r\n//       date <= today;\r\n//       date.setDate(date.getDate() + 1)\r\n//     ) {\r\n//       const currentDate = new Date(date);\r\n//       const currentWeekStart = new Date(\r\n//         currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 1)\r\n//       );\r\n//       const currentWeekEnd = new Date(\r\n//         currentDate.setDate(currentWeekStart.getDate() + weekDays - 1)\r\n//       );\r\n\r\n//       week = data.filter((entry) => {\r\n//         const entryDate = new Date(entry.entry_date);\r\n//         return entryDate >= currentWeekStart && entryDate <= currentWeekEnd;\r\n//       });\r\n\r\n//       if (week.length > 0) {\r\n//         weeks.push(week);\r\n//       }\r\n//     }\r\n\r\n//     console.log(\"Weekly Data:\", weeks);\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     const nonEmptyMonths = months.filter((month) => month.length > 0);\r\n//     console.log(\"Monthly Data:\", nonEmptyMonths);\r\n//     return nonEmptyMonths;\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance || 1; // Prevent division by zero\r\n\r\n//   const headerDate =\r\n//     view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? `${formatDate(new Date(dailyPNLData[0].entry_date))} - ${formatDate(\r\n//           new Date(dailyPNLData[dailyPNLData.length - 1].entry_date)\r\n//         )}`\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n//   console.log(\"Header Date:\", headerDate);\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 100;\r\n//           const isPositive = balance >= 0;\r\n//           console.log(\r\n//             `Rendering bar for ${labels[index]}: Balance = ${balance}, Percentage = ${percentage}`\r\n//           );\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//         console.log(\"Fetched Daily PNL Data:\", data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1].padStart(2, \"0\"); // Ensure two-digit month\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     console.log(\"Calculating bars for view:\", view);\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\r\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n//     } else if (view === \"weekly\") {\r\n//       const weeks = getCurrentMonth(dailyPNLData);\r\n//       weeks.forEach((week, index) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//             week[week.length - 1].entry_date\r\n//           )}`\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month, index) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(formatMonthYear(month[0].entry_date));\r\n//       });\r\n//     }\r\n\r\n//     console.log(\"Balances:\", balances);\r\n//     console.log(\"Labels:\", labels);\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() + 1)\r\n//     ); // Adjust to Monday\r\n//     const endOfWeek = new Date(today.setDate(startOfWeek.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const currentMonth = today.getMonth(); // Zero-based\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() === currentMonth) {\r\n//         week.push(entry);\r\n//         // Check if the week needs to be closed (e.g., 7 days)\r\n//         if (week.length > 6) {\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       weeks.push(week); // Add the last week if it exists\r\n//     }\r\n\r\n//     console.log(\"Weekly Data for Current Month:\", weeks);\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     const nonEmptyMonths = months.filter((month) => month.length > 0);\r\n//     console.log(\"Monthly Data:\", nonEmptyMonths);\r\n//     return nonEmptyMonths;\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance || 1; // Prevent division by zero\r\n\r\n//   const headerDate =\r\n//     view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n//   console.log(\"Header Date:\", headerDate);\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 100;\r\n//           const isPositive = balance >= 0;\r\n//           console.log(\r\n//             `Rendering bar for ${labels[index]}: Balance = ${balance}, Percentage = ${percentage}`\r\n//           );\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // const Bars = () => {\r\n// //   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [view, setView] = useState(\"daily\");\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchDailyPNLData = async () => {\r\n// //       try {\r\n// //         const data = await fetchDailyPnls();\r\n// //         setDailyPNLData(data);\r\n// //       } catch (error) {\r\n// //         setError(\"Error fetching Daily PNL data\");\r\n// //         console.error(\"Error fetching Daily PNL data:\", error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchDailyPNLData();\r\n// //   }, []);\r\n\r\n// //   if (loading) return <div>Loading...</div>;\r\n// //   if (error) return <div>{error}</div>;\r\n\r\n// //   const formatMonthYear = (dateStr) => {\r\n// //     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n// //     const dateParts = dateStr.split(\"-\");\r\n// //     const month = dateParts[1];\r\n// //     const year = dateParts[0];\r\n// //     return `${month}/${year}`;\r\n// //   };\r\n\r\n// //   const calculateBars = () => {\r\n// //     let balances = [];\r\n// //     let labels = [];\r\n\r\n// //     if (view === \"daily\") {\r\n// //       const currentWeek = getCurrentWeek(dailyPNLData);\r\n// //       balances = currentWeek.map((day) => parseFloat(day.balance));\r\n// //       labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n// //     } else if (view === \"weekly\") {\r\n// //       const currentMonth = getCurrentMonth(dailyPNLData);\r\n// //       currentMonth.forEach((week) => {\r\n// //         const weekSum = week.reduce(\r\n// //           (sum, day) => sum + parseFloat(day.balance),\r\n// //           0\r\n// //         );\r\n// //         balances.push(weekSum);\r\n// //         labels.push(\r\n// //           `${formatDate(week[0].entry_date)} - ${formatDate(\r\n// //             week[week.length - 1].entry_date\r\n// //           )}`\r\n// //         );\r\n// //       });\r\n// //     } else if (view === \"monthly\") {\r\n// //       const months = getMonthsData(dailyPNLData);\r\n// //       months.forEach((month) => {\r\n// //         const monthSum = month.reduce(\r\n// //           (sum, day) => sum + parseFloat(day.balance),\r\n// //           0\r\n// //         );\r\n// //         balances.push(monthSum);\r\n// //         labels.push(formatMonthYear(month[0].entry_date));\r\n// //       });\r\n// //     }\r\n\r\n// //     return { balances, labels };\r\n// //   };\r\n\r\n// //   const getCurrentWeek = (data) => {\r\n// //     const weekData = [];\r\n// //     const today = new Date();\r\n// //     const startOfWeek = new Date(\r\n// //       today.setDate(today.getDate() - today.getDay() - 1)\r\n// //     );\r\n// //     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n// //     data.forEach((entry) => {\r\n// //       const entryDate = new Date(entry.entry_date);\r\n// //       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n// //         weekData.push(entry);\r\n// //       }\r\n// //     });\r\n\r\n// //     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n// //     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n// //     return weekData;\r\n// //   };\r\n\r\n// //   const getCurrentMonth = (data) => {\r\n// //     const weeks = [];\r\n// //     let week = [];\r\n// //     const today = new Date();\r\n// //     const month = today.getMonth() + 1;\r\n\r\n// //     data.forEach((entry, index) => {\r\n// //       const entryDate = new Date(entry.entry_date);\r\n// //       if (entryDate.getMonth() + 1 === month) {\r\n// //         week.push(entry);\r\n// //         if ((index + 1) % 5 === 0) {\r\n// //           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n// //           weeks.push(week);\r\n// //           week = [];\r\n// //         }\r\n// //       }\r\n// //     });\r\n\r\n// //     if (week.length) {\r\n// //       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n// //       weeks.push(week);\r\n// //     }\r\n\r\n// //     return weeks;\r\n// //   };\r\n\r\n// //   const getMonthsData = (data) => {\r\n// //     const months = Array.from({ length: 12 }, () => []);\r\n// //     data.forEach((entry) => {\r\n// //       const entryDate = new Date(entry.entry_date);\r\n// //       months[entryDate.getMonth()].push(entry);\r\n// //     });\r\n// //     return months.filter((month) => month.length > 0);\r\n// //   };\r\n\r\n// //   const { balances, labels } = calculateBars();\r\n// //   const maxBalance = Math.max(...balances);\r\n// //   const threshold = maxBalance * 5;\r\n\r\n// //   const headerDate =\r\n// //     view === \"daily\"\r\n// //       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n// //       : view === \"weekly\"\r\n// //       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n// //       : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n// //   return (\r\n// //     <div className=\"main-bars-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <div className=\"tab-container\">\r\n// //           <button\r\n// //             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n// //             onClick={() => setView(\"daily\")}\r\n// //           >\r\n// //             Daily\r\n// //           </button>\r\n// //           <button\r\n// //             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n// //             onClick={() => setView(\"weekly\")}\r\n// //           >\r\n// //             Weekly\r\n// //           </button>\r\n// //           <button\r\n// //             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n// //             onClick={() => setView(\"monthly\")}\r\n// //           >\r\n// //             Monthly\r\n// //           </button>\r\n// //         </div>\r\n// //         <div className=\"header-date\">{headerDate}</div>\r\n// //       </div>\r\n\r\n// //       <hr />\r\n// //       <div className=\"bars-container\">\r\n// //         {balances.map((balance, index) => {\r\n// //           const percentage = (Math.abs(balance) / threshold) * 100;\r\n// //           const isPositive = balance >= 0;\r\n// //           return (\r\n// //             <div key={index} className=\"bar-wrapper\">\r\n// //               <span className=\"bar-label\">{labels[index]}</span>\r\n// //               <div\r\n// //                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n// //                 style={{\r\n// //                   width: `${percentage}%`,\r\n// //                 }}\r\n// //               >\r\n// //                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n// //               </div>\r\n// //             </div>\r\n// //           );\r\n// //         })}\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Bars;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}
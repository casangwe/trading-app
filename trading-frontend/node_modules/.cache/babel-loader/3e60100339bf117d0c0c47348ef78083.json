{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\InvestmentChart.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatCash } from \"../func/functions\";\nconst timeFrames = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"ALL\"];\nlet groupedData = {\n  daily: [],\n  weekly: [],\n  monthly: [],\n  threeMonths: [],\n  oneYear: [],\n  all: []\n};\nconst InvestmentChart = () => {\n  const [selectedTimeFrame, setSelectedTimeFrame] = useState(\"ALL\");\n  const [chartData, setChartData] = useState([]);\n  const [investmentSummary, setInvestmentSummary] = useState(null);\n  const organizeData = dailyPnls => {\n    dailyPnls.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n    return {\n      daily: dailyPnls.slice(-1),\n      weekly: dailyPnls.slice(-7),\n      monthly: dailyPnls.slice(-30),\n      threeMonths: dailyPnls.slice(-90),\n      oneYear: dailyPnls.slice(-365),\n      all: dailyPnls\n    };\n  };\n  const updateChart = useCallback(timeFrame => {\n    const data = groupedData[timeFrame.toLowerCase()];\n    const formattedData = formatChartData(data);\n    setChartData(formattedData.chart);\n    setInvestmentSummary(formattedData.summary);\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const dailyPnls = await fetchDailyPnls();\n        groupedData = organizeData(dailyPnls);\n        updateChart(selectedTimeFrame);\n      } catch (error) {\n        console.error(\"Error fetching PnL data:\", error);\n      }\n    };\n    fetchData();\n  }, [updateChart, selectedTimeFrame]);\n  useEffect(() => {\n    updateChart(selectedTimeFrame);\n  }, [selectedTimeFrame, updateChart]);\n  const formatChartData = data => {\n    if (!data || data.length === 0) {\n      return {\n        chart: [],\n        summary: {\n          balance: 0,\n          percentageChange: 0\n        }\n      };\n    }\n    let cumulativeBalance = 0;\n    const chart = data.map(entry => {\n      cumulativeBalance += parseFloat(entry.balance);\n      return {\n        date: new Date(entry.entry_date).toLocaleDateString(),\n        balance: cumulativeBalance\n      };\n    });\n    const summary = {\n      balance: cumulativeBalance,\n      percentageChange: (cumulativeBalance - data[0].balance) / data[0].balance * 100\n    };\n    return {\n      chart,\n      summary\n    };\n  };\n  const determineLineColor = () => {\n    return investmentSummary && investmentSummary.percentageChange >= 0 ? \"#4caf50\" : \"#e74c3c\";\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Investing\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, investmentSummary ? `${investmentSummary.percentageChange.toFixed(2)}% All time` : \"Loading...\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-frame-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, timeFrames.map(frame => /*#__PURE__*/React.createElement(\"button\", {\n    key: frame,\n    onClick: () => setSelectedTimeFrame(frame),\n    className: selectedTimeFrame === frame ? \"active\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, frame))), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => formatCash(value),\n    labelFormatter: label => `Date: ${label}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"balance\",\n    stroke: determineLineColor(),\n    strokeWidth: 2,\n    dot: false,\n    animationDuration: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default InvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","useCallback","fetchDailyPnls","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","formatCash","timeFrames","groupedData","daily","weekly","monthly","threeMonths","oneYear","all","InvestmentChart","selectedTimeFrame","setSelectedTimeFrame","chartData","setChartData","investmentSummary","setInvestmentSummary","organizeData","dailyPnls","sort","a","b","Date","entry_date","slice","updateChart","timeFrame","data","toLowerCase","formattedData","formatChartData","chart","summary","fetchData","error","console","length","balance","percentageChange","cumulativeBalance","map","entry","parseFloat","date","toLocaleDateString","determineLineColor","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","frame","key","onClick","width","height","dataKey","hide","formatter","value","labelFormatter","label","type","stroke","strokeWidth","dot","animationDuration"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/InvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { formatCash } from \"../func/functions\";\r\n\r\nconst timeFrames = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"ALL\"];\r\n\r\nlet groupedData = {\r\n  daily: [],\r\n  weekly: [],\r\n  monthly: [],\r\n  threeMonths: [],\r\n  oneYear: [],\r\n  all: [],\r\n};\r\n\r\nconst InvestmentChart = () => {\r\n  const [selectedTimeFrame, setSelectedTimeFrame] = useState(\"ALL\");\r\n  const [chartData, setChartData] = useState([]);\r\n  const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n  const organizeData = (dailyPnls) => {\r\n    dailyPnls.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n    return {\r\n      daily: dailyPnls.slice(-1),\r\n      weekly: dailyPnls.slice(-7),\r\n      monthly: dailyPnls.slice(-30),\r\n      threeMonths: dailyPnls.slice(-90),\r\n      oneYear: dailyPnls.slice(-365),\r\n      all: dailyPnls,\r\n    };\r\n  };\r\n\r\n  const updateChart = useCallback((timeFrame) => {\r\n    const data = groupedData[timeFrame.toLowerCase()];\r\n    const formattedData = formatChartData(data);\r\n    setChartData(formattedData.chart);\r\n    setInvestmentSummary(formattedData.summary);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const dailyPnls = await fetchDailyPnls();\r\n        groupedData = organizeData(dailyPnls);\r\n        updateChart(selectedTimeFrame);\r\n      } catch (error) {\r\n        console.error(\"Error fetching PnL data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [updateChart, selectedTimeFrame]);\r\n\r\n  useEffect(() => {\r\n    updateChart(selectedTimeFrame);\r\n  }, [selectedTimeFrame, updateChart]);\r\n\r\n  const formatChartData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      return {\r\n        chart: [],\r\n        summary: { balance: 0, percentageChange: 0 },\r\n      };\r\n    }\r\n\r\n    let cumulativeBalance = 0;\r\n    const chart = data.map((entry) => {\r\n      cumulativeBalance += parseFloat(entry.balance);\r\n      return {\r\n        date: new Date(entry.entry_date).toLocaleDateString(),\r\n        balance: cumulativeBalance,\r\n      };\r\n    });\r\n\r\n    const summary = {\r\n      balance: cumulativeBalance,\r\n      percentageChange:\r\n        ((cumulativeBalance - data[0].balance) / data[0].balance) * 100,\r\n    };\r\n\r\n    return { chart, summary };\r\n  };\r\n\r\n  const determineLineColor = () => {\r\n    return investmentSummary && investmentSummary.percentageChange >= 0\r\n      ? \"#4caf50\"\r\n      : \"#e74c3c\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"investment-chart-container\">\r\n      <div className=\"investment-summary\">\r\n        <h2>Investing</h2>\r\n        <p>{formatCash(investmentSummary?.balance || 0)}</p>\r\n        <p>\r\n          {investmentSummary\r\n            ? `${investmentSummary.percentageChange.toFixed(2)}% All time`\r\n            : \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"time-frame-selector\">\r\n        {timeFrames.map((frame) => (\r\n          <button\r\n            key={frame}\r\n            onClick={() => setSelectedTimeFrame(frame)}\r\n            className={selectedTimeFrame === frame ? \"active\" : \"\"}\r\n          >\r\n            {frame}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={chartData}>\r\n          <XAxis dataKey=\"date\" hide />\r\n          <YAxis hide />\r\n          <Tooltip\r\n            formatter={(value) => formatCash(value)}\r\n            labelFormatter={(label) => `Date: ${label}`}\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"balance\"\r\n            stroke={determineLineColor()}\r\n            strokeWidth={2}\r\n            dot={false}\r\n            animationDuration={500}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
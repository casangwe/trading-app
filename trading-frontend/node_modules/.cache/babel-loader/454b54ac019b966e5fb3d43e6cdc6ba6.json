{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nconst Graph = () => {\n  const chartRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [trades, setTrades] = useState([]);\n  const [profits, setProfits] = useState({});\n  const calculateProfitsForAllTimePeriods = trades => {\n    const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n    const profitsData = {};\n    const now = new Date();\n    const formatDate = date => {\n      const [month, day, year] = date.split(\"/\");\n      return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n    };\n    const startDates = {\n      \"1D\": formatDate(new Date(now.setDate(now.getDate() - 1)).toLocaleDateString()),\n      \"1W\": formatDate(new Date(now.setDate(now.getDate() - 7)).toLocaleDateString()),\n      \"1M\": formatDate(new Date(now.setMonth(now.getMonth() - 1)).toLocaleDateString()),\n      \"3M\": formatDate(new Date(now.setMonth(now.getMonth() - 3)).toLocaleDateString()),\n      \"Y-TD\": formatDate(new Date(now.getFullYear(), 0, 1).toLocaleDateString()),\n      \"1Y\": formatDate(new Date(now.setFullYear(now.getFullYear() - 1)).toLocaleDateString()),\n      Most: formatDate(new Date(0).toLocaleDateString())\n    };\n    console.log(startDates);\n    for (const period of timePeriods) {\n      const startDate = startDates[period];\n      console.log(startDate);\n      const filteredTrades = trades.filter(trade => new Date(trade.close_date) >= startDate);\n      console.log(filteredTrades);\n      const totalProfit = filteredTrades.reduce((sum, trade) => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          return sum + (exitPrice - entryPrice) * contracts * 100;\n        }\n        return sum;\n      }, 0);\n      profitsData[period] = totalProfit;\n    }\n    return profitsData;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const fetchedTrades = await fetchTrades(); // Fetch trade data from the backend\n        setTrades(fetchedTrades); // Set fetched trade data\n        const calculatedProfits = calculateProfitsForAllTimePeriods(fetchedTrades);\n        setProfits(calculatedProfits);\n        setLoading(false); // Set loading state to false\n      } catch (error) {\n        console.error(\"Error fetching trades:\", error);\n      }\n    };\n    fetchData(); // Fetch trade data when component mounts\n  }, []);\n  useEffect(() => {\n    if (!loading && trades.length > 0) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      const profitValues = Object.values(profits);\n      const backgroundColors = profitValues.map(value => value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\");\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: Object.keys(profits),\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitValues,\n            backgroundColor: backgroundColors,\n            barThickness: 40\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              },\n              grid: {\n                color: context => context.tick.value === 0 ? \"rgba(0, 0, 0, 1)\" : \"rgba(0, 0, 0, 0)\",\n                lineWidth: 0.5\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return value === 0 ? value : \"\";\n                }\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        if (myChart) {\n          myChart.destroy();\n        }\n      };\n    }\n  }, [loading, trades, profits]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 38\n    }\n  }));\n};\nexport default Graph;","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchTrades","Graph","chartRef","loading","setLoading","trades","setTrades","profits","setProfits","calculateProfitsForAllTimePeriods","timePeriods","profitsData","now","Date","formatDate","date","month","day","year","split","padStart","startDates","setDate","getDate","toLocaleDateString","setMonth","getMonth","getFullYear","setFullYear","Most","console","log","period","startDate","filteredTrades","filter","trade","close_date","totalProfit","reduce","sum","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","fetchData","fetchedTrades","calculatedProfits","error","length","ctx","current","getContext","profitValues","Object","values","backgroundColors","map","value","myChart","window","Chart","type","data","labels","keys","datasets","label","backgroundColor","barThickness","options","plugins","legend","display","scales","x","grid","y","title","text","color","context","tick","lineWidth","ticks","callback","index","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\n\r\nconst Graph = () => {\r\n  const chartRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [trades, setTrades] = useState([]);\r\n  const [profits, setProfits] = useState({});\r\n\r\n  const calculateProfitsForAllTimePeriods = (trades) => {\r\n    const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n    const profitsData = {};\r\n    const now = new Date();\r\n\r\n    const formatDate = (date) => {\r\n      const [month, day, year] = date.split(\"/\");\r\n      return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n    };\r\n\r\n    const startDates = {\r\n      \"1D\": formatDate(\r\n        new Date(now.setDate(now.getDate() - 1)).toLocaleDateString()\r\n      ),\r\n      \"1W\": formatDate(\r\n        new Date(now.setDate(now.getDate() - 7)).toLocaleDateString()\r\n      ),\r\n      \"1M\": formatDate(\r\n        new Date(now.setMonth(now.getMonth() - 1)).toLocaleDateString()\r\n      ),\r\n      \"3M\": formatDate(\r\n        new Date(now.setMonth(now.getMonth() - 3)).toLocaleDateString()\r\n      ),\r\n      \"Y-TD\": formatDate(\r\n        new Date(now.getFullYear(), 0, 1).toLocaleDateString()\r\n      ),\r\n      \"1Y\": formatDate(\r\n        new Date(now.setFullYear(now.getFullYear() - 1)).toLocaleDateString()\r\n      ),\r\n      Most: formatDate(new Date(0).toLocaleDateString()),\r\n    };\r\n\r\n    console.log(startDates);\r\n    for (const period of timePeriods) {\r\n      const startDate = startDates[period];\r\n      console.log(startDate);\r\n      const filteredTrades = trades.filter(\r\n        (trade) => new Date(trade.close_date) >= startDate\r\n      );\r\n      console.log(filteredTrades);\r\n\r\n      const totalProfit = filteredTrades.reduce((sum, trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n        if (!isNaN(exitPrice)) {\r\n          return sum + (exitPrice - entryPrice) * contracts * 100;\r\n        }\r\n        return sum;\r\n      }, 0);\r\n\r\n      profitsData[period] = totalProfit;\r\n    }\r\n\r\n    return profitsData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const fetchedTrades = await fetchTrades(); // Fetch trade data from the backend\r\n        setTrades(fetchedTrades); // Set fetched trade data\r\n        const calculatedProfits =\r\n          calculateProfitsForAllTimePeriods(fetchedTrades);\r\n        setProfits(calculatedProfits);\r\n        setLoading(false); // Set loading state to false\r\n      } catch (error) {\r\n        console.error(\"Error fetching trades:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch trade data when component mounts\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!loading && trades.length > 0) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const profitValues = Object.values(profits);\r\n      const backgroundColors = profitValues.map((value) =>\r\n        value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n      );\r\n\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: Object.keys(profits),\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitValues,\r\n              backgroundColor: backgroundColors,\r\n              barThickness: 40,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n              grid: {\r\n                color: (context) =>\r\n                  context.tick.value === 0\r\n                    ? \"rgba(0, 0, 0, 1)\"\r\n                    : \"rgba(0, 0, 0, 0)\",\r\n                lineWidth: 0.5,\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  return value === 0 ? value : \"\";\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        if (myChart) {\r\n          myChart.destroy();\r\n        }\r\n      };\r\n    }\r\n  }, [loading, trades, profits]);\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1C,MAAMU,iCAAiC,GAAIJ,MAAM,IAAK;IACpD,MAAMK,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;IAChE,MAAMC,WAAW,GAAG,CAAC,CAAC;IACtB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IAEtB,MAAMC,UAAU,GAAIC,IAAI,IAAK;MAC3B,MAAM,CAACC,KAAK,EAAEC,GAAG,EAAEC,IAAI,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;MAC1C,OAAQ,GAAED,IAAK,IAAGF,KAAK,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGH,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;IACpE,CAAC;IAED,MAAMC,UAAU,GAAG;MACjB,IAAI,EAAEP,UAAU,CACd,IAAID,IAAI,CAACD,GAAG,CAACU,OAAO,CAACV,GAAG,CAACW,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAC9D,CAAC;MACD,IAAI,EAAEV,UAAU,CACd,IAAID,IAAI,CAACD,GAAG,CAACU,OAAO,CAACV,GAAG,CAACW,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAC9D,CAAC;MACD,IAAI,EAAEV,UAAU,CACd,IAAID,IAAI,CAACD,GAAG,CAACa,QAAQ,CAACb,GAAG,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACF,kBAAkB,CAAC,CAChE,CAAC;MACD,IAAI,EAAEV,UAAU,CACd,IAAID,IAAI,CAACD,GAAG,CAACa,QAAQ,CAACb,GAAG,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACF,kBAAkB,CAAC,CAChE,CAAC;MACD,MAAM,EAAEV,UAAU,CAChB,IAAID,IAAI,CAACD,GAAG,CAACe,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACH,kBAAkB,CAAC,CACvD,CAAC;MACD,IAAI,EAAEV,UAAU,CACd,IAAID,IAAI,CAACD,GAAG,CAACgB,WAAW,CAAChB,GAAG,CAACe,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACH,kBAAkB,CAAC,CACtE,CAAC;MACDK,IAAI,EAAEf,UAAU,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,CAACW,kBAAkB,CAAC,CAAC;IACnD,CAAC;IAEDM,OAAO,CAACC,GAAG,CAACV,UAAU,CAAC;IACvB,KAAK,MAAMW,MAAM,IAAItB,WAAW,EAAE;MAChC,MAAMuB,SAAS,GAAGZ,UAAU,CAACW,MAAM,CAAC;MACpCF,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;MACtB,MAAMC,cAAc,GAAG7B,MAAM,CAAC8B,MAAM,CACjCC,KAAK,IAAK,IAAIvB,IAAI,CAACuB,KAAK,CAACC,UAAU,CAAC,IAAIJ,SAC3C,CAAC;MACDH,OAAO,CAACC,GAAG,CAACG,cAAc,CAAC;MAE3B,MAAMI,WAAW,GAAGJ,cAAc,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,KAAK,KAAK;QACxD,MAAMK,UAAU,GAAGC,UAAU,CAACN,KAAK,CAACO,WAAW,CAAC;QAChD,MAAMC,SAAS,GAAGF,UAAU,CAACN,KAAK,CAACS,UAAU,CAAC;QAC9C,MAAMC,SAAS,GAAGV,KAAK,CAACU,SAAS;QACjC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC,EAAE;UACrB,OAAOJ,GAAG,GAAG,CAACI,SAAS,GAAGH,UAAU,IAAIK,SAAS,GAAG,GAAG;QACzD;QACA,OAAON,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC;MAEL7B,WAAW,CAACqB,MAAM,CAAC,GAAGM,WAAW;IACnC;IAEA,OAAO3B,WAAW;EACpB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,MAAMmD,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMjD,WAAW,CAAC,CAAC,CAAC,CAAC;QAC3CM,SAAS,CAAC2C,aAAa,CAAC,CAAC,CAAC;QAC1B,MAAMC,iBAAiB,GACrBzC,iCAAiC,CAACwC,aAAa,CAAC;QAClDzC,UAAU,CAAC0C,iBAAiB,CAAC;QAC7B9C,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAO+C,KAAK,EAAE;QACdrB,OAAO,CAACqB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDH,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAENnD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,OAAO,IAAIE,MAAM,CAAC+C,MAAM,GAAG,CAAC,EAAE;MACjC,MAAMC,GAAG,GAAGnD,QAAQ,CAACoD,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7C,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACnD,OAAO,CAAC;MAC3C,MAAMoD,gBAAgB,GAAGH,YAAY,CAACI,GAAG,CAAEC,KAAK,IAC9CA,KAAK,IAAI,CAAC,GAAG,SAAS,GAAG,oBAC3B,CAAC;MAED,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACX,GAAG,EAAE;QACpCY,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,MAAM,EAAEV,MAAM,CAACW,IAAI,CAAC7D,OAAO,CAAC;UAC5B8D,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,aAAa;YACpBJ,IAAI,EAAEV,YAAY;YAClBe,eAAe,EAAEZ,gBAAgB;YACjCa,YAAY,EAAE;UAChB,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE;YACX;UACF,CAAC;UACDC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,IAAI,EAAE;gBACJH,OAAO,EAAE;cACX;YACF,CAAC;YACDI,CAAC,EAAE;cACDJ,OAAO,EAAE,IAAI;cACbK,KAAK,EAAE;gBACLL,OAAO,EAAE,IAAI;gBACbM,IAAI,EAAE;cACR,CAAC;cACDH,IAAI,EAAE;gBACJI,KAAK,EAAGC,OAAO,IACbA,OAAO,CAACC,IAAI,CAACxB,KAAK,KAAK,CAAC,GACpB,kBAAkB,GAClB,kBAAkB;gBACxByB,SAAS,EAAE;cACb,CAAC;cACDC,KAAK,EAAE;gBACLC,QAAQ,EAAE,SAAAA,CAAU3B,KAAK,EAAE4B,KAAK,EAAE/B,MAAM,EAAE;kBACxC,OAAOG,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;gBACjC;cACF;YACF;UACF;QACF;MACF,CAAC,CAAC;MAEF,OAAO,MAAM;QACX,IAAIC,OAAO,EAAE;UACXA,OAAO,CAAC4B,OAAO,CAAC,CAAC;QACnB;MACF,CAAC;IACH;EACF,CAAC,EAAE,CAACvF,OAAO,EAAEE,MAAM,EAAEE,OAAO,CAAC,CAAC;EAE9B,oBACEX,KAAA,CAAA+F,aAAA;IAAKC,SAAS,EAAC,OAAO;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB/F,OAAO,gBAAGP,KAAA,CAAA+F,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,YAAa,CAAC,gBAAGtG,KAAA,CAAA+F,aAAA;IAAQQ,GAAG,EAAEjG,QAAS;IAAA2F,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACpD,CAAC;AAEV,CAAC;AAED,eAAejG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Account.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/account.css\";\nimport AccountGraph from \"./AccountGraph\";\nconst Account = ({\n  trades\n}) => {\n  // State to store the total account balance\n  const [accountBalance, setAccountBalance] = useState(0);\n  // State to store the total daily profit/loss\n  const [dailyPL, setDailyPL] = useState(0);\n\n  // Calculate total account balance and daily profit/loss when trades change\n  useEffect(() => {\n    // Calculate total account balance and daily profit/loss\n    const calculateBalanceAndPL = () => {\n      let balance = 0;\n      let dailyPL = 0;\n      trades.forEach(trade => {\n        // Extract trade data\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n\n        // Calculate profit for the trade\n        const profit = (exitPrice - entryPrice) * contracts;\n\n        // Update daily profit/loss\n        dailyPL += profit;\n\n        // Update total account balance\n        balance += profit;\n      });\n\n      // Update state with total account balance and daily profit/loss\n      setAccountBalance(balance);\n      setDailyPL(dailyPL);\n    };\n\n    // Call the function to calculate balance and daily profit/loss\n    calculateBalanceAndPL();\n  }, [trades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, (accountBalance * 100).toFixed(2))), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Daily P/L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, (dailyPL * 100).toFixed(2))), /*#__PURE__*/React.createElement(AccountGraph, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Account;","map":{"version":3,"names":["React","useState","useEffect","AccountGraph","Account","trades","accountBalance","setAccountBalance","dailyPL","setDailyPL","calculateBalanceAndPL","balance","forEach","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","profit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/account.css\";\r\nimport AccountGraph from \"./AccountGraph\";\r\n\r\nconst Account = ({ trades }) => {\r\n  // State to store the total account balance\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n  // State to store the total daily profit/loss\r\n  const [dailyPL, setDailyPL] = useState(0);\r\n\r\n  // Calculate total account balance and daily profit/loss when trades change\r\n  useEffect(() => {\r\n    // Calculate total account balance and daily profit/loss\r\n    const calculateBalanceAndPL = () => {\r\n      let balance = 0;\r\n      let dailyPL = 0;\r\n\r\n      trades.forEach((trade) => {\r\n        // Extract trade data\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n\r\n        // Calculate profit for the trade\r\n        const profit = (exitPrice - entryPrice) * contracts;\r\n\r\n        // Update daily profit/loss\r\n        dailyPL += profit;\r\n\r\n        // Update total account balance\r\n        balance += profit;\r\n      });\r\n\r\n      // Update state with total account balance and daily profit/loss\r\n      setAccountBalance(balance);\r\n      setDailyPL(dailyPL);\r\n    };\r\n\r\n    // Call the function to calculate balance and daily profit/loss\r\n    calculateBalanceAndPL();\r\n  }, [trades]);\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"card\">\r\n        <p>Account</p>\r\n        <p className=\"cash\">{(accountBalance * 100).toFixed(2)}</p>\r\n      </div>{\" \"}\r\n      <div className=\"card\">\r\n        <p>Daily P/L</p>\r\n        <p className=\"cash\">{(dailyPL * 100).toFixed(2)}</p>\r\n      </div>\r\n      <AccountGraph />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
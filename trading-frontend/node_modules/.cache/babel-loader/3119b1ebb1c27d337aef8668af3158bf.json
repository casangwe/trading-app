{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Calender.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\"; // Make sure to import your fetchTrades function\nimport Calendar from \"react-calendar\"; // Assuming you are using react-calendar\n\nconst TradeCalendar = () => {\n  const [trades, setTrades] = useState([]);\n  const [tradeStatusByDate, setTradeStatusByDate] = useState({});\n  useEffect(() => {\n    const getTrades = async () => {\n      try {\n        const fetchedTrades = await fetchTrades();\n        setTrades(fetchedTrades);\n      } catch (error) {\n        console.error(\"Error fetching trades:\", error);\n      }\n    };\n    getTrades();\n  }, []);\n  useEffect(() => {\n    if (trades.length > 0) {\n      const statusByDate = {};\n      trades.forEach(trade => {\n        const date = trade.closeDate;\n        if (!statusByDate[date]) {\n          statusByDate[date] = {\n            profit: 0,\n            loss: 0\n          };\n        }\n        if (trade.profitLoss > 0) {\n          statusByDate[date].profit += trade.profitLoss;\n        } else {\n          statusByDate[date].loss += Math.abs(trade.profitLoss);\n        }\n      });\n      setTradeStatusByDate(statusByDate);\n    }\n  }, [trades]);\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view === \"month\") {\n      const dateString = date.toISOString().split(\"T\")[0];\n      if (tradeStatusByDate[dateString]) {\n        const {\n          profit,\n          loss\n        } = tradeStatusByDate[dateString];\n        if (profit > 0 && loss === 0) {\n          return \"green-tile\";\n        } else if (loss > 0 && profit === 0) {\n          return \"red-tile\";\n        } else {\n          return \"yellow-tile\"; // If both profit and loss exist on the same day\n        }\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Trade Calendar\"), /*#__PURE__*/React.createElement(Calendar, {\n    tileClassName: tileClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\nexport default TradeCalendar;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","Calendar","TradeCalendar","trades","setTrades","tradeStatusByDate","setTradeStatusByDate","getTrades","fetchedTrades","error","console","length","statusByDate","forEach","trade","date","closeDate","profit","loss","profitLoss","Math","abs","tileClassName","view","dateString","toISOString","split","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Calender.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\"; // Make sure to import your fetchTrades function\r\nimport Calendar from \"react-calendar\"; // Assuming you are using react-calendar\r\n\r\nconst TradeCalendar = () => {\r\n  const [trades, setTrades] = useState([]);\r\n  const [tradeStatusByDate, setTradeStatusByDate] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getTrades = async () => {\r\n      try {\r\n        const fetchedTrades = await fetchTrades();\r\n        setTrades(fetchedTrades);\r\n      } catch (error) {\r\n        console.error(\"Error fetching trades:\", error);\r\n      }\r\n    };\r\n\r\n    getTrades();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (trades.length > 0) {\r\n      const statusByDate = {};\r\n      trades.forEach((trade) => {\r\n        const date = trade.closeDate;\r\n        if (!statusByDate[date]) {\r\n          statusByDate[date] = { profit: 0, loss: 0 };\r\n        }\r\n        if (trade.profitLoss > 0) {\r\n          statusByDate[date].profit += trade.profitLoss;\r\n        } else {\r\n          statusByDate[date].loss += Math.abs(trade.profitLoss);\r\n        }\r\n      });\r\n      setTradeStatusByDate(statusByDate);\r\n    }\r\n  }, [trades]);\r\n\r\n  const tileClassName = ({ date, view }) => {\r\n    if (view === \"month\") {\r\n      const dateString = date.toISOString().split(\"T\")[0];\r\n      if (tradeStatusByDate[dateString]) {\r\n        const { profit, loss } = tradeStatusByDate[dateString];\r\n        if (profit > 0 && loss === 0) {\r\n          return \"green-tile\";\r\n        } else if (loss > 0 && profit === 0) {\r\n          return \"red-tile\";\r\n        } else {\r\n          return \"yellow-tile\"; // If both profit and loss exist on the same day\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Trade Calendar</h2>\r\n      <Calendar tileClassName={tileClassName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// trading-app/trading-frontend/src/components/controllers/api/TradesAPI.js\n\nconst API_BASE_URL = \"http://localhost:8000\"; // Ensure this is the correct URL for your API\n\n// Fetch all trades with pagination\nexport const fetchTrades = async (skip = 0, limit = 100) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/?skip=${skip}&limit=${limit}`);\n    if (!response.ok) throw new Error(\"Error fetching trades\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Trades Error:\", error);\n    throw error;\n  }\n};\n\n// Create a new trade\nexport const createTrade = async (tradeData, userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/?user_id=${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(tradeData)\n    });\n    if (!response.ok) throw new Error(\"Error creating trade\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Create Trade Error:\", error);\n    throw error;\n  }\n};\n\n// Update an existing trade\nexport const updateTrade = async (tradeId, tradeData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(tradeData)\n    });\n    if (!response.ok) throw new Error(\"Error updating trade\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update Trade Error:\", error);\n    throw error;\n  }\n};\n\n// Delete a trade\nexport const deleteTrade = async tradeId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Error deleting trade\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete Trade Error:\", error);\n    throw error;\n  }\n};\n\n// Fetch a single trade by ID\nexport const fetchTradeById = async tradeId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}`);\n    if (!response.ok) throw new Error(\"Trade not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Trade Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchTrades","skip","limit","response","fetch","ok","Error","json","error","console","createTrade","tradeData","userId","method","headers","body","JSON","stringify","updateTrade","tradeId","deleteTrade","fetchTradeById"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/TradesAPI.js"],"sourcesContent":["// trading-app/trading-frontend/src/components/controllers/api/TradesAPI.js\r\n\r\nconst API_BASE_URL = \"http://localhost:8000\"; // Ensure this is the correct URL for your API\r\n\r\n// Fetch all trades with pagination\r\nexport const fetchTrades = async (skip = 0, limit = 100) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/trades/?skip=${skip}&limit=${limit}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Error fetching trades\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Trades Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new trade\r\nexport const createTrade = async (tradeData, userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/trades/?user_id=${userId}`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(tradeData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Error creating trade\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Create Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing trade\r\nexport const updateTrade = async (tradeId, tradeData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(tradeData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Error updating trade\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a trade\r\nexport const deleteTrade = async (tradeId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) throw new Error(\"Error deleting trade\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a single trade by ID\r\nexport const fetchTradeById = async (tradeId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}`);\r\n    if (!response.ok) throw new Error(\"Trade not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\TradeSum.js\";\n// TradeSum.js\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nimport Sort from \"./Sort\";\nconst TradeSum = () => {\n  // eslint-disable-next-line\n  const [trades, setTrades] = useState([]);\n  const [weeklyTrades, setWeeklyTrades] = useState([]);\n  const [monthlyTrades, setMonthlyTrades] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const fetchedTrades = await fetchTrades();\n        setTrades(fetchedTrades);\n        filterTrades(fetchedTrades);\n      } catch (error) {\n        console.error(\"Error fetching trades:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const filterTrades = trades => {\n    const now = new Date();\n    const oneWeekAgo = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 10);\n    const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n    const weekly = trades.filter(trade => new Date(trade.entryDate) >= oneWeekAgo);\n    const monthly = trades.filter(trade => new Date(trade.entryDate) >= oneMonthAgo);\n    setWeeklyTrades(weekly);\n    setMonthlyTrades(monthly);\n  };\n  const renderTrades = trades => {\n    const totalTrades = trades.length;\n    const winningTrades = trades.filter(trade => trade.profitLoss > 0).length;\n    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(2) : \"0\";\n    const totalPnL = trades.reduce((acc, trade) => acc + (trade.exitPrice - trade.entryPrice) * trade.contracts, 0).toFixed(2);\n    const totalEntry = trades.reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0).toFixed(2);\n    const pnlPercentage = totalEntry > 0 ? (totalPnL / totalEntry * 100).toFixed(2) : \"0\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, trades.map(trade => /*#__PURE__*/React.createElement(\"div\", {\n      key: trade.id,\n      className: \"trade-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, trade.symbol, \" $\", trade.strikePrice, \" \", trade.optionType), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"middle-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"$\", trade.entryPrice.toFixed(2), \" - $\", trade.exitPrice.toFixed(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, ((trade.exitPrice - trade.entryPrice) / trade.entryPrice * 100).toFixed(2), \"%\"))), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"hr-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"win-rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"Win Rate:\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, winningTrades, \"/\", totalTrades), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"percent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, winRate, \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pnl-rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"P/L:\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"$\", (totalPnL * 100).toFixed(2)), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"percent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, pnlPercentage, \"%\")));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Week\")), renderTrades(weeklyTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Month\")), renderTrades(monthlyTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Sort, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default TradeSum;\n\n// // TradeSum.js\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTrades } from \"./ApiCalls\";\n// import Sort from \"./Sort\";\n\n// const TradeSum = () => {\n//   // eslint-disable-next-line\n//   const [dailyTrades, setDailyTrades] = useState([]);\n//   const [weeklyTrades, setWeeklyTrades] = useState([]);\n//   const [monthlyTrades, setMonthlyTrades] = useState([]);\n\n//   useEffect(() => {\n//     const [trades, setTrades] = useState([]);\n//     const [weeklyTrades, setWeeklyTrades] = useState([]);\n//     const [monthlyTrades, setMonthlyTrades] = useState([]);\n\n//     useEffect(() => {\n//       const fetchData = async () => {\n//         try {\n//           const fetchedTrades = await fetchTrades();\n//           setTrades(fetchedTrades);\n//           filterTrades(fetchedTrades);\n//         } catch (error) {\n//           console.error(\"Error fetching trades:\", error);\n//         }\n//       };\n\n//       fetchData();\n//     }, []);\n\n//     const filterTrades = (trades) => {\n//       const now = new Date();\n//       const oneWeekAgo = new Date(\n//         now.getFullYear(),\n//         now.getMonth(),\n//         now.getDate() - 7\n//       );\n//       const oneMonthAgo = new Date(\n//         now.getFullYear(),\n//         now.getMonth() - 1,\n//         now.getDate()\n//       );\n\n//       const weekly = trades.filter(\n//         (trade) => new Date(trade.entryDate) >= oneWeekAgo\n//       );\n//       const monthly = trades.filter(\n//         (trade) => new Date(trade.entryDate) >= oneMonthAgo\n//       );\n\n//       setWeeklyTrades(weekly);\n//       setMonthlyTrades(monthly);\n//     };\n\n//     fetchAndCategorizeTrades();\n//   }, []);\n\n//   const renderTrades = (trades) => {\n//     const totalTrades = trades.length;\n//     const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\n//     const winRate =\n//       totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\n\n//     const totalPnL = trades\n//       .reduce(\n//         (acc, trade) =>\n//           acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\n//         0\n//       )\n//       .toFixed(2);\n//     const totalEntry = trades\n//       .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\n//       .toFixed(2);\n//     const pnlPercentage =\n//       totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\n\n//     return (\n//       <div>\n//         {trades.map((trade) => (\n//           <div key={trade.id} className=\"trade-item\">\n//             <div className=\"left-column\">\n//               {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\n//               {trade.expDate.split(\"-\").slice(1).join(\"/\")}\n//             </div>\n//             <div className=\"middle-column\">\n//               ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\n//             </div>\n//             <div className=\"right-column\">\n//               {(\n//                 ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\n//                 100\n//               ).toFixed(2)}\n//               %\n//             </div>\n//           </div>\n//         ))}\n//         <hr className=\"hr-bar\"></hr>\n//         <div className=\"win-rate\">\n//           <span className=\"title\">Win Rate:</span>\n//           <span className=\"value\">\n//             {winningTrades}/{totalTrades}\n//           </span>\n//           <span className=\"percent\">{winRate}%</span>\n//         </div>\n//         <div className=\"pnl-rate\">\n//           <span className=\"title\">P/L:</span>\n//           <span className=\"value\">${totalPnL}</span>\n//           <span className=\"percent\">{pnlPercentage}%</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"trade-summary\">\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Week</p>\n//         </div>\n//         {renderTrades(weeklyTrades)}\n//       </div>\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Month</p>\n//         </div>\n//         {renderTrades(monthlyTrades)}\n//       </div>\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Sort</p>\n//         </div>\n//         <div className=\"analysis-sort\">\n//           <Sort />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TradeSum;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTrades } from \"./ApiCalls\";\n// import Sort from \"./Sort\";\n\n// const TradeSum = () => {\n//   // eslint-disable-next-line\n//   const [dailyTrades, setDailyTrades] = useState([]);\n//   const [weeklyTrades, setWeeklyTrades] = useState([]);\n//   const [monthlyTrades, setMonthlyTrades] = useState([]);\n\n//   useEffect(() => {\n//     const fetchAndCategorizeTrades = async () => {\n//       try {\n//         const trades = await fetchTrades();\n//         const today = new Date();\n//         const startOfWeek = new Date(today);\n//         startOfWeek.setDate(today.getDate() - today.getDay() + 1); // Monday\n\n//         const daily = [];\n//         const weekly = [];\n//         const monthly = [];\n\n//         trades.forEach((trade) => {\n//           const tradeDate = new Date(trade.entryDate);\n//           if (tradeDate.toDateString() === today.toDateString()) {\n//             daily.push(trade);\n//           }\n//           if (tradeDate >= startOfWeek && tradeDate <= today) {\n//             weekly.push(trade);\n//           }\n//           if (\n//             tradeDate.getMonth() === today.getMonth() &&\n//             tradeDate.getFullYear() === today.getFullYear()\n//           ) {\n//             monthly.push(trade);\n//           }\n//         });\n\n//         setDailyTrades(daily);\n//         setWeeklyTrades(weekly);\n//         setMonthlyTrades(monthly);\n//       } catch (error) {\n//         console.error(\"Error fetching trades:\", error);\n//       }\n//     };\n\n//     fetchAndCategorizeTrades();\n//   }, []);\n\n//   const renderTrades = (trades) => {\n//     const totalTrades = trades.length;\n//     const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\n//     const winRate =\n//       totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\n\n//     const totalPnL = trades\n//       .reduce(\n//         (acc, trade) =>\n//           acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\n//         0\n//       )\n//       .toFixed(2);\n//     const totalEntry = trades\n//       .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\n//       .toFixed(2);\n//     const pnlPercentage =\n//       totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\n\n//     return (\n//       <div>\n//         {trades.map((trade) => (\n//           <div key={trade.id} className=\"trade-item\">\n//             <div className=\"left-column\">\n//               {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\n//               {trade.expDate.split(\"-\").slice(1).join(\"/\")}\n//             </div>\n//             <div className=\"middle-column\">\n//               ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\n//             </div>\n//             <div className=\"right-column\">\n//               {(\n//                 ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\n//                 100\n//               ).toFixed(2)}\n//               %\n//             </div>\n//           </div>\n//         ))}\n//         <hr className=\"hr-bar\"></hr>\n//         <div className=\"win-rate\">\n//           <span className=\"title\">Win Rate:</span>\n//           <span className=\"value\">\n//             {winningTrades}/{totalTrades}\n//           </span>\n//           <span className=\"percent\">{winRate}%</span>\n//         </div>\n//         <div className=\"pnl-rate\">\n//           <span className=\"title\">P/L:</span>\n//           <span className=\"value\">${(totalPnL * 100).toFixed(2)}</span>\n//           <span className=\"percent\">{pnlPercentage}%</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"trade-summary\">\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Week</p>\n//         </div>{\" \"}\n//         {renderTrades(weeklyTrades)}\n//       </div>\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Month</p>\n//         </div>{\" \"}\n//         {renderTrades(monthlyTrades)}\n//       </div>\n//       <div className=\"trade-category\">\n//         <div className=\"analysis-sort\">\n//           <Sort />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TradeSum;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","Sort","TradeSum","trades","setTrades","weeklyTrades","setWeeklyTrades","monthlyTrades","setMonthlyTrades","fetchData","fetchedTrades","filterTrades","error","console","now","Date","oneWeekAgo","getFullYear","getMonth","getDate","oneMonthAgo","weekly","filter","trade","entryDate","monthly","renderTrades","totalTrades","length","winningTrades","profitLoss","winRate","toFixed","totalPnL","reduce","acc","exitPrice","entryPrice","contracts","totalEntry","pnlPercentage","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","id","className","symbol","strikePrice","optionType"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/TradeSum.js"],"sourcesContent":["// TradeSum.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\nimport Sort from \"./Sort\";\r\n\r\nconst TradeSum = () => {\r\n  // eslint-disable-next-line\r\n  const [trades, setTrades] = useState([]);\r\n  const [weeklyTrades, setWeeklyTrades] = useState([]);\r\n  const [monthlyTrades, setMonthlyTrades] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const fetchedTrades = await fetchTrades();\r\n        setTrades(fetchedTrades);\r\n        filterTrades(fetchedTrades);\r\n      } catch (error) {\r\n        console.error(\"Error fetching trades:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const filterTrades = (trades) => {\r\n    const now = new Date();\r\n    const oneWeekAgo = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate() - 10\r\n    );\r\n    const oneMonthAgo = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth() - 1,\r\n      now.getDate()\r\n    );\r\n\r\n    const weekly = trades.filter(\r\n      (trade) => new Date(trade.entryDate) >= oneWeekAgo\r\n    );\r\n    const monthly = trades.filter(\r\n      (trade) => new Date(trade.entryDate) >= oneMonthAgo\r\n    );\r\n\r\n    setWeeklyTrades(weekly);\r\n    setMonthlyTrades(monthly);\r\n  };\r\n\r\n  const renderTrades = (trades) => {\r\n    const totalTrades = trades.length;\r\n    const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\r\n    const winRate =\r\n      totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\r\n\r\n    const totalPnL = trades\r\n      .reduce(\r\n        (acc, trade) =>\r\n          acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\r\n        0\r\n      )\r\n      .toFixed(2);\r\n    const totalEntry = trades\r\n      .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\r\n      .toFixed(2);\r\n    const pnlPercentage =\r\n      totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\r\n\r\n    return (\r\n      <div>\r\n        {trades.map((trade) => (\r\n          <div key={trade.id} className=\"trade-item\">\r\n            <div className=\"left-column\">\r\n              {trade.symbol} ${trade.strikePrice} {trade.optionType}\r\n              {/* {trade.expDate.split(\"-\").slice(1).join(\"/\")} */}\r\n            </div>\r\n            <div className=\"middle-column\">\r\n              ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\r\n            </div>\r\n            <div className=\"right-column\">\r\n              {(\r\n                ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\r\n                100\r\n              ).toFixed(2)}\r\n              %\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <hr className=\"hr-bar\"></hr>\r\n        <div className=\"win-rate\">\r\n          <span className=\"title\">Win Rate:</span>\r\n          <span className=\"value\">\r\n            {winningTrades}/{totalTrades}\r\n          </span>\r\n          <span className=\"percent\">{winRate}%</span>\r\n        </div>\r\n        <div className=\"pnl-rate\">\r\n          <span className=\"title\">P/L:</span>\r\n          <span className=\"value\">${(totalPnL * 100).toFixed(2)}</span>\r\n          <span className=\"percent\">{pnlPercentage}%</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"trade-summary\">\r\n      <div className=\"trade-category\">\r\n        <div className=\"header\">\r\n          <p>Week</p>\r\n        </div>\r\n        {renderTrades(weeklyTrades)}\r\n      </div>\r\n      <div className=\"trade-category\">\r\n        <div className=\"header\">\r\n          <p>Month</p>\r\n        </div>\r\n        {renderTrades(monthlyTrades)}\r\n      </div>\r\n      <div className=\"trade-category\">\r\n        <div className=\"header\">\r\n          <p>Sort</p>\r\n        </div>\r\n        <div className=\"analysis-sort\">\r\n          <Sort />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeSum;\r\n\r\n// // TradeSum.js\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTrades } from \"./ApiCalls\";\r\n// import Sort from \"./Sort\";\r\n\r\n// const TradeSum = () => {\r\n//   // eslint-disable-next-line\r\n//   const [dailyTrades, setDailyTrades] = useState([]);\r\n//   const [weeklyTrades, setWeeklyTrades] = useState([]);\r\n//   const [monthlyTrades, setMonthlyTrades] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const [trades, setTrades] = useState([]);\r\n//     const [weeklyTrades, setWeeklyTrades] = useState([]);\r\n//     const [monthlyTrades, setMonthlyTrades] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//       const fetchData = async () => {\r\n//         try {\r\n//           const fetchedTrades = await fetchTrades();\r\n//           setTrades(fetchedTrades);\r\n//           filterTrades(fetchedTrades);\r\n//         } catch (error) {\r\n//           console.error(\"Error fetching trades:\", error);\r\n//         }\r\n//       };\r\n\r\n//       fetchData();\r\n//     }, []);\r\n\r\n//     const filterTrades = (trades) => {\r\n//       const now = new Date();\r\n//       const oneWeekAgo = new Date(\r\n//         now.getFullYear(),\r\n//         now.getMonth(),\r\n//         now.getDate() - 7\r\n//       );\r\n//       const oneMonthAgo = new Date(\r\n//         now.getFullYear(),\r\n//         now.getMonth() - 1,\r\n//         now.getDate()\r\n//       );\r\n\r\n//       const weekly = trades.filter(\r\n//         (trade) => new Date(trade.entryDate) >= oneWeekAgo\r\n//       );\r\n//       const monthly = trades.filter(\r\n//         (trade) => new Date(trade.entryDate) >= oneMonthAgo\r\n//       );\r\n\r\n//       setWeeklyTrades(weekly);\r\n//       setMonthlyTrades(monthly);\r\n//     };\r\n\r\n//     fetchAndCategorizeTrades();\r\n//   }, []);\r\n\r\n//   const renderTrades = (trades) => {\r\n//     const totalTrades = trades.length;\r\n//     const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\r\n//     const winRate =\r\n//       totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\r\n\r\n//     const totalPnL = trades\r\n//       .reduce(\r\n//         (acc, trade) =>\r\n//           acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\r\n//         0\r\n//       )\r\n//       .toFixed(2);\r\n//     const totalEntry = trades\r\n//       .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\r\n//       .toFixed(2);\r\n//     const pnlPercentage =\r\n//       totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\r\n\r\n//     return (\r\n//       <div>\r\n//         {trades.map((trade) => (\r\n//           <div key={trade.id} className=\"trade-item\">\r\n//             <div className=\"left-column\">\r\n//               {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\r\n//               {trade.expDate.split(\"-\").slice(1).join(\"/\")}\r\n//             </div>\r\n//             <div className=\"middle-column\">\r\n//               ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\r\n//             </div>\r\n//             <div className=\"right-column\">\r\n//               {(\r\n//                 ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\r\n//                 100\r\n//               ).toFixed(2)}\r\n//               %\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//         <hr className=\"hr-bar\"></hr>\r\n//         <div className=\"win-rate\">\r\n//           <span className=\"title\">Win Rate:</span>\r\n//           <span className=\"value\">\r\n//             {winningTrades}/{totalTrades}\r\n//           </span>\r\n//           <span className=\"percent\">{winRate}%</span>\r\n//         </div>\r\n//         <div className=\"pnl-rate\">\r\n//           <span className=\"title\">P/L:</span>\r\n//           <span className=\"value\">${totalPnL}</span>\r\n//           <span className=\"percent\">{pnlPercentage}%</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"trade-summary\">\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Week</p>\r\n//         </div>\r\n//         {renderTrades(weeklyTrades)}\r\n//       </div>\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Month</p>\r\n//         </div>\r\n//         {renderTrades(monthlyTrades)}\r\n//       </div>\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Sort</p>\r\n//         </div>\r\n//         <div className=\"analysis-sort\">\r\n//           <Sort />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TradeSum;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTrades } from \"./ApiCalls\";\r\n// import Sort from \"./Sort\";\r\n\r\n// const TradeSum = () => {\r\n//   // eslint-disable-next-line\r\n//   const [dailyTrades, setDailyTrades] = useState([]);\r\n//   const [weeklyTrades, setWeeklyTrades] = useState([]);\r\n//   const [monthlyTrades, setMonthlyTrades] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAndCategorizeTrades = async () => {\r\n//       try {\r\n//         const trades = await fetchTrades();\r\n//         const today = new Date();\r\n//         const startOfWeek = new Date(today);\r\n//         startOfWeek.setDate(today.getDate() - today.getDay() + 1); // Monday\r\n\r\n//         const daily = [];\r\n//         const weekly = [];\r\n//         const monthly = [];\r\n\r\n//         trades.forEach((trade) => {\r\n//           const tradeDate = new Date(trade.entryDate);\r\n//           if (tradeDate.toDateString() === today.toDateString()) {\r\n//             daily.push(trade);\r\n//           }\r\n//           if (tradeDate >= startOfWeek && tradeDate <= today) {\r\n//             weekly.push(trade);\r\n//           }\r\n//           if (\r\n//             tradeDate.getMonth() === today.getMonth() &&\r\n//             tradeDate.getFullYear() === today.getFullYear()\r\n//           ) {\r\n//             monthly.push(trade);\r\n//           }\r\n//         });\r\n\r\n//         setDailyTrades(daily);\r\n//         setWeeklyTrades(weekly);\r\n//         setMonthlyTrades(monthly);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching trades:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchAndCategorizeTrades();\r\n//   }, []);\r\n\r\n//   const renderTrades = (trades) => {\r\n//     const totalTrades = trades.length;\r\n//     const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\r\n//     const winRate =\r\n//       totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\r\n\r\n//     const totalPnL = trades\r\n//       .reduce(\r\n//         (acc, trade) =>\r\n//           acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\r\n//         0\r\n//       )\r\n//       .toFixed(2);\r\n//     const totalEntry = trades\r\n//       .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\r\n//       .toFixed(2);\r\n//     const pnlPercentage =\r\n//       totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\r\n\r\n//     return (\r\n//       <div>\r\n//         {trades.map((trade) => (\r\n//           <div key={trade.id} className=\"trade-item\">\r\n//             <div className=\"left-column\">\r\n//               {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\r\n//               {trade.expDate.split(\"-\").slice(1).join(\"/\")}\r\n//             </div>\r\n//             <div className=\"middle-column\">\r\n//               ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\r\n//             </div>\r\n//             <div className=\"right-column\">\r\n//               {(\r\n//                 ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\r\n//                 100\r\n//               ).toFixed(2)}\r\n//               %\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//         <hr className=\"hr-bar\"></hr>\r\n//         <div className=\"win-rate\">\r\n//           <span className=\"title\">Win Rate:</span>\r\n//           <span className=\"value\">\r\n//             {winningTrades}/{totalTrades}\r\n//           </span>\r\n//           <span className=\"percent\">{winRate}%</span>\r\n//         </div>\r\n//         <div className=\"pnl-rate\">\r\n//           <span className=\"title\">P/L:</span>\r\n//           <span className=\"value\">${(totalPnL * 100).toFixed(2)}</span>\r\n//           <span className=\"percent\">{pnlPercentage}%</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"trade-summary\">\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Week</p>\r\n//         </div>{\" \"}\r\n//         {renderTrades(weeklyTrades)}\r\n//       </div>\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Month</p>\r\n//         </div>{\" \"}\r\n//         {renderTrades(monthlyTrades)}\r\n//       </div>\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"analysis-sort\">\r\n//           <Sort />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TradeSum;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange,\n  periodPL\n}) => {\n  const chartRef = useRef(null); // Reference to the canvas element\n  const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\n  useEffect(() => {\n    // Load Chart.js from the CDN dynamically\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n    script.async = true;\n    script.onload = () => {\n      // Initialize Chart.js instance after the script has loaded\n      const ctx = chartRef.current.getContext(\"2d\");\n\n      // Calculate profits for the selected time period\n      const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\n\n      // Data for the chart based on profitsData\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: profitsData.labels,\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitsData.profits,\n            backgroundColor: \"lightgreen\"\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: true\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false // Hide grid lines\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        myChart.destroy(); // Clean up chart on unmount\n      };\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script); // Clean up script tag on unmount\n    };\n  }, [trades, timePeriod]);\n\n  // Function to calculate profits for the selected time period\n  const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\n    // Add logic here to calculate profits/losses based on the selected time period\n    // You can use trades array and selectedTimePeriod to calculate profits for that period\n    // Return an object with labels and profits data to display on the chart\n\n    // For demonstration, let's assume profitsData is an array with sample data\n    const profitsData = {\n      labels: [\"Day 1\", \"Day 2\", \"Day 3\"],\n      // Example labels\n      profits: [100, -50, 75] // Example profits/losses for each label\n    };\n    return profitsData;\n  };\n  // useEffect(() => {\n  //   // Load Chart.js from the CDN dynamically\n  //   const script = document.createElement(\"script\");\n  //   script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n  //   script.async = true;\n  //   script.onload = () => {\n  //     // Initialize Chart.js instance after the script has loaded\n  //     const ctx = chartRef.current.getContext(\"2d\");\n  //     const myChart = new window.Chart(ctx, {\n  //       type: \"line\",\n  //       data: {\n  //         labels: getLabels(timePeriod), // Get labels based on the selected time period\n  //         datasets: [\n  //           {\n  //             data: getData(trades, timePeriod), // Get data based on the selected time period and trades\n  //             borderColor: \"green\", // Green color for stock price line\n  //             backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n  //             borderWidth: 2, // Width of the line\n  //           },\n  //         ],\n  //       },\n  //       options: {\n  //         plugins: {\n  //           legend: {\n  //             display: false, // Hide legend\n  //           },\n  //         },\n  //         scales: {\n  //           x: {\n  //             grid: {\n  //               display: false, // Hide grid lines\n  //             },\n  //             ticks: {\n  //               display: false, // Hide ticks\n  //             },\n  //             min: 0, // Start y-axis from 0\n  //             max: 1000, // Set max value of y-axis\n  //             position: \"center\",\n  //           },\n  //           y: {\n  //             display: false, // Hide y-axis\n  //           },\n  //         },\n  //       },\n  //     });\n\n  //     return () => {\n  //       myChart.destroy(); // Clean up chart on unmount\n  //     };\n  //   };\n\n  //   document.body.appendChild(script);\n\n  //   return () => {\n  //     document.body.removeChild(script); // Clean up script tag on unmount\n  //   };\n  // }, [trades, timePeriod]);\n\n  // // Function to get labels based on the selected time period\n  // const getLabels = (period) => {\n  //   // Implement logic to return labels based on the selected time period\n  //   // For example,\n  //   return [];\n  // };\n\n  // // Function to get data based on the selected time period and trades\n  // const getData = (trades, period) => {\n  //   // Implement logic to return data based on the selected time period and trades\n  //   // For example, if period is \"weeks\", return data for weeks\n  //   return [];\n  // };\n\n  // Function to handle time period change\n  const handleTimePeriodClick = period => {\n    setTimePeriod(period); // Update timePeriod state\n    onTimePeriodChange(period); // Call the onTimePeriodChange function from props\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"Max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }); // Re-render the chart when the time period changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = (period) => {\n//     // Implement logic to return labels based on the selected time period\n//     // For example,\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = (period) => {\n//     // Implement logic to return data based on the selected time period\n//     // For example, if period is \"weeks\", return data for weeks\n//   };\n\n//   // Function to handle time period change\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"days\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"months\")}\n//         >\n//           1M\n//         </button>\n// <button\n//   className=\"time-period-button\"\n//   onClick={() => handleTimePeriodChange(\"3-months\")}\n// >\n//   3M\n// </button>\n// <button\n//   className=\"time-period-button\"\n//   onClick={() => handleTimePeriodChange(\"YTD\")}\n// >\n//   YTD\n// </button>\n// <button\n//   className=\"time-period-button\"\n//   onClick={() => handleTimePeriodChange(\"1-year\")}\n// >\n//   1Y\n// </button>\n// <button\n//   className=\"time-period-button\"\n//   onClick={() => handleTimePeriodChange(\"max\")}\n// >\n//   MAX\n// </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import \"./styles/accountGraph.css\";\n\n// // const AccountGraph = () => {\n// //   const chartRef = useRef(null); // Reference to the canvas element\n// //   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n// //   useEffect(() => {\n// //     // Fetch top profitable trades from API\n// //     const fetchTopProfitableTrades = () => {\n// //       fetch(\"http://localhost:8000/trades/top-profitable/\")\n// //         .then((response) => response.json())\n// //         .then((data) => setTopProfitableTrades(data))\n// //         .catch((error) =>\n// //           console.error(\"Error fetching top profitable trades:\", error)\n// //         );\n// //     };\n\n// //     fetchTopProfitableTrades();\n// //   }, []); // Fetch data only once on component mount\n\n// //   useEffect(() => {\n// //     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n// //     // Load Chart.js from the CDN dynamically\n// //     const script = document.createElement(\"script\");\n// //     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n// //     script.async = true;\n// //     script.onload = () => {\n// //       // Initialize Chart.js instance after the script has loaded\n// //       const ctx = chartRef.current.getContext(\"2d\");\n// //       const myChart = new window.Chart(ctx, {\n// //         type: \"bar\", // Change chart type to \"bar\"\n// //         data: {\n// //           labels: topProfitableTrades.map((trade) => trade.trade_date), // Labels as trade dates\n// //           datasets: [\n// //             {\n// //               label: \"Profit/Loss\",\n// //               data: getData(), // Call getData function to get profit data\n// //               backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Blue color with transparency\n// //               borderColor: \"rgba(54, 162, 235, 1)\", // Solid blue border color\n// //               borderWidth: 1, // Width of the border\n// //             },\n// //           ],\n// //         },\n// //         options: {\n// //           scales: {\n// //             y: {\n// //               beginAtZero: true, // Start y-axis from zero\n// //               title: {\n// //                 display: true,\n// //                 text: \"Profit/Loss\", // Y-axis title\n// //               },\n// //             },\n// //             x: {\n// //               title: {\n// //                 display: true,\n// //                 text: \"Trade Date\", // X-axis title\n// //               },\n// //             },\n// //           },\n// //         },\n// //       });\n\n// //       return () => {\n// //         myChart.destroy(); // Clean up chart on unmount\n// //       };\n// //     };\n\n// //     document.body.appendChild(script);\n\n// //     return () => {\n// //       document.body.removeChild(script); // Clean up script tag on unmount\n// //     };\n// //   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\n\n// //   // Function to get profit data from topProfitableTrades\n// //   const getData = () => {\n// //     return topProfitableTrades.map((trade) => parseFloat(trade.profit)); // Convert profit to float\n// //   };\n\n// //   return (\n// //     <div className=\"account-graph\">\n// //       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n// //     </div>\n// //   );\n// // };\n\n// // export default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","trades","onTimePeriodChange","periodPL","chartRef","timePeriod","setTimePeriod","script","document","createElement","src","async","onload","ctx","current","getContext","profitsData","calculateProfitsForTimePeriod","myChart","window","Chart","type","data","labels","datasets","label","profits","backgroundColor","options","plugins","legend","display","scales","x","grid","y","title","text","destroy","body","appendChild","removeChild","selectedTimePeriod","handleTimePeriodClick","period","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange, periodPL }) => {\r\n  const chartRef = useRef(null); // Reference to the canvas element\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\r\n  useEffect(() => {\r\n    // Load Chart.js from the CDN dynamically\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      // Initialize Chart.js instance after the script has loaded\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      // Calculate profits for the selected time period\r\n      const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\r\n\r\n      // Data for the chart based on profitsData\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: profitsData.labels,\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitsData.profits,\r\n              backgroundColor: \"lightgreen\",\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false, // Hide grid lines\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy(); // Clean up chart on unmount\r\n      };\r\n    };\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script); // Clean up script tag on unmount\r\n    };\r\n  }, [trades, timePeriod]);\r\n\r\n  // Function to calculate profits for the selected time period\r\n  const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\r\n    // Add logic here to calculate profits/losses based on the selected time period\r\n    // You can use trades array and selectedTimePeriod to calculate profits for that period\r\n    // Return an object with labels and profits data to display on the chart\r\n\r\n    // For demonstration, let's assume profitsData is an array with sample data\r\n    const profitsData = {\r\n      labels: [\"Day 1\", \"Day 2\", \"Day 3\"], // Example labels\r\n      profits: [100, -50, 75], // Example profits/losses for each label\r\n    };\r\n\r\n    return profitsData;\r\n  };\r\n  // useEffect(() => {\r\n  //   // Load Chart.js from the CDN dynamically\r\n  //   const script = document.createElement(\"script\");\r\n  //   script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n  //   script.async = true;\r\n  //   script.onload = () => {\r\n  //     // Initialize Chart.js instance after the script has loaded\r\n  //     const ctx = chartRef.current.getContext(\"2d\");\r\n  //     const myChart = new window.Chart(ctx, {\r\n  //       type: \"line\",\r\n  //       data: {\r\n  //         labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n  //         datasets: [\r\n  //           {\r\n  //             data: getData(trades, timePeriod), // Get data based on the selected time period and trades\r\n  //             borderColor: \"green\", // Green color for stock price line\r\n  //             backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n  //             borderWidth: 2, // Width of the line\r\n  //           },\r\n  //         ],\r\n  //       },\r\n  //       options: {\r\n  //         plugins: {\r\n  //           legend: {\r\n  //             display: false, // Hide legend\r\n  //           },\r\n  //         },\r\n  //         scales: {\r\n  //           x: {\r\n  //             grid: {\r\n  //               display: false, // Hide grid lines\r\n  //             },\r\n  //             ticks: {\r\n  //               display: false, // Hide ticks\r\n  //             },\r\n  //             min: 0, // Start y-axis from 0\r\n  //             max: 1000, // Set max value of y-axis\r\n  //             position: \"center\",\r\n  //           },\r\n  //           y: {\r\n  //             display: false, // Hide y-axis\r\n  //           },\r\n  //         },\r\n  //       },\r\n  //     });\r\n\r\n  //     return () => {\r\n  //       myChart.destroy(); // Clean up chart on unmount\r\n  //     };\r\n  //   };\r\n\r\n  //   document.body.appendChild(script);\r\n\r\n  //   return () => {\r\n  //     document.body.removeChild(script); // Clean up script tag on unmount\r\n  //   };\r\n  // }, [trades, timePeriod]);\r\n\r\n  // // Function to get labels based on the selected time period\r\n  // const getLabels = (period) => {\r\n  //   // Implement logic to return labels based on the selected time period\r\n  //   // For example,\r\n  //   return [];\r\n  // };\r\n\r\n  // // Function to get data based on the selected time period and trades\r\n  // const getData = (trades, period) => {\r\n  //   // Implement logic to return data based on the selected time period and trades\r\n  //   // For example, if period is \"weeks\", return data for weeks\r\n  //   return [];\r\n  // };\r\n\r\n  // Function to handle time period change\r\n  const handleTimePeriodClick = (period) => {\r\n    setTimePeriod(period); // Update timePeriod state\r\n    onTimePeriodChange(period); // Call the onTimePeriodChange function from props\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"Max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n      {/* <div className=\"period-pl\">\r\n        <p>{`${timePeriod} P/L`}</p>\r\n        <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }); // Re-render the chart when the time period changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = (period) => {\r\n//     // Implement logic to return labels based on the selected time period\r\n//     // For example,\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = (period) => {\r\n//     // Implement logic to return data based on the selected time period\r\n//     // For example, if period is \"weeks\", return data for weeks\r\n//   };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"days\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"months\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n// <button\r\n//   className=\"time-period-button\"\r\n//   onClick={() => handleTimePeriodChange(\"3-months\")}\r\n// >\r\n//   3M\r\n// </button>\r\n// <button\r\n//   className=\"time-period-button\"\r\n//   onClick={() => handleTimePeriodChange(\"YTD\")}\r\n// >\r\n//   YTD\r\n// </button>\r\n// <button\r\n//   className=\"time-period-button\"\r\n//   onClick={() => handleTimePeriodChange(\"1-year\")}\r\n// >\r\n//   1Y\r\n// </button>\r\n// <button\r\n//   className=\"time-period-button\"\r\n//   onClick={() => handleTimePeriodChange(\"max\")}\r\n// >\r\n//   MAX\r\n// </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n// // import React, { useEffect, useRef, useState } from \"react\";\r\n// // import \"./styles/accountGraph.css\";\r\n\r\n// // const AccountGraph = () => {\r\n// //   const chartRef = useRef(null); // Reference to the canvas element\r\n// //   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n// //   useEffect(() => {\r\n// //     // Fetch top profitable trades from API\r\n// //     const fetchTopProfitableTrades = () => {\r\n// //       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n// //         .then((response) => response.json())\r\n// //         .then((data) => setTopProfitableTrades(data))\r\n// //         .catch((error) =>\r\n// //           console.error(\"Error fetching top profitable trades:\", error)\r\n// //         );\r\n// //     };\r\n\r\n// //     fetchTopProfitableTrades();\r\n// //   }, []); // Fetch data only once on component mount\r\n\r\n// //   useEffect(() => {\r\n// //     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n// //     // Load Chart.js from the CDN dynamically\r\n// //     const script = document.createElement(\"script\");\r\n// //     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n// //     script.async = true;\r\n// //     script.onload = () => {\r\n// //       // Initialize Chart.js instance after the script has loaded\r\n// //       const ctx = chartRef.current.getContext(\"2d\");\r\n// //       const myChart = new window.Chart(ctx, {\r\n// //         type: \"bar\", // Change chart type to \"bar\"\r\n// //         data: {\r\n// //           labels: topProfitableTrades.map((trade) => trade.trade_date), // Labels as trade dates\r\n// //           datasets: [\r\n// //             {\r\n// //               label: \"Profit/Loss\",\r\n// //               data: getData(), // Call getData function to get profit data\r\n// //               backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Blue color with transparency\r\n// //               borderColor: \"rgba(54, 162, 235, 1)\", // Solid blue border color\r\n// //               borderWidth: 1, // Width of the border\r\n// //             },\r\n// //           ],\r\n// //         },\r\n// //         options: {\r\n// //           scales: {\r\n// //             y: {\r\n// //               beginAtZero: true, // Start y-axis from zero\r\n// //               title: {\r\n// //                 display: true,\r\n// //                 text: \"Profit/Loss\", // Y-axis title\r\n// //               },\r\n// //             },\r\n// //             x: {\r\n// //               title: {\r\n// //                 display: true,\r\n// //                 text: \"Trade Date\", // X-axis title\r\n// //               },\r\n// //             },\r\n// //           },\r\n// //         },\r\n// //       });\r\n\r\n// //       return () => {\r\n// //         myChart.destroy(); // Clean up chart on unmount\r\n// //       };\r\n// //     };\r\n\r\n// //     document.body.appendChild(script);\r\n\r\n// //     return () => {\r\n// //       document.body.removeChild(script); // Clean up script tag on unmount\r\n// //     };\r\n// //   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\r\n\r\n// //   // Function to get profit data from topProfitableTrades\r\n// //   const getData = () => {\r\n// //     return topProfitableTrades.map((trade) => parseFloat(trade.profit)); // Convert profit to float\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"account-graph\">\r\n// //       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default AccountGraph;\r\n"],"mappings":"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QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5C,IAEO,CAAC,eACTvD,KAAA,CAAAa,aAAA;IACEoC,SAAS,EAAC,oBAAoB;IAC9BQ,OAAO,EAAEA,CAAA,KAAMV,qBAAqB,CAAC,KAAK,CAAE;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC7C,KAEO,CACL,CAKF,CAAC;AAEV,CAAC;AAED,eAAenD,YAAY;;AAE3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
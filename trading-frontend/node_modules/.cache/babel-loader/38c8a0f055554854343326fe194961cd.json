{"ast":null,"code":"// Calculate Total ROI\nexport const calculateTotalROI = trades => {\n  var _trades$;\n  if (trades.length === 0) return 0;\n  const initialInvestment = ((_trades$ = trades[0]) === null || _trades$ === void 0 ? void 0 : _trades$.initial_investment) || 0;\n  const totalReturn = trades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  if (initialInvestment === 0) return 0; // Avoid division by zero\n\n  const totalROI = totalReturn / initialInvestment * 100; // Convert to percentage\n  return totalROI; // Return as a number\n};\n\n// Calculate Sharpe Ratio\nexport const calculateSharpeRatio = dailyPnls => {\n  if (dailyPnls.length === 0) return 0;\n  const averageReturn = dailyPnls.reduce((acc, pnl) => acc + pnl, 0) / dailyPnls.length;\n  const stdDeviation = Math.sqrt(dailyPnls.reduce((acc, pnl) => acc + Math.pow(pnl - averageReturn, 2), 0) / dailyPnls.length);\n  if (stdDeviation === 0) return 0; // Avoid division by zero\n\n  return averageReturn / stdDeviation; // Return as a number\n};\n\n// Calculate Number of Trades\nexport const calculateNumberOfTrades = trades => {\n  return trades.length;\n};\n\n// Calculate Winning Trades\nexport const calculateWinningTrades = trades => {\n  return trades.filter(trade => trade.exit_price - trade.entry_price > 0).length;\n};\n\n// Calculate Losing Trades\nexport const calculateLosingTrades = trades => {\n  return trades.filter(trade => trade.exit_price - trade.entry_price < 0).length;\n};\n\n// Calculate Win Rate\nexport const calculateWinRate = trades => {\n  const winningTrades = calculateWinningTrades(trades);\n  const totalTrades = calculateNumberOfTrades(trades);\n  return totalTrades === 0 ? 0 : winningTrades / totalTrades * 100; // Return as a percentage\n};\n\n// Calculate Average Win\nexport const calculateAverageWin = trades => {\n  const winningTrades = trades.filter(trade => trade.exit_price - trade.entry_price > 0);\n  const totalWin = winningTrades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  return winningTrades.length === 0 ? 0 : totalWin / winningTrades.length; // Return as a number\n};\n\n// Calculate Average Loss\nexport const calculateAverageLoss = trades => {\n  const losingTrades = trades.filter(trade => trade.exit_price - trade.entry_price < 0);\n  const totalLoss = losingTrades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  return losingTrades.length === 0 ? 0 : totalLoss / losingTrades.length; // Return as a number\n};\n\n// Calculate Risk-Reward Ratio\nexport const calculateRiskRewardRatio = trades => {\n  const averageWin = calculateAverageWin(trades);\n  const averageLoss = Math.abs(calculateAverageLoss(trades));\n  return averageLoss === 0 ? 0 : averageWin / averageLoss; // Return as a number\n};\n\n// Calculate Maximum Drawdown\nexport const calculateMaximumDrawdown = dailyPnls => {\n  if (dailyPnls.length === 0) return 0;\n  let maxDrawdown = 0;\n  let peak = dailyPnls[0];\n  dailyPnls.forEach(pnl => {\n    if (pnl > peak) {\n      peak = pnl;\n    }\n    const drawdown = (peak - pnl) / peak;\n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n    }\n  });\n  return maxDrawdown * 100; // Return as a percentage\n};\n\n// Calculate Cash Balance\nexport const calculateCashBalance = (initialCash, netPL) => {\n  const initialCashNumber = Number(initialCash);\n  const netPLNumber = Number(netPL);\n  if (isNaN(initialCashNumber) || isNaN(netPLNumber)) {\n    console.error(\"Invalid input to calculateCashBalance:\", {\n      initialCash,\n      netPL\n    });\n    return 0; // Default to 0 if inputs are invalid\n  }\n  return initialCashNumber + netPLNumber; // Return as a number\n};","map":{"version":3,"names":["calculateTotalROI","trades","_trades$","length","initialInvestment","initial_investment","totalReturn","reduce","acc","trade","exit_price","entry_price","totalROI","calculateSharpeRatio","dailyPnls","averageReturn","pnl","stdDeviation","Math","sqrt","pow","calculateNumberOfTrades","calculateWinningTrades","filter","calculateLosingTrades","calculateWinRate","winningTrades","totalTrades","calculateAverageWin","totalWin","calculateAverageLoss","losingTrades","totalLoss","calculateRiskRewardRatio","averageWin","averageLoss","abs","calculateMaximumDrawdown","maxDrawdown","peak","forEach","drawdown","calculateCashBalance","initialCash","netPL","initialCashNumber","Number","netPLNumber","isNaN","console","error"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisCalc.js"],"sourcesContent":["// Calculate Total ROI\r\nexport const calculateTotalROI = (trades) => {\r\n  if (trades.length === 0) return 0;\r\n\r\n  const initialInvestment = trades[0]?.initial_investment || 0;\r\n  const totalReturn = trades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n\r\n  if (initialInvestment === 0) return 0; // Avoid division by zero\r\n\r\n  const totalROI = (totalReturn / initialInvestment) * 100; // Convert to percentage\r\n  return totalROI; // Return as a number\r\n};\r\n\r\n// Calculate Sharpe Ratio\r\nexport const calculateSharpeRatio = (dailyPnls) => {\r\n  if (dailyPnls.length === 0) return 0;\r\n\r\n  const averageReturn =\r\n    dailyPnls.reduce((acc, pnl) => acc + pnl, 0) / dailyPnls.length;\r\n  const stdDeviation = Math.sqrt(\r\n    dailyPnls.reduce((acc, pnl) => acc + Math.pow(pnl - averageReturn, 2), 0) /\r\n      dailyPnls.length\r\n  );\r\n\r\n  if (stdDeviation === 0) return 0; // Avoid division by zero\r\n\r\n  return averageReturn / stdDeviation; // Return as a number\r\n};\r\n\r\n// Calculate Number of Trades\r\nexport const calculateNumberOfTrades = (trades) => {\r\n  return trades.length;\r\n};\r\n\r\n// Calculate Winning Trades\r\nexport const calculateWinningTrades = (trades) => {\r\n  return trades.filter((trade) => trade.exit_price - trade.entry_price > 0)\r\n    .length;\r\n};\r\n\r\n// Calculate Losing Trades\r\nexport const calculateLosingTrades = (trades) => {\r\n  return trades.filter((trade) => trade.exit_price - trade.entry_price < 0)\r\n    .length;\r\n};\r\n\r\n// Calculate Win Rate\r\nexport const calculateWinRate = (trades) => {\r\n  const winningTrades = calculateWinningTrades(trades);\r\n  const totalTrades = calculateNumberOfTrades(trades);\r\n  return totalTrades === 0 ? 0 : (winningTrades / totalTrades) * 100; // Return as a percentage\r\n};\r\n\r\n// Calculate Average Win\r\nexport const calculateAverageWin = (trades) => {\r\n  const winningTrades = trades.filter(\r\n    (trade) => trade.exit_price - trade.entry_price > 0\r\n  );\r\n  const totalWin = winningTrades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return winningTrades.length === 0 ? 0 : totalWin / winningTrades.length; // Return as a number\r\n};\r\n\r\n// Calculate Average Loss\r\nexport const calculateAverageLoss = (trades) => {\r\n  const losingTrades = trades.filter(\r\n    (trade) => trade.exit_price - trade.entry_price < 0\r\n  );\r\n  const totalLoss = losingTrades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return losingTrades.length === 0 ? 0 : totalLoss / losingTrades.length; // Return as a number\r\n};\r\n\r\n// Calculate Risk-Reward Ratio\r\nexport const calculateRiskRewardRatio = (trades) => {\r\n  const averageWin = calculateAverageWin(trades);\r\n  const averageLoss = Math.abs(calculateAverageLoss(trades));\r\n  return averageLoss === 0 ? 0 : averageWin / averageLoss; // Return as a number\r\n};\r\n\r\n// Calculate Maximum Drawdown\r\nexport const calculateMaximumDrawdown = (dailyPnls) => {\r\n  if (dailyPnls.length === 0) return 0;\r\n\r\n  let maxDrawdown = 0;\r\n  let peak = dailyPnls[0];\r\n\r\n  dailyPnls.forEach((pnl) => {\r\n    if (pnl > peak) {\r\n      peak = pnl;\r\n    }\r\n    const drawdown = (peak - pnl) / peak;\r\n    if (drawdown > maxDrawdown) {\r\n      maxDrawdown = drawdown;\r\n    }\r\n  });\r\n\r\n  return maxDrawdown * 100; // Return as a percentage\r\n};\r\n\r\n// Calculate Cash Balance\r\nexport const calculateCashBalance = (initialCash, netPL) => {\r\n  const initialCashNumber = Number(initialCash);\r\n  const netPLNumber = Number(netPL);\r\n\r\n  if (isNaN(initialCashNumber) || isNaN(netPLNumber)) {\r\n    console.error(\"Invalid input to calculateCashBalance:\", {\r\n      initialCash,\r\n      netPL,\r\n    });\r\n    return 0; // Default to 0 if inputs are invalid\r\n  }\r\n\r\n  return initialCashNumber + netPLNumber; // Return as a number\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
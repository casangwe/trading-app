{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"./styles/accountGraph.css\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange\n}) => {\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const calculateProfitsForAllTimePeriods = trades => {\n      const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n      const profitsData = [];\n      timePeriods.forEach(selectedTimePeriod => {\n        let startDate = new Date();\n        let totalProfit = 0;\n        switch (selectedTimePeriod) {\n          case \"1D\":\n            startDate.setDate(startDate.getDate() - 1);\n            break;\n          case \"1W\":\n            startDate.setDate(startDate.getDate() - 7);\n            break;\n          case \"1M\":\n            startDate.setMonth(startDate.getMonth() - 1);\n            break;\n          case \"3M\":\n            startDate.setMonth(startDate.getMonth() - 3);\n            break;\n          case \"YTD\":\n            startDate = new Date(startDate.getFullYear(), 0, 1); // Year to Date\n            break;\n          case \"1Y\":\n            startDate.setFullYear(startDate.getFullYear() - 1);\n            break;\n          case \"Max\":\n            totalProfit = trades.reduce((maxProfit, trade) => {\n              const entryPrice = parseFloat(trade.entry_price);\n              const exitPrice = parseFloat(trade.exit_price);\n              const contracts = trade.contracts;\n              if (!isNaN(exitPrice)) {\n                const profit = (exitPrice - entryPrice) * contracts * 100;\n                return Math.max(maxProfit, profit);\n              }\n              return maxProfit;\n            }, 0);\n            break;\n          default:\n            break;\n        }\n        if (selectedTimePeriod !== \"Max\") {\n          const filteredTrades = trades.filter(trade => new Date(trade.close_date) >= startDate);\n          totalProfit = filteredTrades.reduce((sum, trade) => {\n            const entryPrice = parseFloat(trade.entry_price);\n            const exitPrice = parseFloat(trade.exit_price);\n            const contracts = trade.contracts;\n            if (!isNaN(exitPrice)) {\n              return sum + (exitPrice - entryPrice) * contracts * 100;\n            }\n            return sum;\n          }, 0);\n        }\n        profitsData.push({\n          timePeriod: selectedTimePeriod,\n          profit: totalProfit,\n          backgroundColor: totalProfit >= 0 ? \"lightgreen\" : \"rgb(255, 204, 204)\" // Set color based on profit\n        });\n      });\n      return profitsData;\n    };\n    return () => {\n      myChart.destroy();\n    };\n  }, [trades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","ChartDataLabels","AccountGraph","trades","onTimePeriodChange","chartRef","calculateProfitsForAllTimePeriods","timePeriods","profitsData","forEach","selectedTimePeriod","startDate","Date","totalProfit","setDate","getDate","setMonth","getMonth","getFullYear","setFullYear","reduce","maxProfit","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","profit","Math","max","filteredTrades","filter","close_date","sum","push","timePeriod","backgroundColor","myChart","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const calculateProfitsForAllTimePeriods = (trades) => {\r\n      const timePeriods = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n      const profitsData = [];\r\n\r\n      timePeriods.forEach((selectedTimePeriod) => {\r\n        let startDate = new Date();\r\n        let totalProfit = 0;\r\n\r\n        switch (selectedTimePeriod) {\r\n          case \"1D\":\r\n            startDate.setDate(startDate.getDate() - 1);\r\n            break;\r\n          case \"1W\":\r\n            startDate.setDate(startDate.getDate() - 7);\r\n            break;\r\n          case \"1M\":\r\n            startDate.setMonth(startDate.getMonth() - 1);\r\n            break;\r\n          case \"3M\":\r\n            startDate.setMonth(startDate.getMonth() - 3);\r\n            break;\r\n          case \"YTD\":\r\n            startDate = new Date(startDate.getFullYear(), 0, 1); // Year to Date\r\n            break;\r\n          case \"1Y\":\r\n            startDate.setFullYear(startDate.getFullYear() - 1);\r\n            break;\r\n          case \"Max\":\r\n            totalProfit = trades.reduce((maxProfit, trade) => {\r\n              const entryPrice = parseFloat(trade.entry_price);\r\n              const exitPrice = parseFloat(trade.exit_price);\r\n              const contracts = trade.contracts;\r\n              if (!isNaN(exitPrice)) {\r\n                const profit = (exitPrice - entryPrice) * contracts * 100;\r\n                return Math.max(maxProfit, profit);\r\n              }\r\n              return maxProfit;\r\n            }, 0);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        if (selectedTimePeriod !== \"Max\") {\r\n          const filteredTrades = trades.filter(\r\n            (trade) => new Date(trade.close_date) >= startDate\r\n          );\r\n\r\n          totalProfit = filteredTrades.reduce((sum, trade) => {\r\n            const entryPrice = parseFloat(trade.entry_price);\r\n            const exitPrice = parseFloat(trade.exit_price);\r\n            const contracts = trade.contracts;\r\n            if (!isNaN(exitPrice)) {\r\n              return sum + (exitPrice - entryPrice) * contracts * 100;\r\n            }\r\n            return sum;\r\n          }, 0);\r\n        }\r\n\r\n        profitsData.push({\r\n          timePeriod: selectedTimePeriod,\r\n          profit: totalProfit,\r\n          backgroundColor:\r\n            totalProfit >= 0 ? \"lightgreen\" : \"rgb(255, 204, 204)\", // Set color based on profit\r\n        });\r\n      });\r\n\r\n      return profitsData;\r\n    };\r\n\r\n    return () => {\r\n      myChart.destroy();\r\n    };\r\n  }, [trades]);\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,2BAA2B;AAClC,OAAOC,eAAe,MAAM,2BAA2B;AAEvD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAmB,CAAC,KAAK;EACvD,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMO,iCAAiC,GAAIH,MAAM,IAAK;MACpD,MAAMI,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;MAChE,MAAMC,WAAW,GAAG,EAAE;MAEtBD,WAAW,CAACE,OAAO,CAAEC,kBAAkB,IAAK;QAC1C,IAAIC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;QAC1B,IAAIC,WAAW,GAAG,CAAC;QAEnB,QAAQH,kBAAkB;UACxB,KAAK,IAAI;YACPC,SAAS,CAACG,OAAO,CAACH,SAAS,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;YAC1C;UACF,KAAK,IAAI;YACPJ,SAAS,CAACG,OAAO,CAACH,SAAS,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;YAC1C;UACF,KAAK,IAAI;YACPJ,SAAS,CAACK,QAAQ,CAACL,SAAS,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5C;UACF,KAAK,IAAI;YACPN,SAAS,CAACK,QAAQ,CAACL,SAAS,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5C;UACF,KAAK,KAAK;YACRN,SAAS,GAAG,IAAIC,IAAI,CAACD,SAAS,CAACO,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD;UACF,KAAK,IAAI;YACPP,SAAS,CAACQ,WAAW,CAACR,SAAS,CAACO,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;YAClD;UACF,KAAK,KAAK;YACRL,WAAW,GAAGV,MAAM,CAACiB,MAAM,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;cAChD,MAAMC,UAAU,GAAGC,UAAU,CAACF,KAAK,CAACG,WAAW,CAAC;cAChD,MAAMC,SAAS,GAAGF,UAAU,CAACF,KAAK,CAACK,UAAU,CAAC;cAC9C,MAAMC,SAAS,GAAGN,KAAK,CAACM,SAAS;cACjC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC,EAAE;gBACrB,MAAMI,MAAM,GAAG,CAACJ,SAAS,GAAGH,UAAU,IAAIK,SAAS,GAAG,GAAG;gBACzD,OAAOG,IAAI,CAACC,GAAG,CAACX,SAAS,EAAES,MAAM,CAAC;cACpC;cACA,OAAOT,SAAS;YAClB,CAAC,EAAE,CAAC,CAAC;YACL;UACF;YACE;QACJ;QAEA,IAAIX,kBAAkB,KAAK,KAAK,EAAE;UAChC,MAAMuB,cAAc,GAAG9B,MAAM,CAAC+B,MAAM,CACjCZ,KAAK,IAAK,IAAIV,IAAI,CAACU,KAAK,CAACa,UAAU,CAAC,IAAIxB,SAC3C,CAAC;UAEDE,WAAW,GAAGoB,cAAc,CAACb,MAAM,CAAC,CAACgB,GAAG,EAAEd,KAAK,KAAK;YAClD,MAAMC,UAAU,GAAGC,UAAU,CAACF,KAAK,CAACG,WAAW,CAAC;YAChD,MAAMC,SAAS,GAAGF,UAAU,CAACF,KAAK,CAACK,UAAU,CAAC;YAC9C,MAAMC,SAAS,GAAGN,KAAK,CAACM,SAAS;YACjC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC,EAAE;cACrB,OAAOU,GAAG,GAAG,CAACV,SAAS,GAAGH,UAAU,IAAIK,SAAS,GAAG,GAAG;YACzD;YACA,OAAOQ,GAAG;UACZ,CAAC,EAAE,CAAC,CAAC;QACP;QAEA5B,WAAW,CAAC6B,IAAI,CAAC;UACfC,UAAU,EAAE5B,kBAAkB;UAC9BoB,MAAM,EAAEjB,WAAW;UACnB0B,eAAe,EACb1B,WAAW,IAAI,CAAC,GAAG,YAAY,GAAG,oBAAoB,CAAE;QAC5D,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,OAAOL,WAAW;IACpB,CAAC;IAED,OAAO,MAAM;MACXgC,OAAO,CAACC,OAAO,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAACtC,MAAM,CAAC,CAAC;EAEZ,oBACEL,KAAA,CAAA4C,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BnD,KAAA,CAAA4C,aAAA;IAAQQ,GAAG,EAAE7C,QAAS;IAAAuC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACrB,CAAC;AAEV,CAAC;AAED,eAAe/C,YAAY"},"metadata":{},"sourceType":"module"}
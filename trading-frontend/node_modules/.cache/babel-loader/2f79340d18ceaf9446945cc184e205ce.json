{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"No Daily PNL data\");\n        console.error(\"No Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, error);\n  if (!dailyPNLData) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 29\n    }\n  }, \"No PNL data available\");\n\n  // Header date based on selected view\n  const today = new Date();\n  const dailyDate = formatDate(today);\n  const startOfWeek = new Date(today);\n  startOfWeek.setDate(today.getDate() - today.getDay());\n  const weeklyDate = `${formatDate(startOfWeek)} - ${formatDate(today)}`;\n  const monthlyDate = `${today.getMonth() + 1}/${today.getFullYear()}`;\n  const headerDate = view === \"daily\" ? dailyDate : view === \"weekly\" ? weeklyDate : monthlyDate;\n  const getStartOfWeek = date => {\n    const startOfWeek = new Date(date);\n    startOfWeek.setDate(date.getDate() - date.getDay());\n    startOfWeek.setHours(0, 0, 0, 0);\n    return startOfWeek;\n  };\n  const getCurrentWeek = data => {\n    const weekData = [];\n    const startOfWeek = getStartOfWeek(new Date());\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(startOfWeek.getDate() + 6);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n        weekData.push(entry);\n      }\n    });\n    return weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n  };\n  const getCurrentMonth = data => {\n    const weeks = [];\n    let week = [];\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate >= startOfMonth && entryDate.getMonth() === today.getMonth()) {\n        week.push(entry);\n        if (week.length >= 7 || entryDate.getDay() === 6) {\n          weeks.push(week);\n          week = [];\n        }\n      }\n    });\n    if (week.length) weeks.push(week);\n    return weeks;\n  };\n  const calculateBars = () => {\n    let balances = [];\n    let labels = [];\n    if (view === \"daily\") {\n      const currentWeek = getCurrentWeek(dailyPNLData);\n      balances = currentWeek.map(day => parseFloat(day.balance || 0));\n      labels = currentWeek.map(day => day.entry_date ? formatDate(day.entry_date) : \"Date\");\n    } else if (view === \"weekly\") {\n      const currentMonth = getCurrentMonth(dailyPNLData);\n      currentMonth.forEach(week => {\n        var _week$, _week;\n        const weekSum = week.reduce((sum, day) => sum + parseFloat(day.balance || 0), 0);\n        balances.push(weekSum);\n        const startOfWeek = (_week$ = week[0]) === null || _week$ === void 0 ? void 0 : _week$.entry_date;\n        const endOfWeek = (_week = week[week.length - 1]) === null || _week === void 0 ? void 0 : _week.entry_date;\n        labels.push(startOfWeek && endOfWeek ? `${formatDate(startOfWeek)} - ${formatDate(endOfWeek)}` : \"Week\");\n      });\n    } else if (view === \"monthly\") {\n      const months = Array.from({\n        length: 12\n      }, () => []);\n      dailyPNLData.forEach(entry => {\n        const entryDate = new Date(entry.entry_date);\n        months[entryDate.getMonth()].push(entry);\n      });\n      months.forEach(month => {\n        if (month.length > 0) {\n          var _month$;\n          const monthSum = month.reduce((sum, day) => sum + parseFloat(day.balance || 0), 0);\n          balances.push(monthSum);\n          labels.push(((_month$ = month[0]) === null || _month$ === void 0 ? void 0 : _month$.entry_date) ? formatMonthYear(month[0].entry_date) : \"Month\");\n        }\n      });\n    }\n    return {\n      balances,\n      labels\n    };\n  };\n  const {\n    balances,\n    labels\n  } = calculateBars();\n  const maxBalance = Math.max(...balances);\n  const threshold = maxBalance * 5;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, \"1Y\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, headerDate)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, balances.map((balance, index) => {\n    const percentage = Math.abs(balance) / threshold * 65;\n    const isPositive = balance >= 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      className: `bar ${isPositive ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `${percentage}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"No Daily PNL data\");\n//         console.error(\"No Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance || 0));\n//       labels = currentWeek.map((day) =>\n//         day.entry_date ? formatDate(day.entry_date) : \"Date\"\n//       );\n//     } else if (view === \"weekly\") {\n//       const currentMonth = getCurrentMonth(dailyPNLData);\n//       currentMonth.forEach((week) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance || 0),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           week[0]?.entry_date && week[week.length - 1]?.entry_date\n//             ? `${formatDate(week[0].entry_date)} - ${formatDate(\n//                 week[week.length - 1].entry_date\n//               )}`\n//             : \"Week\"\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance || 0),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(\n//           month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\n//         );\n//       });\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() - 1)\n//     );\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const month = today.getMonth() + 1;\n\n//     data.forEach((entry, index) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() + 1 === month) {\n//         week.push(entry);\n//         if ((index + 1) % 5 === 0) {\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//       weeks.push(week);\n//     }\n\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     return months.filter((month) => month.length > 0);\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 5;\n\n//   const headerDate = dailyPNLData[0]?.entry_date\n//     ? view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date + \"T00:00:00\").toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0]\n//     : \"Date\";\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             1D\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             1M\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             1Y\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 65;\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","fetchDailyPNLData","data","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","today","Date","dailyDate","startOfWeek","setDate","getDate","getDay","weeklyDate","monthlyDate","getMonth","getFullYear","headerDate","getStartOfWeek","date","setHours","getCurrentWeek","weekData","endOfWeek","forEach","entry","entryDate","entry_date","push","sort","a","b","getCurrentMonth","weeks","week","startOfMonth","length","calculateBars","balances","labels","currentWeek","map","day","parseFloat","balance","currentMonth","_week$","_week","weekSum","reduce","sum","months","Array","from","month","_month$","monthSum","formatMonthYear","maxBalance","Math","max","threshold","className","onClick","index","percentage","abs","isPositive","key","style","width"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"No Daily PNL data\");\r\n        console.error(\"No Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n  if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n  // Header date based on selected view\r\n  const today = new Date();\r\n  const dailyDate = formatDate(today);\r\n  const startOfWeek = new Date(today);\r\n  startOfWeek.setDate(today.getDate() - today.getDay());\r\n  const weeklyDate = `${formatDate(startOfWeek)} - ${formatDate(today)}`;\r\n  const monthlyDate = `${today.getMonth() + 1}/${today.getFullYear()}`;\r\n  const headerDate =\r\n    view === \"daily\" ? dailyDate : view === \"weekly\" ? weeklyDate : monthlyDate;\r\n\r\n  const getStartOfWeek = (date) => {\r\n    const startOfWeek = new Date(date);\r\n    startOfWeek.setDate(date.getDate() - date.getDay());\r\n    startOfWeek.setHours(0, 0, 0, 0);\r\n    return startOfWeek;\r\n  };\r\n\r\n  const getCurrentWeek = (data) => {\r\n    const weekData = [];\r\n    const startOfWeek = getStartOfWeek(new Date());\r\n    const endOfWeek = new Date(startOfWeek);\r\n    endOfWeek.setDate(startOfWeek.getDate() + 6);\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n        weekData.push(entry);\r\n      }\r\n    });\r\n\r\n    return weekData.sort(\r\n      (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n    );\r\n  };\r\n\r\n  const getCurrentMonth = (data) => {\r\n    const weeks = [];\r\n    let week = [];\r\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (\r\n        entryDate >= startOfMonth &&\r\n        entryDate.getMonth() === today.getMonth()\r\n      ) {\r\n        week.push(entry);\r\n        if (week.length >= 7 || entryDate.getDay() === 6) {\r\n          weeks.push(week);\r\n          week = [];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (week.length) weeks.push(week);\r\n    return weeks;\r\n  };\r\n\r\n  const calculateBars = () => {\r\n    let balances = [];\r\n    let labels = [];\r\n\r\n    if (view === \"daily\") {\r\n      const currentWeek = getCurrentWeek(dailyPNLData);\r\n      balances = currentWeek.map((day) => parseFloat(day.balance || 0));\r\n      labels = currentWeek.map((day) =>\r\n        day.entry_date ? formatDate(day.entry_date) : \"Date\"\r\n      );\r\n    } else if (view === \"weekly\") {\r\n      const currentMonth = getCurrentMonth(dailyPNLData);\r\n      currentMonth.forEach((week) => {\r\n        const weekSum = week.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance || 0),\r\n          0\r\n        );\r\n        balances.push(weekSum);\r\n\r\n        const startOfWeek = week[0]?.entry_date;\r\n        const endOfWeek = week[week.length - 1]?.entry_date;\r\n        labels.push(\r\n          startOfWeek && endOfWeek\r\n            ? `${formatDate(startOfWeek)} - ${formatDate(endOfWeek)}`\r\n            : \"Week\"\r\n        );\r\n      });\r\n    } else if (view === \"monthly\") {\r\n      const months = Array.from({ length: 12 }, () => []);\r\n      dailyPNLData.forEach((entry) => {\r\n        const entryDate = new Date(entry.entry_date);\r\n        months[entryDate.getMonth()].push(entry);\r\n      });\r\n      months.forEach((month) => {\r\n        if (month.length > 0) {\r\n          const monthSum = month.reduce(\r\n            (sum, day) => sum + parseFloat(day.balance || 0),\r\n            0\r\n          );\r\n          balances.push(monthSum);\r\n          labels.push(\r\n            month[0]?.entry_date\r\n              ? formatMonthYear(month[0].entry_date)\r\n              : \"Month\"\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return { balances, labels };\r\n  };\r\n\r\n  const { balances, labels } = calculateBars();\r\n  const maxBalance = Math.max(...balances);\r\n  const threshold = maxBalance * 5;\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            1D\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            1M\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            1Y\r\n          </button>\r\n        </div>\r\n        <div className=\"header-date\">{headerDate}</div>\r\n      </div>\r\n\r\n      <hr />\r\n      <div className=\"bars-container\">\r\n        {balances.map((balance, index) => {\r\n          const percentage = (Math.abs(balance) / threshold) * 65;\r\n          const isPositive = balance >= 0;\r\n          return (\r\n            <div key={index} className=\"bar-wrapper\">\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n                style={{\r\n                  width: `${percentage}%`,\r\n                }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"No Daily PNL data\");\r\n//         console.error(\"No Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance || 0));\r\n//       labels = currentWeek.map((day) =>\r\n//         day.entry_date ? formatDate(day.entry_date) : \"Date\"\r\n//       );\r\n//     } else if (view === \"weekly\") {\r\n//       const currentMonth = getCurrentMonth(dailyPNLData);\r\n//       currentMonth.forEach((week) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance || 0),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           week[0]?.entry_date && week[week.length - 1]?.entry_date\r\n//             ? `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//                 week[week.length - 1].entry_date\r\n//               )}`\r\n//             : \"Week\"\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance || 0),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(\r\n//           month[0]?.entry_date ? formatMonthYear(month[0].entry_date) : \"Month\"\r\n//         );\r\n//       });\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() - 1)\r\n//     );\r\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const month = today.getMonth() + 1;\r\n\r\n//     data.forEach((entry, index) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() + 1 === month) {\r\n//         week.push(entry);\r\n//         if ((index + 1) % 5 === 0) {\r\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//       weeks.push(week);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     return months.filter((month) => month.length > 0);\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 5;\r\n\r\n//   const headerDate = dailyPNLData[0]?.entry_date\r\n//     ? view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date + \"T00:00:00\").toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0]\r\n//     : \"Date\";\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             1D\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             1M\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             1Y\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 65;\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
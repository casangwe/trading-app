{"ast":null,"code":"// Calculate Number of Trades\nexport const calculateNumberOfTrades = trades => trades.length;\n\n// Calculate Winning Trades\nexport const calculateWinningTrades = trades => trades.filter(trade => trade.exit_price - trade.entry_price > 0).length;\n\n// Calculate Losing Trades\nexport const calculateLosingTrades = trades => trades.filter(trade => trade.exit_price - trade.entry_price < 0).length;\n\n// Calculate Win Rate (percentage of winning trades)\nexport const calculateWinRate = trades => {\n  const winningTrades = calculateWinningTrades(trades);\n  const totalTrades = calculateNumberOfTrades(trades);\n  return totalTrades === 0 ? 0 : winningTrades / totalTrades * 100;\n};\n\n// Calculate Average Win (average profit of winning trades)\nexport const calculateAverageWin = trades => {\n  const winningTrades = trades.filter(trade => trade.exit_price - trade.entry_price > 0);\n  const totalWin = winningTrades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  return winningTrades.length === 0 ? 0 : totalWin / winningTrades.length;\n};\n\n// Calculate Average Loss (average loss of losing trades)\nexport const calculateAverageLoss = trades => {\n  const losingTrades = trades.filter(trade => trade.exit_price - trade.entry_price < 0);\n  const totalLoss = losingTrades.reduce((acc, trade) => acc + Math.abs(trade.exit_price - trade.entry_price), 0);\n  return losingTrades.length === 0 ? 0 : totalLoss / losingTrades.length;\n};\n\n// Calculate Risk-Reward Ratio (average win over average loss)\nexport const calculateRiskRewardRatio = trades => {\n  const averageWin = calculateAverageWin(trades);\n  const averageLoss = calculateAverageLoss(trades);\n  return averageLoss === 0 ? 0 : averageWin / averageLoss;\n};\n\n// Calculate Absolute Return (total profit/loss)\nexport const calculateAbsoluteReturn = trades => {\n  const totalPL = trades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  return totalPL * 100;\n};\n\n// Calculate Sharpe Ratio (return/risk, assumes risk-free rate of 0 for simplicity)\nexport const calculateSharpeRatio = trades => {\n  const absoluteReturn = calculateAbsoluteReturn(trades);\n  const standardDeviation = calculateStandardDeviation(trades);\n  return standardDeviation === 0 ? 0 : absoluteReturn / standardDeviation;\n};\n\n// Calculate Standard Deviation of returns for Sharpe Ratio\nexport const calculateStandardDeviation = trades => {\n  const returns = trades.map(trade => trade.exit_price - trade.entry_price);\n  const mean = returns.reduce((acc, value) => acc + value, 0) / returns.length;\n  const variance = returns.reduce((acc, value) => acc + Math.pow(value - mean, 2), 0) / returns.length;\n  return Math.sqrt(variance);\n};\n\n// Calculate Average Days in Trade\nexport const calculateAverageDaysInTrade = trades => {\n  const totalDays = trades.reduce((acc, trade) => {\n    const entryDate = new Date(trade.entry_date);\n    const exitDate = new Date(trade.exit_date);\n    const diffTime = Math.abs(exitDate - entryDate);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return acc + diffDays;\n  }, 0);\n  return trades.length === 0 ? 0 : totalDays / trades.length;\n};\n\n// Calculate Cash Balance\nexport const calculateCashBalance = (initialCash, netPL) => {\n  const initialCashNumber = Number(initialCash);\n  const netPLNumber = Number(netPL);\n  if (isNaN(initialCashNumber) || isNaN(netPLNumber)) {\n    console.error(\"Invalid input to calculateCashBalance:\", {\n      initialCash,\n      netPL\n    });\n    return 0;\n  }\n  return initialCashNumber + netPLNumber;\n};","map":{"version":3,"names":["calculateNumberOfTrades","trades","length","calculateWinningTrades","filter","trade","exit_price","entry_price","calculateLosingTrades","calculateWinRate","winningTrades","totalTrades","calculateAverageWin","totalWin","reduce","acc","calculateAverageLoss","losingTrades","totalLoss","Math","abs","calculateRiskRewardRatio","averageWin","averageLoss","calculateAbsoluteReturn","totalPL","calculateSharpeRatio","absoluteReturn","standardDeviation","calculateStandardDeviation","returns","map","mean","value","variance","pow","sqrt","calculateAverageDaysInTrade","totalDays","entryDate","Date","entry_date","exitDate","exit_date","diffTime","diffDays","ceil","calculateCashBalance","initialCash","netPL","initialCashNumber","Number","netPLNumber","isNaN","console","error"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisCalc.js"],"sourcesContent":["// Calculate Number of Trades\r\nexport const calculateNumberOfTrades = (trades) => trades.length;\r\n\r\n// Calculate Winning Trades\r\nexport const calculateWinningTrades = (trades) =>\r\n  trades.filter((trade) => trade.exit_price - trade.entry_price > 0).length;\r\n\r\n// Calculate Losing Trades\r\nexport const calculateLosingTrades = (trades) =>\r\n  trades.filter((trade) => trade.exit_price - trade.entry_price < 0).length;\r\n\r\n// Calculate Win Rate (percentage of winning trades)\r\nexport const calculateWinRate = (trades) => {\r\n  const winningTrades = calculateWinningTrades(trades);\r\n  const totalTrades = calculateNumberOfTrades(trades);\r\n  return totalTrades === 0 ? 0 : (winningTrades / totalTrades) * 100;\r\n};\r\n\r\n// Calculate Average Win (average profit of winning trades)\r\nexport const calculateAverageWin = (trades) => {\r\n  const winningTrades = trades.filter(\r\n    (trade) => trade.exit_price - trade.entry_price > 0\r\n  );\r\n  const totalWin = winningTrades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return winningTrades.length === 0 ? 0 : totalWin / winningTrades.length;\r\n};\r\n\r\n// Calculate Average Loss (average loss of losing trades)\r\nexport const calculateAverageLoss = (trades) => {\r\n  const losingTrades = trades.filter(\r\n    (trade) => trade.exit_price - trade.entry_price < 0\r\n  );\r\n  const totalLoss = losingTrades.reduce(\r\n    (acc, trade) => acc + Math.abs(trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return losingTrades.length === 0 ? 0 : totalLoss / losingTrades.length;\r\n};\r\n\r\n// Calculate Risk-Reward Ratio (average win over average loss)\r\nexport const calculateRiskRewardRatio = (trades) => {\r\n  const averageWin = calculateAverageWin(trades);\r\n  const averageLoss = calculateAverageLoss(trades);\r\n  return averageLoss === 0 ? 0 : averageWin / averageLoss;\r\n};\r\n\r\n// Calculate Absolute Return (total profit/loss)\r\nexport const calculateAbsoluteReturn = (trades) => {\r\n  const totalPL = trades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return totalPL * 100;\r\n};\r\n\r\n// Calculate Sharpe Ratio (return/risk, assumes risk-free rate of 0 for simplicity)\r\nexport const calculateSharpeRatio = (trades) => {\r\n  const absoluteReturn = calculateAbsoluteReturn(trades);\r\n  const standardDeviation = calculateStandardDeviation(trades);\r\n  return standardDeviation === 0 ? 0 : absoluteReturn / standardDeviation;\r\n};\r\n\r\n// Calculate Standard Deviation of returns for Sharpe Ratio\r\nexport const calculateStandardDeviation = (trades) => {\r\n  const returns = trades.map((trade) => trade.exit_price - trade.entry_price);\r\n  const mean = returns.reduce((acc, value) => acc + value, 0) / returns.length;\r\n  const variance =\r\n    returns.reduce((acc, value) => acc + Math.pow(value - mean, 2), 0) /\r\n    returns.length;\r\n  return Math.sqrt(variance);\r\n};\r\n\r\n// Calculate Average Days in Trade\r\nexport const calculateAverageDaysInTrade = (trades) => {\r\n  const totalDays = trades.reduce((acc, trade) => {\r\n    const entryDate = new Date(trade.entry_date);\r\n    const exitDate = new Date(trade.exit_date);\r\n    const diffTime = Math.abs(exitDate - entryDate);\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    return acc + diffDays;\r\n  }, 0);\r\n  return trades.length === 0 ? 0 : totalDays / trades.length;\r\n};\r\n\r\n// Calculate Cash Balance\r\nexport const calculateCashBalance = (initialCash, netPL) => {\r\n  const initialCashNumber = Number(initialCash);\r\n  const netPLNumber = Number(netPL);\r\n\r\n  if (isNaN(initialCashNumber) || isNaN(netPLNumber)) {\r\n    console.error(\"Invalid input to calculateCashBalance:\", {\r\n      initialCash,\r\n      netPL,\r\n    });\r\n    return 0;\r\n  }\r\n\r\n  return initialCashNumber + netPLNumber;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
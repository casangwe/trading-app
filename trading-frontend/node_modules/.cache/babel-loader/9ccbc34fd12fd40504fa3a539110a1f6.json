{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  const [calculatedBars, setCalculatedBars] = useState({\n    balances: [],\n    labels: []\n  });\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"Error fetching Daily PNL data\");\n        console.error(\"Error fetching Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  useEffect(() => {\n    if (dailyPNLData.length) {\n      setCalculatedBars(calculateBars(view, dailyPNLData));\n    }\n  }, [dailyPNLData, view]);\n  const loadingContent = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 26\n    }\n  }, \"Loading...\");\n  const errorContent = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 24\n    }\n  }, error);\n  if (loading) return loadingContent;\n  if (error) return errorContent;\n\n  // Helper function to format date as MM/YYYY\n  const formatMonthYear = dateStr => {\n    const dateParts = dateStr.split(\"-\");\n    return dateParts.length === 2 ? `${dateParts[1]}/${dateParts[0]}` : \"\";\n  };\n  const calculateBars = (currentView, data) => {\n    let balances = [];\n    let labels = [];\n    const dailyLength = data.length;\n    const resetWeeklyData = () => ({\n      weekSum: 0,\n      weekStartDate: \"\"\n    });\n    const resetMonthlyData = () => ({\n      monthSum: 0,\n      monthLabel: \"\"\n    });\n    if (currentView === \"daily\") {\n      balances = data.map(day => parseFloat(day.balance));\n      labels = data.map(day => formatDate(day.entry_date));\n    } else if (currentView === \"weekly\") {\n      const {\n        weekSum,\n        weekStartDate\n      } = data.reduce((acc, day, index) => {\n        acc.weekSum += parseFloat(day.balance);\n        acc.weekStartDate = index % 5 === 0 ? day.entry_date : acc.weekStartDate;\n        if ((index + 1) % 5 === 0 || index === dailyLength - 1) {\n          balances.push(acc.weekSum);\n          labels.push(formatDate(acc.weekStartDate));\n          acc.weekSum = 0; // Reset\n        }\n        return acc;\n      }, resetWeeklyData());\n    } else if (currentView === \"monthly\") {\n      const {\n        monthSum,\n        monthLabel\n      } = data.reduce((acc, day, index) => {\n        acc.monthSum += parseFloat(day.balance);\n        if (!acc.monthLabel) acc.monthLabel = day.entry_date;\n        if ((index + 1) % 20 === 0 || index === dailyLength - 1) {\n          balances.push(acc.monthSum);\n          labels.push(formatMonthYear(acc.monthLabel));\n          acc.monthSum = 0; // Reset\n          acc.monthLabel = \"\"; // Reset\n        }\n        return acc;\n      }, resetMonthlyData());\n    }\n    return {\n      balances,\n      labels\n    };\n  };\n  const {\n    balances,\n    labels\n  } = calculatedBars;\n  const maxBalanceValue = Math.max(...balances);\n  const threshold = maxBalanceValue > 0 ? maxBalanceValue * 1.2 : 1; // Avoid division by zero\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    role: \"tablist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, [\"daily\", \"weekly\", \"monthly\"].map(tab => /*#__PURE__*/React.createElement(\"button\", {\n    key: tab,\n    className: `tab-button ${view === tab ? \"active\" : \"\"}`,\n    onClick: () => setView(tab),\n    role: \"tab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, tab.charAt(0).toUpperCase() + tab.slice(1))))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, balances.map((balance, index) => {\n    const percentage = Math.abs(balance) / threshold * 100;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      \"aria-label\": `${labels[index]} balance: ${formatCash(balance)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      className: `bar ${balance >= 0 ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `${percentage}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   // Helper function to format date as MM/YYYY\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       balances = dailyPNLData.map((day) => parseFloat(day.balance));\n//       labels = dailyPNLData.map((day) => formatDate(day.entry_date));\n//       console.log(\"Daily view - Labels:\", labels);\n//     } else if (view === \"weekly\") {\n//       let weekSum = 0;\n//       let weekStartDate = \"\";\n//       dailyPNLData.forEach((day, index) => {\n//         weekSum += parseFloat(day.balance);\n\n//         if (index % 5 === 0) {\n//           weekStartDate = day.entry_date;\n//         }\n\n//         if ((index + 1) % 5 === 0 || index === dailyPNLData.length - 1) {\n//           balances.push(weekSum);\n//           labels.push(formatDate(weekStartDate));\n//           weekSum = 0;\n//         }\n//       });\n//       console.log(\"Weekly view - Final Labels:\", labels);\n//     } else if (view === \"monthly\") {\n//       let monthSum = 0;\n//       let monthLabel = \"\";\n//       dailyPNLData.forEach((day, index) => {\n//         monthSum += parseFloat(day.balance);\n//         if ((index + 1) % 20 === 0 || index === dailyPNLData.length - 1) {\n//           balances.push(monthSum);\n//           labels.push(\n//             monthLabel\n//               ? formatMonthYear(monthLabel)\n//               : formatMonthYear(day.entry_date)\n//           );\n//           console.log(\"Monthly view - Labels after push:\", labels);\n//           monthSum = 0;\n//           monthLabel = \"\";\n//         }\n//         if (!monthLabel) monthLabel = day.entry_date;\n//       });\n//       console.log(\"Monthly view - Final Labels:\", labels);\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 1.2;\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 100;\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","calculatedBars","setCalculatedBars","balances","labels","fetchDailyPNLData","data","console","length","calculateBars","loadingContent","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","errorContent","formatMonthYear","dateStr","dateParts","split","currentView","dailyLength","resetWeeklyData","weekSum","weekStartDate","resetMonthlyData","monthSum","monthLabel","map","day","parseFloat","balance","entry_date","reduce","acc","index","push","maxBalanceValue","Math","max","threshold","className","role","tab","key","onClick","charAt","toUpperCase","slice","percentage","abs","style","width"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n  const [calculatedBars, setCalculatedBars] = useState({\r\n    balances: [],\r\n    labels: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"Error fetching Daily PNL data\");\r\n        console.error(\"Error fetching Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (dailyPNLData.length) {\r\n      setCalculatedBars(calculateBars(view, dailyPNLData));\r\n    }\r\n  }, [dailyPNLData, view]);\r\n\r\n  const loadingContent = <div>Loading...</div>;\r\n  const errorContent = <div>{error}</div>;\r\n\r\n  if (loading) return loadingContent;\r\n  if (error) return errorContent;\r\n\r\n  // Helper function to format date as MM/YYYY\r\n  const formatMonthYear = (dateStr) => {\r\n    const dateParts = dateStr.split(\"-\");\r\n    return dateParts.length === 2 ? `${dateParts[1]}/${dateParts[0]}` : \"\";\r\n  };\r\n\r\n  const calculateBars = (currentView, data) => {\r\n    let balances = [];\r\n    let labels = [];\r\n\r\n    const dailyLength = data.length;\r\n\r\n    const resetWeeklyData = () => ({ weekSum: 0, weekStartDate: \"\" });\r\n    const resetMonthlyData = () => ({ monthSum: 0, monthLabel: \"\" });\r\n\r\n    if (currentView === \"daily\") {\r\n      balances = data.map((day) => parseFloat(day.balance));\r\n      labels = data.map((day) => formatDate(day.entry_date));\r\n    } else if (currentView === \"weekly\") {\r\n      const { weekSum, weekStartDate } = data.reduce((acc, day, index) => {\r\n        acc.weekSum += parseFloat(day.balance);\r\n        acc.weekStartDate =\r\n          index % 5 === 0 ? day.entry_date : acc.weekStartDate;\r\n\r\n        if ((index + 1) % 5 === 0 || index === dailyLength - 1) {\r\n          balances.push(acc.weekSum);\r\n          labels.push(formatDate(acc.weekStartDate));\r\n          acc.weekSum = 0; // Reset\r\n        }\r\n        return acc;\r\n      }, resetWeeklyData());\r\n    } else if (currentView === \"monthly\") {\r\n      const { monthSum, monthLabel } = data.reduce((acc, day, index) => {\r\n        acc.monthSum += parseFloat(day.balance);\r\n        if (!acc.monthLabel) acc.monthLabel = day.entry_date;\r\n\r\n        if ((index + 1) % 20 === 0 || index === dailyLength - 1) {\r\n          balances.push(acc.monthSum);\r\n          labels.push(formatMonthYear(acc.monthLabel));\r\n          acc.monthSum = 0; // Reset\r\n          acc.monthLabel = \"\"; // Reset\r\n        }\r\n        return acc;\r\n      }, resetMonthlyData());\r\n    }\r\n\r\n    return { balances, labels };\r\n  };\r\n\r\n  const { balances, labels } = calculatedBars;\r\n  const maxBalanceValue = Math.max(...balances);\r\n  const threshold = maxBalanceValue > 0 ? maxBalanceValue * 1.2 : 1; // Avoid division by zero\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\" role=\"tablist\">\r\n          {[\"daily\", \"weekly\", \"monthly\"].map((tab) => (\r\n            <button\r\n              key={tab}\r\n              className={`tab-button ${view === tab ? \"active\" : \"\"}`}\r\n              onClick={() => setView(tab)}\r\n              role=\"tab\"\r\n            >\r\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <hr />\r\n      <div className=\"bars-container\">\r\n        {balances.map((balance, index) => {\r\n          const percentage = (Math.abs(balance) / threshold) * 100;\r\n          return (\r\n            <div\r\n              key={index}\r\n              className=\"bar-wrapper\"\r\n              aria-label={`${labels[index]} balance: ${formatCash(balance)}`}\r\n            >\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                className={`bar ${balance >= 0 ? \"positive\" : \"negative\"}`}\r\n                style={{ width: `${percentage}%` }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   // Helper function to format date as MM/YYYY\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       balances = dailyPNLData.map((day) => parseFloat(day.balance));\r\n//       labels = dailyPNLData.map((day) => formatDate(day.entry_date));\r\n//       console.log(\"Daily view - Labels:\", labels);\r\n//     } else if (view === \"weekly\") {\r\n//       let weekSum = 0;\r\n//       let weekStartDate = \"\";\r\n//       dailyPNLData.forEach((day, index) => {\r\n//         weekSum += parseFloat(day.balance);\r\n\r\n//         if (index % 5 === 0) {\r\n//           weekStartDate = day.entry_date;\r\n//         }\r\n\r\n//         if ((index + 1) % 5 === 0 || index === dailyPNLData.length - 1) {\r\n//           balances.push(weekSum);\r\n//           labels.push(formatDate(weekStartDate));\r\n//           weekSum = 0;\r\n//         }\r\n//       });\r\n//       console.log(\"Weekly view - Final Labels:\", labels);\r\n//     } else if (view === \"monthly\") {\r\n//       let monthSum = 0;\r\n//       let monthLabel = \"\";\r\n//       dailyPNLData.forEach((day, index) => {\r\n//         monthSum += parseFloat(day.balance);\r\n//         if ((index + 1) % 20 === 0 || index === dailyPNLData.length - 1) {\r\n//           balances.push(monthSum);\r\n//           labels.push(\r\n//             monthLabel\r\n//               ? formatMonthYear(monthLabel)\r\n//               : formatMonthYear(day.entry_date)\r\n//           );\r\n//           console.log(\"Monthly view - Labels after push:\", labels);\r\n//           monthSum = 0;\r\n//           monthLabel = \"\";\r\n//         }\r\n//         if (!monthLabel) monthLabel = day.entry_date;\r\n//       });\r\n//       console.log(\"Monthly view - Final Labels:\", labels);\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 1.2;\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 100;\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
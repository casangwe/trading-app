{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\analysis\\\\AnalysisDisplay.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\nimport { performAnalysis } from \"./AnalysisGet\";\nconst AnalysisDisplay = () => {\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const results = await performAnalysis();\n        setAnalysisResults(results);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    fetchData();\n  }, []);\n  if (error) {\n    console.error(\"Error fetching analysis data:\", error);\n  }\n  if (!analysisResults && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  const {\n    averageWin = 0,\n    averageLoss = 0\n  } = analysisResults || {};\n  const total = averageWin + averageLoss;\n  const winPercent = total > 0 ? averageWin / total * 100 : 50;\n\n  // Data for PieChart\n  const data = [{\n    name: \"Average Win\",\n    value: winPercent\n  }, {\n    name: \"Average Loss\",\n    value: 100 - winPercent\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-display-container\",\n    style: {\n      width: \"150px\",\n      margin: \"0 auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 150,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PieChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pie, {\n    data: data,\n    innerRadius: 50,\n    outerRadius: 70,\n    dataKey: \"value\",\n    startAngle: 90,\n    endAngle: -270,\n    stroke: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Cell, {\n    key: \"win\",\n    fill: \"#4a90e2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    key: \"loss\",\n    fill: \"#f44336\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"text\", {\n    x: \"50%\",\n    y: \"50%\",\n    textAnchor: \"middle\",\n    dominantBaseline: \"middle\",\n    style: {\n      fontSize: \"18px\",\n      fontWeight: \"bold\",\n      fill: \"#4a90e2\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, `${winPercent.toFixed(2)}%`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metrics-summary\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-average-win\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Avg Win: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 20\n    }\n  }, \"$\", averageWin.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-average-loss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Avg Loss: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"$\", averageLoss.toFixed(2)))));\n};\nexport default AnalysisDisplay;\n\n// import React, { useState, useEffect } from \"react\";\n// import { performAnalysis } from \"./AnalysisGet\";\n// import { Line } from \"rc-progress\";\n\n// const AnalysisDisplay = () => {\n//   const [analysisResults, setAnalysisResults] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await performAnalysis();\n//         setAnalysisResults(results);\n//       } catch (err) {\n//         setError(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatValue = (value, isCurrency = false) => {\n//     if (isNaN(value) || value === undefined) {\n//       return isCurrency ? \"$0.00\" : \"N/A\";\n//     }\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\n//   };\n\n//   if (error) {\n//     console.error(\"Error fetching analysis data:\", error);\n//   }\n\n//   if (!analysisResults && !error) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const {\n//     absoluteReturn = 0,\n//     sharpeRatio = 0,\n//     winRate = 0,\n//     numberOfTrades = 0,\n//     winningTrades = 0,\n//     losingTrades = 0,\n//     averageWin = 0,\n//     averageLoss = 0,\n//     riskRewardRatio = 0,\n//   } = analysisResults || {};\n\n//   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\n\n//   return (\n//     <div className=\"analysis-container\">\n//       <div className=\"analysis-metrics-row\">\n//         {/* Absolute Return Metric */}\n//         <div className=\"analysis-metric-top\">\n//           <h3>Absolute Return</h3>\n//           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\n//           <Line\n//             percent={absoluteReturnPercentage}\n//             strokeWidth=\"2\"\n//             trailWidth=\"2\"\n//             strokeColor={\"#4a90e2\"}\n//             trailColor=\"#d8e3ef\"\n//           />\n//         </div>\n\n//         {/* Sharpe Ratio Metric */}\n//         <div className=\"analysis-metric-top\">\n//           <h3>Sharpe Ratio</h3>\n//           <p>{formatValue(sharpeRatio)}</p>\n//           <Line\n//             percent={sharpeRatioPercentage}\n//             strokeWidth=\"2\"\n//             trailWidth=\"2\"\n//             strokeColor={\"#4a90e2\"}\n//             trailColor=\"#d8e3ef\"\n//           />\n//         </div>\n//       </div>\n\n//       {/* Trades, Wins, and Losses Row */}\n//       <div className=\"analysis-row\">\n//         <div className=\"analysis-circle\">\n//           <h3>Trades</h3>\n//           <p>{numberOfTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Wins</h3>\n//           <p>{winningTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Losses</h3>\n//           <p>{losingTrades}</p>\n//         </div>\n//       </div>\n\n//       {/* Additional Metrics Row */}\n//       <div className=\"analysis-metrics-row\">\n//         <div className=\"analysis-metric\">\n//           <h3>Win Rate</h3>\n//           <p>{formatValue(winRate)}%</p>\n//         </div>\n//         <div className=\"analysis-metric\">\n//           <h3>Avg. Win</h3>\n//           <p>{formatValue(averageWin, true)}</p>\n//         </div>\n//         <div className=\"analysis-metric\">\n//           <h3>Avg. Loss</h3>\n//           <p>{formatValue(averageLoss, true)}</p>\n//         </div>\n//         <div className=\"analysis-metric\">\n//           <h3>Risk Reward</h3>\n//           <p>{formatValue(riskRewardRatio)}</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AnalysisDisplay;","map":{"version":3,"names":["React","useState","useEffect","PieChart","Pie","Cell","ResponsiveContainer","performAnalysis","AnalysisDisplay","analysisResults","setAnalysisResults","error","setError","fetchData","results","err","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","averageWin","averageLoss","total","winPercent","data","name","value","className","style","width","margin","height","innerRadius","outerRadius","dataKey","startAngle","endAngle","stroke","key","fill","x","y","textAnchor","dominantBaseline","fontSize","fontWeight","toFixed","textAlign","marginTop"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\r\nimport { performAnalysis } from \"./AnalysisGet\";\r\n\r\nconst AnalysisDisplay = () => {\r\n  const [analysisResults, setAnalysisResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const results = await performAnalysis();\r\n        setAnalysisResults(results);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (error) {\r\n    console.error(\"Error fetching analysis data:\", error);\r\n  }\r\n\r\n  if (!analysisResults && !error) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const { averageWin = 0, averageLoss = 0 } = analysisResults || {};\r\n  const total = averageWin + averageLoss;\r\n  const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n\r\n  // Data for PieChart\r\n  const data = [\r\n    { name: \"Average Win\", value: winPercent },\r\n    { name: \"Average Loss\", value: 100 - winPercent },\r\n  ];\r\n\r\n  return (\r\n    <div\r\n      className=\"analysis-display-container\"\r\n      style={{ width: \"150px\", margin: \"0 auto\" }}\r\n    >\r\n      <ResponsiveContainer width=\"100%\" height={150}>\r\n        <PieChart>\r\n          <Pie\r\n            data={data}\r\n            innerRadius={50}\r\n            outerRadius={70}\r\n            dataKey=\"value\"\r\n            startAngle={90}\r\n            endAngle={-270}\r\n            stroke=\"none\"\r\n          >\r\n            <Cell key=\"win\" fill=\"#4a90e2\" />\r\n            <Cell key=\"loss\" fill=\"#f44336\" />\r\n          </Pie>\r\n          {/* Centered label for percentage */}\r\n          <text\r\n            x=\"50%\"\r\n            y=\"50%\"\r\n            textAnchor=\"middle\"\r\n            dominantBaseline=\"middle\"\r\n            style={{ fontSize: \"18px\", fontWeight: \"bold\", fill: \"#4a90e2\" }}\r\n          >\r\n            {`${winPercent.toFixed(2)}%`}\r\n          </text>\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n      <div\r\n        className=\"analysis-metrics-summary\"\r\n        style={{ textAlign: \"center\", marginTop: \"10px\" }}\r\n      >\r\n        <div className=\"analysis-average-win\">\r\n          Avg Win: <span className=\"amount\">${averageWin.toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"analysis-average-loss\">\r\n          Avg Loss: <span className=\"amount\">${averageLoss.toFixed(2)}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisDisplay;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { performAnalysis } from \"./AnalysisGet\";\r\n// import { Line } from \"rc-progress\";\r\n\r\n// const AnalysisDisplay = () => {\r\n//   const [analysisResults, setAnalysisResults] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const results = await performAnalysis();\r\n//         setAnalysisResults(results);\r\n//       } catch (err) {\r\n//         setError(err);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const formatValue = (value, isCurrency = false) => {\r\n//     if (isNaN(value) || value === undefined) {\r\n//       return isCurrency ? \"$0.00\" : \"N/A\";\r\n//     }\r\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\r\n//   };\r\n\r\n//   if (error) {\r\n//     console.error(\"Error fetching analysis data:\", error);\r\n//   }\r\n\r\n//   if (!analysisResults && !error) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const {\r\n//     absoluteReturn = 0,\r\n//     sharpeRatio = 0,\r\n//     winRate = 0,\r\n//     numberOfTrades = 0,\r\n//     winningTrades = 0,\r\n//     losingTrades = 0,\r\n//     averageWin = 0,\r\n//     averageLoss = 0,\r\n//     riskRewardRatio = 0,\r\n//   } = analysisResults || {};\r\n\r\n//   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\r\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\r\n\r\n//   return (\r\n//     <div className=\"analysis-container\">\r\n//       <div className=\"analysis-metrics-row\">\r\n//         {/* Absolute Return Metric */}\r\n//         <div className=\"analysis-metric-top\">\r\n//           <h3>Absolute Return</h3>\r\n//           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\r\n//           <Line\r\n//             percent={absoluteReturnPercentage}\r\n//             strokeWidth=\"2\"\r\n//             trailWidth=\"2\"\r\n//             strokeColor={\"#4a90e2\"}\r\n//             trailColor=\"#d8e3ef\"\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Sharpe Ratio Metric */}\r\n//         <div className=\"analysis-metric-top\">\r\n//           <h3>Sharpe Ratio</h3>\r\n//           <p>{formatValue(sharpeRatio)}</p>\r\n//           <Line\r\n//             percent={sharpeRatioPercentage}\r\n//             strokeWidth=\"2\"\r\n//             trailWidth=\"2\"\r\n//             strokeColor={\"#4a90e2\"}\r\n//             trailColor=\"#d8e3ef\"\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Trades, Wins, and Losses Row */}\r\n//       <div className=\"analysis-row\">\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Trades</h3>\r\n//           <p>{numberOfTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Wins</h3>\r\n//           <p>{winningTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Losses</h3>\r\n//           <p>{losingTrades}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Additional Metrics Row */}\r\n//       <div className=\"analysis-metrics-row\">\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Win Rate</h3>\r\n//           <p>{formatValue(winRate)}%</p>\r\n//         </div>\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Avg. Win</h3>\r\n//           <p>{formatValue(averageWin, true)}</p>\r\n//         </div>\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Avg. Loss</h3>\r\n//           <p>{formatValue(averageLoss, true)}</p>\r\n//         </div>\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Risk Reward</h3>\r\n//           <p>{formatValue(riskRewardRatio)}</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
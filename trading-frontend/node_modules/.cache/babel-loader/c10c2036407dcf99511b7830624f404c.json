{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = () => {\n  const chartRef = useRef(null);\n  const [timePeriod, setTimePeriod] = useState(\"days\");\n  const [tradeData, setTradeData] = useState([]);\n  useEffect(() => {\n    const fetchTradeData = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/trades/top-profitable/\");\n        setTradeData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching trade data: \", error);\n      }\n    };\n    fetchTradeData();\n  }, []);\n  useEffect(() => {\n    if (tradeData.length > 0) {\n      const labels = tradeData.map(trade => trade.date); // Assuming the date field is available in the trade data\n      const data = tradeData.map(trade => trade.profit); // Assuming the profit field is available in the trade data\n\n      const ctx = chartRef.current.getContext(\"2d\");\n      const myChart = new window.Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            borderColor: \"green\",\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            borderWidth: 2\n          }]\n        },\n        options: {\n          // Chart options\n        }\n      });\n      return () => {\n        myChart.destroy();\n      };\n    }\n  }, [tradeData]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n};\nexport default AccountGraph;\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [timePeriod]); // Re-render the chart when the time period changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = (period) => {\n//     // Implement logic to return labels based on the selected time period\n//     // For example,\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = (period) => {\n//     // Implement logic to return data based on the selected time period\n//     // For example, if period is \"weeks\", return data for weeks\n//   };\n\n//   // Function to handle time period change\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"days\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"months\")}\n//         >\n//           1M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\n//         >\n//           3M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\n//         >\n//           YTD\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\n//         >\n//           1Y\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"max\")}\n//         >\n//           MAX\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","AccountGraph","chartRef","timePeriod","setTimePeriod","tradeData","setTradeData","fetchTradeData","response","get","data","error","console","length","labels","map","trade","date","profit","ctx","current","getContext","myChart","window","Chart","type","datasets","borderColor","backgroundColor","borderWidth","options","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = () => {\r\n  const chartRef = useRef(null);\r\n  const [timePeriod, setTimePeriod] = useState(\"days\");\r\n  const [tradeData, setTradeData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchTradeData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:8000/trades/top-profitable/\"\r\n        );\r\n        setTradeData(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching trade data: \", error);\r\n      }\r\n    };\r\n\r\n    fetchTradeData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (tradeData.length > 0) {\r\n      const labels = tradeData.map((trade) => trade.date); // Assuming the date field is available in the trade data\r\n      const data = tradeData.map((trade) => trade.profit); // Assuming the profit field is available in the trade data\r\n\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"line\",\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              data: data,\r\n              borderColor: \"green\",\r\n              backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n              borderWidth: 2,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          // Chart options\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy();\r\n      };\r\n    }\r\n  }, [tradeData]);\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} />\r\n      <div className=\"time-period-selector\">\r\n        {/* Buttons for selecting time periods */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [timePeriod]); // Re-render the chart when the time period changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = (period) => {\r\n//     // Implement logic to return labels based on the selected time period\r\n//     // For example,\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = (period) => {\r\n//     // Implement logic to return data based on the selected time period\r\n//     // For example, if period is \"weeks\", return data for weeks\r\n//   };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"days\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"months\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//         >\r\n//           3M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//         >\r\n//           YTD\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//         >\r\n//           1Y\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"max\")}\r\n//         >\r\n//           MAX\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,2BAA2B;AAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,MAAM,CAAC;EACpD,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE9CF,SAAS,CAAC,MAAM;IACd,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC9B,8CACF,CAAC;QACDH,YAAY,CAACE,QAAQ,CAACE,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDJ,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;MACxB,MAAMC,MAAM,GAAGT,SAAS,CAACU,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACrD,MAAMP,IAAI,GAAGL,SAAS,CAACU,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC;;MAErD,MAAMC,GAAG,GAAGjB,QAAQ,CAACkB,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7C,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACL,GAAG,EAAE;QACpCM,IAAI,EAAE,MAAM;QACZf,IAAI,EAAE;UACJI,MAAM,EAAEA,MAAM;UACdY,QAAQ,EAAE,CACR;YACEhB,IAAI,EAAEA,IAAI;YACViB,WAAW,EAAE,OAAO;YACpBC,eAAe,EAAE,kBAAkB;YACnCC,WAAW,EAAE;UACf,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACP;QAAA;MAEJ,CAAC,CAAC;MAEF,OAAO,MAAM;QACXR,OAAO,CAACS,OAAO,CAAC,CAAC;MACnB,CAAC;IACH;EACF,CAAC,EAAE,CAAC1B,SAAS,CAAC,CAAC;EAEf,oBACET,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5B3C,KAAA,CAAAoC,aAAA;IAAQQ,GAAG,EAAEtC,QAAS;IAAAgC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACzB3C,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,sBAAsB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAEhC,CACF,CAAC;AAEV,CAAC;AAED,eAAetC,YAAY;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
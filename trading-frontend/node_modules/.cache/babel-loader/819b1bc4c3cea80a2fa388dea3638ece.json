{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Account.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/account.css\";\nimport AccountGraph from \"./AccountGraph\";\nconst Account = ({\n  trades\n}) => {\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [dailyPL, setDailyPL] = useState(0);\n  const [periodPL, setPeriodPL] = useState(0);\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const handleTimePeriodChange = event => {\n    setTimePeriod(event.target.textContent);\n    setDropdownOpen(false);\n  };\n  useEffect(() => {\n    const calculateBalanceAndPL = () => {\n      let balance = 0;\n      let dailyProfitLoss = 0;\n      let periodProfitLoss = 0;\n      trades.forEach(trade => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          const profit = (exitPrice - entryPrice) * contracts * 100;\n          balance += profit;\n          dailyProfitLoss += profit;\n        }\n        const tradeCloseDate = new Date(trade.close_date);\n        if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date())) {\n          periodProfitLoss += calculateProfit(trade);\n        }\n      });\n      setAccountBalance(balance);\n      setDailyPL(dailyProfitLoss);\n      setPeriodPL(periodProfitLoss);\n    };\n    const calculateProfit = trade => {\n      const entryPrice = parseFloat(trade.entry_price);\n      const exitPrice = parseFloat(trade.exit_price);\n      const contracts = trade.contracts;\n      if (!isNaN(exitPrice)) {\n        return (exitPrice - entryPrice) * contracts * 100;\n      }\n      return 0;\n    };\n    const isWithinTimePeriod = (tradeCloseDate, period, today) => {\n      const periodStartDate = new Date();\n      switch (period) {\n        case \"1D\":\n          periodStartDate.setDate(today.getDate() - 1);\n          break;\n        case \"1W\":\n          periodStartDate.setDate(today.getDate() - 7);\n          break;\n        case \"1M\":\n          periodStartDate.setMonth(today.getMonth() - 1);\n          break;\n        case \"3M\":\n          periodStartDate.setMonth(today.getMonth() - 3);\n          break;\n        case \"YTD\":\n          periodStartDate.setFullYear(today.getFullYear(), 0, 1);\n          break;\n        case \"1Y\":\n          periodStartDate.setFullYear(today.getFullYear() - 1);\n          break;\n        case \"Max\":\n          // Implement Max logic here if needed\n          break;\n        default:\n          break;\n      }\n      return period === \"Max\" || tradeCloseDate >= periodStartDate;\n    };\n    calculateBalanceAndPL();\n  }, [trades, timePeriod]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"$ \", accountBalance.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    onMouseEnter: () => setDropdownOpen(true),\n    onMouseLeave: () => setDropdownOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"dropbtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \" \", timePeriod, \" \"), dropdownOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: handleTimePeriodChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Max\"))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"$ \", periodPL.toFixed(2))), /*#__PURE__*/React.createElement(AccountGraph, {\n    trades: trades,\n    onTimePeriodChange: handleTimePeriodChange,\n    periodPL: periodPL,\n    timePeriod: timePeriod,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 0;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100;\n//           balance += profit;\n//           dailyProfitLoss += profit;\n//         }\n\n//         const tradeCloseDate = new Date(trade.close_date);\n\n//         // Calculate the period profit based on the selected time period\n//         if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date(), trade)) {\n//           periodProfitLoss += calculateProfit(trade);\n//         }\n//       });\n\n//       setAccountBalance(balance);\n//       setDailyPL(dailyProfitLoss);\n//       setPeriodPL(periodProfitLoss);\n//     };\n\n//     const calculateProfit = (trade) => {\n//       const entryPrice = parseFloat(trade.entry_price);\n//       const exitPrice = parseFloat(trade.exit_price);\n//       const contracts = trade.contracts;\n//       if (!isNaN(exitPrice)) {\n//         return (exitPrice - entryPrice) * contracts * 100;\n//       }\n//       return 0;\n//     };\n\n//     const isWithinTimePeriod = (tradeCloseDate, period, today, trade) => {\n//       const periodStartDate = new Date();\n\n//       switch (period) {\n//         case \"1D\":\n//           periodStartDate.setDate(today.getDate() - 1);\n//           break;\n//         case \"1W\":\n//           periodStartDate.setDate(today.getDate() - 7);\n//           break;\n//         case \"1M\":\n//           periodStartDate.setMonth(today.getMonth() - 1);\n//           break;\n//         case \"3M\":\n//           periodStartDate.setMonth(today.getMonth() - 3);\n//           break;\n//         case \"YTD\":\n//           periodStartDate.setFullYear(today.getFullYear(), 0, 1);\n//           break;\n//         case \"1Y\":\n//           periodStartDate.setFullYear(today.getFullYear() - 1);\n//           break;\n//         case \"Max\":\n//           return trades.reduce((total, trade) => {\n//             const entryPrice = parseFloat(trade.entry_price);\n//             const exitPrice = parseFloat(trade.exit_price);\n//             const contracts = trade.contracts;\n//             if (!isNaN(exitPrice)) {\n//               return total + (exitPrice - entryPrice) * contracts * 100;\n//             }\n//             return total;\n//           }, 0);\n//         default:\n//           break;\n//       }\n\n//       return period === \"Max\" || tradeCloseDate >= periodStartDate;\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>\n//           <select value={timePeriod} onChange={handleTimePeriodChange}>\n//             <option value=\"1D\">1D</option>\n//             <option value=\"1W\">1W</option>\n//             <option value=\"1M\">1M</option>\n//             <option value=\"3M\">3M</option>\n//             <option value=\"YTD\">YTD</option>\n//             <option value=\"1Y\">1Y</option>\n//             <option value=\"Max\">Max</option>\n//           </select>\n//         </p>\n//         <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph\n//         trades={trades}\n//         onTimePeriodChange={handleTimePeriodChange}\n//         periodPL={periodPL}\n//         timePeriod={timePeriod}\n//       />\n//     </div>\n//   );\n\n//   // return (\n//   //   <div className=\"account\">\n//   //     <div className=\"card\">\n//   //       <p>Account</p>\n//   //       <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\n//   //     </div>\n//   //     <div className=\"card\">\n//   //       <p>{`${timePeriod}`}</p>\n//   //       <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\n//   //     </div>\n//   //     <AccountGraph\n//   //       trades={trades}\n//   //       onTimePeriodChange={handleTimePeriodChange}\n//   //       periodPL={periodPL}\n//   //       timePeriod={timePeriod}\n//   //     />\n//   //   </div>\n//   // );\n// };\n\n// export default Account;","map":{"version":3,"names":["React","useState","useEffect","AccountGraph","Account","trades","accountBalance","setAccountBalance","dailyPL","setDailyPL","periodPL","setPeriodPL","timePeriod","setTimePeriod","dropdownOpen","setDropdownOpen","handleTimePeriodChange","event","target","textContent","calculateBalanceAndPL","balance","dailyProfitLoss","periodProfitLoss","forEach","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","profit","tradeCloseDate","Date","close_date","isWithinTimePeriod","calculateProfit","period","today","periodStartDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onMouseEnter","onMouseLeave","href","onClick","onTimePeriodChange"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/account.css\";\r\nimport AccountGraph from \"./AccountGraph\";\r\n\r\nconst Account = ({ trades }) => {\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n  const [dailyPL, setDailyPL] = useState(0);\r\n  const [periodPL, setPeriodPL] = useState(0);\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const handleTimePeriodChange = (event) => {\r\n    setTimePeriod(event.target.textContent);\r\n    setDropdownOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const calculateBalanceAndPL = () => {\r\n      let balance = 0;\r\n      let dailyProfitLoss = 0;\r\n      let periodProfitLoss = 0;\r\n\r\n      trades.forEach((trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n\r\n        if (!isNaN(exitPrice)) {\r\n          const profit = (exitPrice - entryPrice) * contracts * 100;\r\n          balance += profit;\r\n          dailyProfitLoss += profit;\r\n        }\r\n\r\n        const tradeCloseDate = new Date(trade.close_date);\r\n\r\n        if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date())) {\r\n          periodProfitLoss += calculateProfit(trade);\r\n        }\r\n      });\r\n\r\n      setAccountBalance(balance);\r\n      setDailyPL(dailyProfitLoss);\r\n      setPeriodPL(periodProfitLoss);\r\n    };\r\n\r\n    const calculateProfit = (trade) => {\r\n      const entryPrice = parseFloat(trade.entry_price);\r\n      const exitPrice = parseFloat(trade.exit_price);\r\n      const contracts = trade.contracts;\r\n      if (!isNaN(exitPrice)) {\r\n        return (exitPrice - entryPrice) * contracts * 100;\r\n      }\r\n      return 0;\r\n    };\r\n\r\n    const isWithinTimePeriod = (tradeCloseDate, period, today) => {\r\n      const periodStartDate = new Date();\r\n\r\n      switch (period) {\r\n        case \"1D\":\r\n          periodStartDate.setDate(today.getDate() - 1);\r\n          break;\r\n        case \"1W\":\r\n          periodStartDate.setDate(today.getDate() - 7);\r\n          break;\r\n        case \"1M\":\r\n          periodStartDate.setMonth(today.getMonth() - 1);\r\n          break;\r\n        case \"3M\":\r\n          periodStartDate.setMonth(today.getMonth() - 3);\r\n          break;\r\n        case \"YTD\":\r\n          periodStartDate.setFullYear(today.getFullYear(), 0, 1);\r\n          break;\r\n        case \"1Y\":\r\n          periodStartDate.setFullYear(today.getFullYear() - 1);\r\n          break;\r\n        case \"Max\":\r\n          // Implement Max logic here if needed\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return period === \"Max\" || tradeCloseDate >= periodStartDate;\r\n    };\r\n\r\n    calculateBalanceAndPL();\r\n  }, [trades, timePeriod]);\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"card\">\r\n        <p>Account</p>\r\n        <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div\r\n          className=\"dropdown\"\r\n          onMouseEnter={() => setDropdownOpen(true)}\r\n          onMouseLeave={() => setDropdownOpen(false)}\r\n        >\r\n          <button className=\"dropbtn\"> {timePeriod} </button>\r\n          {dropdownOpen && (\r\n            <div className=\"dropdown-content\">\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                1D\r\n              </a>\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                1W\r\n              </a>\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                1M\r\n              </a>\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                3M\r\n              </a>\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                YTD\r\n              </a>\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                1Y\r\n              </a>\r\n              <a href=\"#\" onClick={handleTimePeriodChange}>\r\n                Max\r\n              </a>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\r\n      </div>\r\n      <AccountGraph\r\n        trades={trades}\r\n        onTimePeriodChange={handleTimePeriodChange}\r\n        periodPL={periodPL}\r\n        timePeriod={timePeriod}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 0;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100;\r\n//           balance += profit;\r\n//           dailyProfitLoss += profit;\r\n//         }\r\n\r\n//         const tradeCloseDate = new Date(trade.close_date);\r\n\r\n//         // Calculate the period profit based on the selected time period\r\n//         if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date(), trade)) {\r\n//           periodProfitLoss += calculateProfit(trade);\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance);\r\n//       setDailyPL(dailyProfitLoss);\r\n//       setPeriodPL(periodProfitLoss);\r\n//     };\r\n\r\n//     const calculateProfit = (trade) => {\r\n//       const entryPrice = parseFloat(trade.entry_price);\r\n//       const exitPrice = parseFloat(trade.exit_price);\r\n//       const contracts = trade.contracts;\r\n//       if (!isNaN(exitPrice)) {\r\n//         return (exitPrice - entryPrice) * contracts * 100;\r\n//       }\r\n//       return 0;\r\n//     };\r\n\r\n//     const isWithinTimePeriod = (tradeCloseDate, period, today, trade) => {\r\n//       const periodStartDate = new Date();\r\n\r\n//       switch (period) {\r\n//         case \"1D\":\r\n//           periodStartDate.setDate(today.getDate() - 1);\r\n//           break;\r\n//         case \"1W\":\r\n//           periodStartDate.setDate(today.getDate() - 7);\r\n//           break;\r\n//         case \"1M\":\r\n//           periodStartDate.setMonth(today.getMonth() - 1);\r\n//           break;\r\n//         case \"3M\":\r\n//           periodStartDate.setMonth(today.getMonth() - 3);\r\n//           break;\r\n//         case \"YTD\":\r\n//           periodStartDate.setFullYear(today.getFullYear(), 0, 1);\r\n//           break;\r\n//         case \"1Y\":\r\n//           periodStartDate.setFullYear(today.getFullYear() - 1);\r\n//           break;\r\n//         case \"Max\":\r\n//           return trades.reduce((total, trade) => {\r\n//             const entryPrice = parseFloat(trade.entry_price);\r\n//             const exitPrice = parseFloat(trade.exit_price);\r\n//             const contracts = trade.contracts;\r\n//             if (!isNaN(exitPrice)) {\r\n//               return total + (exitPrice - entryPrice) * contracts * 100;\r\n//             }\r\n//             return total;\r\n//           }, 0);\r\n//         default:\r\n//           break;\r\n//       }\r\n\r\n//       return period === \"Max\" || tradeCloseDate >= periodStartDate;\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>\r\n//           <select value={timePeriod} onChange={handleTimePeriodChange}>\r\n//             <option value=\"1D\">1D</option>\r\n//             <option value=\"1W\">1W</option>\r\n//             <option value=\"1M\">1M</option>\r\n//             <option value=\"3M\">3M</option>\r\n//             <option value=\"YTD\">YTD</option>\r\n//             <option value=\"1Y\">1Y</option>\r\n//             <option value=\"Max\">Max</option>\r\n//           </select>\r\n//         </p>\r\n//         <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph\r\n//         trades={trades}\r\n//         onTimePeriodChange={handleTimePeriodChange}\r\n//         periodPL={periodPL}\r\n//         timePeriod={timePeriod}\r\n//       />\r\n//     </div>\r\n//   );\r\n\r\n//   // return (\r\n//   //   <div className=\"account\">\r\n//   //     <div className=\"card\">\r\n//   //       <p>Account</p>\r\n//   //       <p className=\"cash\">$ {accountBalance.toFixed(2)}</p>\r\n//   //     </div>\r\n//   //     <div className=\"card\">\r\n//   //       <p>{`${timePeriod}`}</p>\r\n//   //       <p className=\"cash\">$ {periodPL.toFixed(2)}</p>\r\n//   //     </div>\r\n//   //     <AccountGraph\r\n//   //       trades={trades}\r\n//   //       onTimePeriodChange={handleTimePeriodChange}\r\n//   //       periodPL={periodPL}\r\n//   //       timePeriod={timePeriod}\r\n//   //     />\r\n//   //   </div>\r\n//   // );\r\n// };\r\n\r\n// export default Account;\r\n"],"mappings":"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},"metadata":{},"sourceType":"module"}
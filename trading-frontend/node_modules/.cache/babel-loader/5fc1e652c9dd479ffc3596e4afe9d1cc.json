{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\DailyPNL.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaChartLine, FaPercentage, FaMoneyBillWave, FaCalendarAlt } from \"react-icons/fa\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { fetchTransactions } from \"../api/TransactionsAPI\";\nimport { fetchTrades } from \"../api/TradesAPI\"; // Assuming you fetch trades\nimport { getCash } from \"../api/CashApi\";\nimport { calculateInitialCash, calculateAvailableCash, calculateNetPL, calculateCashBalance, calculateROI } from \"./CashCalc\";\nimport { formatDate, formatCash } from \"../func/functions\";\nconst DailyPNL = () => {\n  var _dailyPnls$, _dailyPnls$2;\n  const [cashData, setCashData] = useState(null);\n  const [dailyPnls, setDailyPnls] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [trades, setTrades] = useState([]); // Will hold the logged trades (closed trades)\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Destructure to ensure we capture the tradesResponse correctly\n        const [cashResponse, pnlResponse, transactionsResponse, tradesResponse] = await Promise.all([getCash(), fetchDailyPnls(), fetchTransactions(), fetchTrades() // Fetch the logged trades\n        ]);\n        setCashData(cashResponse);\n        setDailyPnls(pnlResponse);\n        setTransactions(transactionsResponse);\n        setTrades(tradesResponse); // Set trades state with the fetched trades data\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, error);\n  if (!cashData || !dailyPnls.length || !transactions.length || !trades.length) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }\n  }, \"No data available\");\n\n  // Calculate the metrics based on cash, transactions, and logged trades\n  const initialCash = calculateInitialCash(cashData);\n  const netPL = calculateNetPL(trades); // Summing up profit/loss of trades\n  const availableCash = calculateAvailableCash(initialCash, transactions, trades);\n  const cashBalance = calculateCashBalance(initialCash, netPL, transactions);\n  const roi = calculateROI(initialCash, netPL);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"daily-pnl-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"daily-pnl-card-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-details-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaMoneyBillWave, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Initial Cash:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, formatCash(initialCash))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaPercentage, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Current ROI:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, `${roi.toFixed(2)}%`)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaMoneyBillWave, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Available Cash:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, formatCash(availableCash))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaCalendarAlt, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Last Updated:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, formatDate(new Date())))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cash-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaMoneyBillWave, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Open Cash:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, formatCash(((_dailyPnls$ = dailyPnls[0]) === null || _dailyPnls$ === void 0 ? void 0 : _dailyPnls$.open_cash) || 0))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaMoneyBillWave, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Close Cash:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, formatCash(((_dailyPnls$2 = dailyPnls[0]) === null || _dailyPnls$2 === void 0 ? void 0 : _dailyPnls$2.close_cash) || 0)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cash-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaChartLine, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Cash Balance:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, formatCash(cashBalance))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FaPercentage, {\n    className: \"card-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"ROI:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, `${roi.toFixed(2)}%`)))));\n};\nexport default DailyPNL;\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   FaChartLine,\n//   FaPercentage,\n//   FaMoneyBillWave,\n//   FaCalendarAlt,\n// } from \"react-icons/fa\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\n// import { fetchTrades } from \"../api/TradesAPI\";\n// import { getCash } from \"../api/CashApi\";\n// import {\n//   calculateInitialCash,\n//   calculateAvailableCash,\n//   calculateNetPL,\n//   calculateCashBalance,\n//   calculateROI,\n// } from \"../cash/CashCalc\";\n// import { formatDate, formatCash } from \"../func/functions\";\n\n// const DailyPNL = () => {\n//   const [cashData, setCashData] = useState(null);\n//   const [dailyPnls, setDailyPnls] = useState([]);\n//   const [transactions, setTransactions] = useState([]);\n//   const [trades, setTrades] = useState([]); // Will hold the logged trades (closed trades)\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [\n//           cashResponse,\n//           pnlResponse,\n//           transactionsResponse,\n//           tradesResponse,\n//         ] = await Promise.all([\n//           getCash(),\n//           fetchDailyPnls(),\n//           fetchTransactions(),\n//           fetchTrades(), // You would add this API to fetch logged trades if available\n//         ]);\n\n//         setCashData(cashResponse);\n//         setDailyPnls(pnlResponse);\n//         setTransactions(transactionsResponse);\n//         setTrades(tradesResponse); // Set trades if you fetch them via API\n//       } catch (error) {\n//         setError(\"Error fetching data\");\n//         console.error(\"Error fetching data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>{error}</p>;\n//   if (!cashData || !dailyPnls.length || !transactions.length)\n//     return <p>No data available</p>;\n\n//   // Calculate the metrics based on cash, transactions, and logged trades\n//   const initialCash = calculateInitialCash(cashData);\n//   const netPL = calculateNetPL(trades); // Summing up profit/loss of trades\n//   const availableCash = calculateAvailableCash(\n//     initialCash,\n//     transactions,\n//     trades\n//   );\n//   const cashBalance = calculateCashBalance(initialCash, netPL, transactions);\n//   const roi = calculateROI(initialCash, netPL);\n\n//   return (\n//     <div className=\"daily-pnl-container\">\n//       <div className=\"daily-pnl-card-container\">\n//         {/* Left section: Investment details */}\n//         <div className=\"investment-details-card\">\n//           <div className=\"card-content\">\n//             <FaMoneyBillWave className=\"card-icon\" />\n//             <span className=\"label\">Initial Cash:</span>\n//             <span className=\"value\">{formatCash(initialCash)}</span>\n//           </div>\n//           <div className=\"card-content\">\n//             <FaPercentage className=\"card-icon\" />\n//             <span className=\"label\">Current ROI:</span>\n//             <span className=\"value\">{`${roi.toFixed(2)}%`}</span>\n//           </div>\n//           <div className=\"card-content\">\n//             <FaMoneyBillWave className=\"card-icon\" />\n//             <span className=\"label\">Available Cash:</span>\n//             <span className=\"value\">{formatCash(availableCash)}</span>\n//           </div>\n//           <div className=\"card-content\">\n//             <FaCalendarAlt className=\"card-icon\" />\n//             <span className=\"label\">Last Updated:</span>\n//             <span className=\"value\">{formatDate(new Date())}</span>\n//           </div>\n//         </div>\n\n//         {/* Right section: Balance and ROI */}\n//         <div className=\"cash-section\">\n//           <div className=\"card-content\">\n//             <FaChartLine className=\"card-icon\" />\n//             <span className=\"label\">Cash Balance:</span>\n//             <span className=\"value\">{formatCash(cashBalance)}</span>\n//           </div>\n//           <div className=\"card-content\">\n//             <FaPercentage className=\"card-icon\" />\n//             <span className=\"label\">ROI:</span>\n//             <span className=\"value\">{`${roi.toFixed(2)}%`}</span>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DailyPNL;\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   FaChartLine,\n//   FaPercentage,\n//   FaUpload,\n//   FaMoneyBillWave,\n//   FaCalendarAlt,\n// } from \"react-icons/fa\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatDate, formatCash } from \"../func/functions\";\n\n// const DailyPNL = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         console.log(data);\n//         if (data.length > 0) {\n//           const sortedData = data.sort(\n//             (a, b) => new Date(b.entry_date) - new Date(a.entry_date)\n//           );\n//           setDailyPNLData(sortedData[0]);\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>{error}</p>;\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\n\n//   return (\n//     <div className=\"daily-pnl-container\">\n//       <div className=\"daily-pnl-card-container\">\n//         <div className=\"daily-pnl-card\">\n//           <div className=\"card-content\">\n//             <FaCalendarAlt className=\"card-icon\" />\n//             <span className=\"label\">Entry Date:</span>\n//             <span className=\"value\">{formatDate(dailyPNLData.entry_date)}</span>\n//           </div>\n//         </div>\n//         <div className=\"daily-pnl-card\">\n//           <div className=\"card-content\">\n//             <FaMoneyBillWave className=\"card-icon\" />\n//             <span className=\"label\">Open Cash:</span>\n//             <span className=\"value\">{formatCash(dailyPNLData.open_cash)}</span>\n//           </div>\n//         </div>\n//         <div className=\"daily-pnl-card\">\n//           <div className=\"card-content\">\n//             <FaUpload className=\"card-icon\" />\n//             <span className=\"label\">Close Cash:</span>\n//             <span className=\"value\">{formatCash(dailyPNLData.close_cash)}</span>\n//           </div>\n//         </div>\n//         <div className=\"daily-pnl-card\">\n//           <div className=\"card-content\">\n//             <FaChartLine className=\"card-icon\" />\n//             <span className=\"label\">Balance:</span>\n//             <span className=\"value\">{formatCash(dailyPNLData.balance)}</span>\n//           </div>\n//         </div>\n//         <div className=\"daily-pnl-card\">\n//           <div className=\"card-content\">\n//             <FaPercentage className=\"card-icon\" />\n//             <span className=\"label\">RoI:</span>\n//             <span className=\"value\">{dailyPNLData.roi}%</span>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DailyPNL;","map":{"version":3,"names":["React","useEffect","useState","FaChartLine","FaPercentage","FaMoneyBillWave","FaCalendarAlt","fetchDailyPnls","fetchTransactions","fetchTrades","getCash","calculateInitialCash","calculateAvailableCash","calculateNetPL","calculateCashBalance","calculateROI","formatDate","formatCash","DailyPNL","_dailyPnls$","_dailyPnls$2","cashData","setCashData","dailyPnls","setDailyPnls","transactions","setTransactions","trades","setTrades","loading","setLoading","error","setError","fetchData","cashResponse","pnlResponse","transactionsResponse","tradesResponse","Promise","all","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","initialCash","netPL","availableCash","cashBalance","roi","className","toFixed","Date","open_cash","close_cash"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/DailyPNL.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FaChartLine,\r\n  FaPercentage,\r\n  FaMoneyBillWave,\r\n  FaCalendarAlt,\r\n} from \"react-icons/fa\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { fetchTransactions } from \"../api/TransactionsAPI\";\r\nimport { fetchTrades } from \"../api/TradesAPI\"; // Assuming you fetch trades\r\nimport { getCash } from \"../api/CashApi\";\r\nimport {\r\n  calculateInitialCash,\r\n  calculateAvailableCash,\r\n  calculateNetPL,\r\n  calculateCashBalance,\r\n  calculateROI,\r\n} from \"./CashCalc\";\r\nimport { formatDate, formatCash } from \"../func/functions\";\r\n\r\nconst DailyPNL = () => {\r\n  const [cashData, setCashData] = useState(null);\r\n  const [dailyPnls, setDailyPnls] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [trades, setTrades] = useState([]); // Will hold the logged trades (closed trades)\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Destructure to ensure we capture the tradesResponse correctly\r\n        const [\r\n          cashResponse,\r\n          pnlResponse,\r\n          transactionsResponse,\r\n          tradesResponse,\r\n        ] = await Promise.all([\r\n          getCash(),\r\n          fetchDailyPnls(),\r\n          fetchTransactions(),\r\n          fetchTrades(), // Fetch the logged trades\r\n        ]);\r\n\r\n        setCashData(cashResponse);\r\n        setDailyPnls(pnlResponse);\r\n        setTransactions(transactionsResponse);\r\n        setTrades(tradesResponse); // Set trades state with the fetched trades data\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n  if (!cashData || !dailyPnls.length || !transactions.length || !trades.length)\r\n    return <p>No data available</p>;\r\n\r\n  // Calculate the metrics based on cash, transactions, and logged trades\r\n  const initialCash = calculateInitialCash(cashData);\r\n  const netPL = calculateNetPL(trades); // Summing up profit/loss of trades\r\n  const availableCash = calculateAvailableCash(\r\n    initialCash,\r\n    transactions,\r\n    trades\r\n  );\r\n  const cashBalance = calculateCashBalance(initialCash, netPL, transactions);\r\n  const roi = calculateROI(initialCash, netPL);\r\n\r\n  return (\r\n    <div className=\"daily-pnl-container\">\r\n      <div className=\"daily-pnl-card-container\">\r\n        {/* Left section: Investment details */}\r\n        <div className=\"investment-details-card\">\r\n          <div className=\"card-content\">\r\n            <FaMoneyBillWave className=\"card-icon\" />\r\n            <span className=\"label\">Initial Cash:</span>\r\n            <span className=\"value\">{formatCash(initialCash)}</span>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <FaPercentage className=\"card-icon\" />\r\n            <span className=\"label\">Current ROI:</span>\r\n            <span className=\"value\">{`${roi.toFixed(2)}%`}</span>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <FaMoneyBillWave className=\"card-icon\" />\r\n            <span className=\"label\">Available Cash:</span>\r\n            <span className=\"value\">{formatCash(availableCash)}</span>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <FaCalendarAlt className=\"card-icon\" />\r\n            <span className=\"label\">Last Updated:</span>\r\n            <span className=\"value\">{formatDate(new Date())}</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Middle section: Open Cash and Close Cash */}\r\n        <div className=\"cash-section\">\r\n          <div className=\"card-content\">\r\n            <FaMoneyBillWave className=\"card-icon\" />\r\n            <span className=\"label\">Open Cash:</span>\r\n            <span className=\"value\">\r\n              {formatCash(dailyPnls[0]?.open_cash || 0)}\r\n            </span>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <FaMoneyBillWave className=\"card-icon\" />\r\n            <span className=\"label\">Close Cash:</span>\r\n            <span className=\"value\">\r\n              {formatCash(dailyPnls[0]?.close_cash || 0)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right section: Balance and ROI */}\r\n        <div className=\"cash-section\">\r\n          <div className=\"card-content\">\r\n            <FaChartLine className=\"card-icon\" />\r\n            <span className=\"label\">Cash Balance:</span>\r\n            <span className=\"value\">{formatCash(cashBalance)}</span>\r\n          </div>\r\n          <div className=\"card-content\">\r\n            <FaPercentage className=\"card-icon\" />\r\n            <span className=\"label\">ROI:</span>\r\n            <span className=\"value\">{`${roi.toFixed(2)}%`}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyPNL;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   FaChartLine,\r\n//   FaPercentage,\r\n//   FaMoneyBillWave,\r\n//   FaCalendarAlt,\r\n// } from \"react-icons/fa\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// import { fetchTrades } from \"../api/TradesAPI\";\r\n// import { getCash } from \"../api/CashApi\";\r\n// import {\r\n//   calculateInitialCash,\r\n//   calculateAvailableCash,\r\n//   calculateNetPL,\r\n//   calculateCashBalance,\r\n//   calculateROI,\r\n// } from \"../cash/CashCalc\";\r\n// import { formatDate, formatCash } from \"../func/functions\";\r\n\r\n// const DailyPNL = () => {\r\n//   const [cashData, setCashData] = useState(null);\r\n//   const [dailyPnls, setDailyPnls] = useState([]);\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [trades, setTrades] = useState([]); // Will hold the logged trades (closed trades)\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const [\r\n//           cashResponse,\r\n//           pnlResponse,\r\n//           transactionsResponse,\r\n//           tradesResponse,\r\n//         ] = await Promise.all([\r\n//           getCash(),\r\n//           fetchDailyPnls(),\r\n//           fetchTransactions(),\r\n//           fetchTrades(), // You would add this API to fetch logged trades if available\r\n//         ]);\r\n\r\n//         setCashData(cashResponse);\r\n//         setDailyPnls(pnlResponse);\r\n//         setTransactions(transactionsResponse);\r\n//         setTrades(tradesResponse); // Set trades if you fetch them via API\r\n//       } catch (error) {\r\n//         setError(\"Error fetching data\");\r\n//         console.error(\"Error fetching data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n//   if (error) return <p>{error}</p>;\r\n//   if (!cashData || !dailyPnls.length || !transactions.length)\r\n//     return <p>No data available</p>;\r\n\r\n//   // Calculate the metrics based on cash, transactions, and logged trades\r\n//   const initialCash = calculateInitialCash(cashData);\r\n//   const netPL = calculateNetPL(trades); // Summing up profit/loss of trades\r\n//   const availableCash = calculateAvailableCash(\r\n//     initialCash,\r\n//     transactions,\r\n//     trades\r\n//   );\r\n//   const cashBalance = calculateCashBalance(initialCash, netPL, transactions);\r\n//   const roi = calculateROI(initialCash, netPL);\r\n\r\n//   return (\r\n//     <div className=\"daily-pnl-container\">\r\n//       <div className=\"daily-pnl-card-container\">\r\n//         {/* Left section: Investment details */}\r\n//         <div className=\"investment-details-card\">\r\n//           <div className=\"card-content\">\r\n//             <FaMoneyBillWave className=\"card-icon\" />\r\n//             <span className=\"label\">Initial Cash:</span>\r\n//             <span className=\"value\">{formatCash(initialCash)}</span>\r\n//           </div>\r\n//           <div className=\"card-content\">\r\n//             <FaPercentage className=\"card-icon\" />\r\n//             <span className=\"label\">Current ROI:</span>\r\n//             <span className=\"value\">{`${roi.toFixed(2)}%`}</span>\r\n//           </div>\r\n//           <div className=\"card-content\">\r\n//             <FaMoneyBillWave className=\"card-icon\" />\r\n//             <span className=\"label\">Available Cash:</span>\r\n//             <span className=\"value\">{formatCash(availableCash)}</span>\r\n//           </div>\r\n//           <div className=\"card-content\">\r\n//             <FaCalendarAlt className=\"card-icon\" />\r\n//             <span className=\"label\">Last Updated:</span>\r\n//             <span className=\"value\">{formatDate(new Date())}</span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Right section: Balance and ROI */}\r\n//         <div className=\"cash-section\">\r\n//           <div className=\"card-content\">\r\n//             <FaChartLine className=\"card-icon\" />\r\n//             <span className=\"label\">Cash Balance:</span>\r\n//             <span className=\"value\">{formatCash(cashBalance)}</span>\r\n//           </div>\r\n//           <div className=\"card-content\">\r\n//             <FaPercentage className=\"card-icon\" />\r\n//             <span className=\"label\">ROI:</span>\r\n//             <span className=\"value\">{`${roi.toFixed(2)}%`}</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DailyPNL;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   FaChartLine,\r\n//   FaPercentage,\r\n//   FaUpload,\r\n//   FaMoneyBillWave,\r\n//   FaCalendarAlt,\r\n// } from \"react-icons/fa\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatDate, formatCash } from \"../func/functions\";\r\n\r\n// const DailyPNL = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         console.log(data);\r\n//         if (data.length > 0) {\r\n//           const sortedData = data.sort(\r\n//             (a, b) => new Date(b.entry_date) - new Date(a.entry_date)\r\n//           );\r\n//           setDailyPNLData(sortedData[0]);\r\n//         }\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n//   if (error) return <p>{error}</p>;\r\n//   if (!dailyPNLData) return <p>No PNL data available</p>;\r\n\r\n//   return (\r\n//     <div className=\"daily-pnl-container\">\r\n//       <div className=\"daily-pnl-card-container\">\r\n//         <div className=\"daily-pnl-card\">\r\n//           <div className=\"card-content\">\r\n//             <FaCalendarAlt className=\"card-icon\" />\r\n//             <span className=\"label\">Entry Date:</span>\r\n//             <span className=\"value\">{formatDate(dailyPNLData.entry_date)}</span>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"daily-pnl-card\">\r\n//           <div className=\"card-content\">\r\n//             <FaMoneyBillWave className=\"card-icon\" />\r\n//             <span className=\"label\">Open Cash:</span>\r\n//             <span className=\"value\">{formatCash(dailyPNLData.open_cash)}</span>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"daily-pnl-card\">\r\n//           <div className=\"card-content\">\r\n//             <FaUpload className=\"card-icon\" />\r\n//             <span className=\"label\">Close Cash:</span>\r\n//             <span className=\"value\">{formatCash(dailyPNLData.close_cash)}</span>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"daily-pnl-card\">\r\n//           <div className=\"card-content\">\r\n//             <FaChartLine className=\"card-icon\" />\r\n//             <span className=\"label\">Balance:</span>\r\n//             <span className=\"value\">{formatCash(dailyPNLData.balance)}</span>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"daily-pnl-card\">\r\n//           <div className=\"card-content\">\r\n//             <FaPercentage className=\"card-icon\" />\r\n//             <span className=\"label\">RoI:</span>\r\n//             <span className=\"value\">{dailyPNLData.roi}%</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DailyPNL;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
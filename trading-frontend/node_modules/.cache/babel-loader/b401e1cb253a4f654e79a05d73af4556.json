{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n        console.log(\"Fetched Daily PNL Data:\", data);\n      } catch (error) {\n        setError(\"Error fetching Daily PNL data\");\n        console.error(\"Error fetching Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, error);\n  const formatMonthYear = dateStr => {\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n    const dateParts = dateStr.split(\"-\");\n    const month = dateParts[1].padStart(2, \"0\"); // Ensure two-digit month\n    const year = dateParts[0];\n    return `${month}/${year}`;\n  };\n  const calculateBars = () => {\n    let balances = [];\n    let labels = [];\n    console.log(\"Calculating bars for view:\", view);\n    if (view === \"daily\") {\n      const currentWeek = getCurrentWeek(dailyPNLData);\n      balances = currentWeek.map(day => parseFloat(day.balance));\n      labels = currentWeek.map(day => formatDate(day.entry_date));\n    } else if (view === \"weekly\") {\n      const weeks = getCurrentMonth(dailyPNLData);\n      weeks.forEach((week, index) => {\n        const weekSum = week.reduce((sum, day) => sum + parseFloat(day.balance), 0);\n        balances.push(weekSum);\n        labels.push(`${formatDate(week[0].entry_date)} - ${formatDate(week[week.length - 1].entry_date)}`);\n      });\n    } else if (view === \"monthly\") {\n      const months = getMonthsData(dailyPNLData);\n      months.forEach((month, index) => {\n        const monthSum = month.reduce((sum, day) => sum + parseFloat(day.balance), 0);\n        balances.push(monthSum);\n        labels.push(formatMonthYear(month[0].entry_date));\n      });\n    }\n    console.log(\"Balances:\", balances);\n    console.log(\"Labels:\", labels);\n    return {\n      balances,\n      labels\n    };\n  };\n  const getCurrentWeek = data => {\n    const weekData = [];\n    const today = new Date();\n    const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + 1)); // Adjust to Monday\n    const endOfWeek = new Date(today.setDate(startOfWeek.getDate() + 6));\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n        weekData.push(entry);\n      }\n    });\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n    console.log(\"Filtered Week Data:\", weekData);\n    return weekData;\n  };\n  const getCurrentMonth = data => {\n    const weeks = [];\n    let week = [];\n    const today = new Date();\n    const currentMonth = today.getMonth(); // Zero-based\n\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate.getMonth() === currentMonth) {\n        week.push(entry);\n        // Check if the week needs to be closed (e.g., 7 days)\n        if (week.length > 6) {\n          weeks.push(week);\n          week = [];\n        }\n      }\n    });\n    if (week.length) {\n      weeks.push(week); // Add the last week if it exists\n    }\n    console.log(\"Weekly Data for Current Month:\", weeks);\n    return weeks;\n  };\n  const getMonthsData = data => {\n    const months = Array.from({\n      length: 12\n    }, () => []);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      months[entryDate.getMonth()].push(entry);\n    });\n    const nonEmptyMonths = months.filter(month => month.length > 0);\n    console.log(\"Monthly Data:\", nonEmptyMonths);\n    return nonEmptyMonths;\n  };\n  const {\n    balances,\n    labels\n  } = calculateBars();\n  const maxBalance = Math.max(...balances);\n  const threshold = maxBalance || 1; // Prevent division by zero\n\n  const headerDate = view === \"daily\" ? new Date(dailyPNLData[0].entry_date).toLocaleDateString() : view === \"weekly\" ? formatMonthYear(dailyPNLData[0].entry_date) : dailyPNLData[0].entry_date.split(\"-\")[0];\n  console.log(\"Header Date:\", headerDate);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Weekly\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"Monthly\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, headerDate)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, balances.map((balance, index) => {\n    const percentage = Math.abs(balance) / threshold * 100;\n    const isPositive = balance >= 0;\n    console.log(`Rendering bar for ${labels[index]}: Balance = ${balance}, Percentage = ${percentage}`);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      className: `bar ${isPositive ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `${percentage}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\n//     } else if (view === \"weekly\") {\n//       const currentMonth = getCurrentMonth(dailyPNLData);\n//       currentMonth.forEach((week) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\n//             week[week.length - 1].entry_date\n//           )}`\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(formatMonthYear(month[0].entry_date));\n//       });\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const startOfWeek = new Date(\n//       today.setDate(today.getDate() - today.getDay() - 1)\n//     );\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     console.log(\"Filtered Week Data:\", weekData);\n\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const month = today.getMonth() + 1;\n\n//     data.forEach((entry, index) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() + 1 === month) {\n//         week.push(entry);\n//         if ((index + 1) % 5 === 0) {\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//       weeks.push(week);\n//     }\n\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     return months.filter((month) => month.length > 0);\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 5;\n\n//   const headerDate =\n//     view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 100;\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","fetchDailyPNLData","data","console","log","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMonthYear","dateStr","includes","dateParts","split","month","padStart","year","calculateBars","balances","labels","currentWeek","getCurrentWeek","map","day","parseFloat","balance","entry_date","weeks","getCurrentMonth","forEach","week","index","weekSum","reduce","sum","push","length","months","getMonthsData","monthSum","weekData","today","Date","startOfWeek","setDate","getDate","getDay","endOfWeek","entry","entryDate","sort","a","b","currentMonth","getMonth","Array","from","nonEmptyMonths","filter","maxBalance","Math","max","threshold","headerDate","toLocaleDateString","className","onClick","percentage","abs","isPositive","key","style","width"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n        console.log(\"Fetched Daily PNL Data:\", data);\r\n      } catch (error) {\r\n        setError(\"Error fetching Daily PNL data\");\r\n        console.error(\"Error fetching Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  const formatMonthYear = (dateStr) => {\r\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n    const dateParts = dateStr.split(\"-\");\r\n    const month = dateParts[1].padStart(2, \"0\"); // Ensure two-digit month\r\n    const year = dateParts[0];\r\n    return `${month}/${year}`;\r\n  };\r\n\r\n  const calculateBars = () => {\r\n    let balances = [];\r\n    let labels = [];\r\n\r\n    console.log(\"Calculating bars for view:\", view);\r\n\r\n    if (view === \"daily\") {\r\n      const currentWeek = getCurrentWeek(dailyPNLData);\r\n      balances = currentWeek.map((day) => parseFloat(day.balance));\r\n      labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n    } else if (view === \"weekly\") {\r\n      const weeks = getCurrentMonth(dailyPNLData);\r\n      weeks.forEach((week, index) => {\r\n        const weekSum = week.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance),\r\n          0\r\n        );\r\n        balances.push(weekSum);\r\n        labels.push(\r\n          `${formatDate(week[0].entry_date)} - ${formatDate(\r\n            week[week.length - 1].entry_date\r\n          )}`\r\n        );\r\n      });\r\n    } else if (view === \"monthly\") {\r\n      const months = getMonthsData(dailyPNLData);\r\n      months.forEach((month, index) => {\r\n        const monthSum = month.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance),\r\n          0\r\n        );\r\n        balances.push(monthSum);\r\n        labels.push(formatMonthYear(month[0].entry_date));\r\n      });\r\n    }\r\n\r\n    console.log(\"Balances:\", balances);\r\n    console.log(\"Labels:\", labels);\r\n\r\n    return { balances, labels };\r\n  };\r\n\r\n  const getCurrentWeek = (data) => {\r\n    const weekData = [];\r\n    const today = new Date();\r\n    const startOfWeek = new Date(\r\n      today.setDate(today.getDate() - today.getDay() + 1)\r\n    ); // Adjust to Monday\r\n    const endOfWeek = new Date(today.setDate(startOfWeek.getDate() + 6));\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n        weekData.push(entry);\r\n      }\r\n    });\r\n\r\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n    console.log(\"Filtered Week Data:\", weekData);\r\n\r\n    return weekData;\r\n  };\r\n\r\n  const getCurrentMonth = (data) => {\r\n    const weeks = [];\r\n    let week = [];\r\n    const today = new Date();\r\n    const currentMonth = today.getMonth(); // Zero-based\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate.getMonth() === currentMonth) {\r\n        week.push(entry);\r\n        // Check if the week needs to be closed (e.g., 7 days)\r\n        if (week.length > 6) {\r\n          weeks.push(week);\r\n          week = [];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (week.length) {\r\n      weeks.push(week); // Add the last week if it exists\r\n    }\r\n\r\n    console.log(\"Weekly Data for Current Month:\", weeks);\r\n    return weeks;\r\n  };\r\n\r\n  const getMonthsData = (data) => {\r\n    const months = Array.from({ length: 12 }, () => []);\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      months[entryDate.getMonth()].push(entry);\r\n    });\r\n    const nonEmptyMonths = months.filter((month) => month.length > 0);\r\n    console.log(\"Monthly Data:\", nonEmptyMonths);\r\n    return nonEmptyMonths;\r\n  };\r\n\r\n  const { balances, labels } = calculateBars();\r\n  const maxBalance = Math.max(...balances);\r\n  const threshold = maxBalance || 1; // Prevent division by zero\r\n\r\n  const headerDate =\r\n    view === \"daily\"\r\n      ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n      : view === \"weekly\"\r\n      ? formatMonthYear(dailyPNLData[0].entry_date)\r\n      : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n  console.log(\"Header Date:\", headerDate);\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            Daily\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            Weekly\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            Monthly\r\n          </button>\r\n        </div>\r\n        <div className=\"header-date\">{headerDate}</div>\r\n      </div>\r\n\r\n      <hr />\r\n      <div className=\"bars-container\">\r\n        {balances.map((balance, index) => {\r\n          const percentage = (Math.abs(balance) / threshold) * 100;\r\n          const isPositive = balance >= 0;\r\n          console.log(\r\n            `Rendering bar for ${labels[index]}: Balance = ${balance}, Percentage = ${percentage}`\r\n          );\r\n          return (\r\n            <div key={index} className=\"bar-wrapper\">\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n                style={{\r\n                  width: `${percentage}%`,\r\n                }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\r\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n//     } else if (view === \"weekly\") {\r\n//       const currentMonth = getCurrentMonth(dailyPNLData);\r\n//       currentMonth.forEach((week) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//             week[week.length - 1].entry_date\r\n//           )}`\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(formatMonthYear(month[0].entry_date));\r\n//       });\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const startOfWeek = new Date(\r\n//       today.setDate(today.getDate() - today.getDay() - 1)\r\n//     );\r\n//     const endOfWeek = new Date(today.setDate(today.getDate() + 6));\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     console.log(\"Filtered Week Data:\", weekData);\r\n\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const month = today.getMonth() + 1;\r\n\r\n//     data.forEach((entry, index) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() + 1 === month) {\r\n//         week.push(entry);\r\n//         if ((index + 1) % 5 === 0) {\r\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//       weeks.push(week);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     return months.filter((month) => month.length > 0);\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 5;\r\n\r\n//   const headerDate =\r\n//     view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 100;\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
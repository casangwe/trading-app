{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000\";\n\n// Function to get the token from local storage\nconst getToken = () => {\n  return localStorage.getItem(\"access_token\");\n};\n\n// Function to get user data from local storage\nconst getUserData = () => {\n  const userData = localStorage.getItem(\"user_data\");\n  return userData ? JSON.parse(userData) : null;\n};\n\n// Function to get cash data for a specific user\nexport const getCash = async () => {\n  const token = getToken();\n  const userData = getUserData();\n  const userId = userData ? userData.sub : null; // Use the `sub` field for userId\n\n  if (!userId) {\n    throw new Error(\"User ID is not available.\");\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error(`Error fetching cash data: ${errorDetails.detail || response.statusText}`);\n      throw new Error(errorDetails.detail || response.statusText);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Get Cash Error:\", error);\n    throw error;\n  }\n};\n\n// Function to create a new cash record\nexport const createCash = async cashData => {\n  const token = getToken();\n  const userData = getUserData();\n  const userId = userData ? userData.sub : null;\n  if (!userId) {\n    throw new Error(\"User ID is not available.\");\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/cash/`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...cashData,\n        userId\n      })\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error(`Error creating cash record: ${errorDetails.detail || response.statusText}`);\n      throw new Error(errorDetails.detail || response.statusText);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Create Cash Error:\", error);\n    throw error;\n  }\n};\n\n// Function to update an existing cash record\nexport const updateCash = async cashData => {\n  const token = getToken();\n  const userData = getUserData();\n  const userId = userData ? userData.sub : null; // Use the `sub` field for userId\n\n  if (!userId) {\n    throw new Error(\"User ID is not available.\");\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(cashData)\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error(`Error updating cash record: ${errorDetails.detail || response.statusText}`);\n      throw new Error(errorDetails.detail || response.statusText);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update Cash Error:\", error);\n    throw error;\n  }\n};\n\n// Function to delete a cash record\nexport const deleteCash = async () => {\n  const token = getToken();\n  const userData = getUserData();\n  const userId = userData ? userData.sub : null; // Use the `sub` field for userId\n\n  if (!userId) {\n    throw new Error(\"User ID is not available.\");\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error(`Error deleting cash record: ${errorDetails.detail || response.statusText}`);\n      throw new Error(errorDetails.detail || response.statusText);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete Cash Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getToken","localStorage","getItem","getUserData","userData","JSON","parse","getCash","token","userId","sub","Error","response","fetch","method","headers","Authorization","ok","errorDetails","json","console","error","detail","statusText","createCash","cashData","body","stringify","updateCash","deleteCash"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/CashApi.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Function to get the token from local storage\r\nconst getToken = () => {\r\n  return localStorage.getItem(\"access_token\");\r\n};\r\n\r\n// Function to get user data from local storage\r\nconst getUserData = () => {\r\n  const userData = localStorage.getItem(\"user_data\");\r\n  return userData ? JSON.parse(userData) : null;\r\n};\r\n\r\n// Function to get cash data for a specific user\r\nexport const getCash = async () => {\r\n  const token = getToken();\r\n  const userData = getUserData();\r\n  const userId = userData ? userData.sub : null; // Use the `sub` field for userId\r\n\r\n  if (!userId) {\r\n    throw new Error(\"User ID is not available.\");\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      const errorDetails = await response.json();\r\n      console.error(\r\n        `Error fetching cash data: ${\r\n          errorDetails.detail || response.statusText\r\n        }`\r\n      );\r\n      throw new Error(errorDetails.detail || response.statusText);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Get Cash Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to create a new cash record\r\nexport const createCash = async (cashData) => {\r\n  const token = getToken();\r\n  const userData = getUserData();\r\n  const userId = userData ? userData.sub : null;\r\n\r\n  if (!userId) {\r\n    throw new Error(\"User ID is not available.\");\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/cash/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ ...cashData, userId }),\r\n    });\r\n    if (!response.ok) {\r\n      const errorDetails = await response.json();\r\n      console.error(\r\n        `Error creating cash record: ${\r\n          errorDetails.detail || response.statusText\r\n        }`\r\n      );\r\n      throw new Error(errorDetails.detail || response.statusText);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Create Cash Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to update an existing cash record\r\nexport const updateCash = async (cashData) => {\r\n  const token = getToken();\r\n  const userData = getUserData();\r\n  const userId = userData ? userData.sub : null; // Use the `sub` field for userId\r\n\r\n  if (!userId) {\r\n    throw new Error(\"User ID is not available.\");\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(cashData),\r\n    });\r\n    if (!response.ok) {\r\n      const errorDetails = await response.json();\r\n      console.error(\r\n        `Error updating cash record: ${\r\n          errorDetails.detail || response.statusText\r\n        }`\r\n      );\r\n      throw new Error(errorDetails.detail || response.statusText);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update Cash Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to delete a cash record\r\nexport const deleteCash = async () => {\r\n  const token = getToken();\r\n  const userData = getUserData();\r\n  const userId = userData ? userData.sub : null; // Use the `sub` field for userId\r\n\r\n  if (!userId) {\r\n    throw new Error(\"User ID is not available.\");\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      const errorDetails = await response.json();\r\n      console.error(\r\n        `Error deleting cash record: ${\r\n          errorDetails.detail || response.statusText\r\n        }`\r\n      );\r\n      throw new Error(errorDetails.detail || response.statusText);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete Cash Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
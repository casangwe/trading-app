{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./styles/summary.css\";\n\n// const Summary = ({ recentTrades }) => {\n//   // State to manage form submission\n//   const [submitted, setSubmitted] = useState(false);\n//   // State to manage initial cash input\n//   const [initialCash, setInitialCash] = useState(\"\");\n//   // State to manage current cash\n//   const [currentCash, setCurrentCash] = useState(0);\n\n//   // Load initial cash from local storage on component mount\n//   useEffect(() => {\n//     const storedInitialCash = localStorage.getItem(\"initialCash\");\n//     if (storedInitialCash) {\n//       setInitialCash(parseFloat(storedInitialCash));\n//     }\n//   }, []);\n\n//   // Calculate net profit/loss\n//   const netProfitLoss = recentTrades.reduce(\n//     (total, trade) => total + parseFloat(trade.profit_loss || 0),\n//     0\n//   );\n\n//   // Update current cash whenever initialCash or netProfitLoss changes\n//   useEffect(() => {\n//     if (initialCash !== \"\") {\n//       setCurrentCash(parseFloat(initialCash) + netProfitLoss);\n//     }\n//   }, [initialCash, netProfitLoss]);\n\n//   // Check if recentTrades is empty or not provided\n//   if (!recentTrades || recentTrades.length === 0) {\n//     return <div style={{ fontSize: \"12px\" }}>Fetching Trade Summary...</div>;\n//   }\n\n//   // Calculate other metrics (winRate, avgWin, avgLoss, roi, winLossRatio)\n//   const totalWin = recentTrades.reduce(\n//     (total, trade) => total + (parseFloat(trade.profit_loss) > 0 ? 1 : 0),\n//     0\n//   );\n//   const totalLoss = recentTrades.reduce(\n//     (total, trade) => total + (parseFloat(trade.profit_loss) < 0 ? 1 : 0),\n//     0\n//   );\n//   const winRate =\n//     recentTrades.length > 0 ? (totalWin / recentTrades.length) * 100 : 0;\n//   const winTrades = recentTrades.filter(\n//     (trade) => parseFloat(trade.profit_loss) > 0\n//   );\n//   const lossTrades = recentTrades.filter(\n//     (trade) => parseFloat(trade.profit_loss) < 0\n//   );\n//   const avgWin =\n//     winTrades.length > 0\n//       ? winTrades.reduce(\n//           (total, trade) => total + parseFloat(trade.profit_loss || 0),\n//           0\n//         ) / winTrades.length\n//       : 0;\n//   const avgLoss =\n//     lossTrades.length > 0\n//       ? lossTrades.reduce(\n//           (total, trade) => total + parseFloat(trade.profit_loss || 0),\n//           0\n//         ) / lossTrades.length\n//       : 0;\n//   const totalInvestment = recentTrades.reduce(\n//     (total, trade) =>\n//       total +\n//       parseFloat(trade.entry_price || 0) * parseFloat(trade.contracts || 0),\n//     0\n//   );\n//   const roi =\n//     totalInvestment !== 0 ? (netProfitLoss / totalInvestment) * 100 : 0;\n//   const winLossRatio = avgLoss !== 0 ? Math.abs(avgWin / avgLoss) : 0;\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setSubmitted(true);\n//     setCurrentCash(parseFloat(initialCash) + netProfitLoss);\n//   };\n\n//   const handleEdit = () => {\n//     setSubmitted(false);\n//   };\n\n//   return (\n//     <div className=\"summary-container\">\n//       <div className=\"summary\">\n//         <div className=\"header-card\">\n//           <p>Summary</p>\n//         </div>\n//         <div className=\"details-cards\">\n//           <div className=\"summary-item\">\n//             <form\n//               className={`initial ${submitted ? \"submitted\" : \"\"}`}\n//               onSubmit={handleSubmit}\n//             >\n//               <input\n//                 id=\"initial-cash\"\n//                 type=\"number\"\n//                 placeholder=\"Initial Cash\"\n//                 value={initialCash}\n//                 onChange={(e) => setInitialCash(e.target.value)}\n//                 required\n//                 // disabled={submitted}\n//               />\n//               <button\n//                 // type=\"button\"\n//                 onClick={handleEdit}\n//                 className={submitted ? \"submitted\" : \"\"}\n//               >\n//                 {submitted ? \"Update\" : \"Update\"}\n//               </button>\n//             </form>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Cash:</p>\n//             <p className=\"detail\">${currentCash.toFixed(2)}</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Net P&L:</p>\n//             <p className=\"detail\">${netProfitLoss.toFixed(2) * 100}</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">RoI:</p>\n//             <p className=\"detail\">{roi.toFixed(2)}%</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Profits:</p>\n//             <p className=\"detail\">${avgWin.toFixed(2) * 100}</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Loss:</p>\n//             <p className=\"detail\">${avgLoss.toFixed(2) * 100}</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Total Win:</p>\n//             <p className=\"detail\">{totalWin}</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Total Loss:</p>\n//             <p className=\"detail\">{totalLoss}</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">Win Rate:</p>\n//             <p className=\"detail\">{winRate.toFixed(2)}%</p>\n//           </div>\n//           <div className=\"summary-item\">\n//             <p className=\"title\">W/L Ratio:</p>\n//             <p className=\"detail\">{winLossRatio.toFixed(2)}</p>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Summary;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Summary.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/summary.css\";\r\n\r\n// const Summary = ({ recentTrades }) => {\r\n//   // State to manage form submission\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   // State to manage initial cash input\r\n//   const [initialCash, setInitialCash] = useState(\"\");\r\n//   // State to manage current cash\r\n//   const [currentCash, setCurrentCash] = useState(0);\r\n\r\n//   // Load initial cash from local storage on component mount\r\n//   useEffect(() => {\r\n//     const storedInitialCash = localStorage.getItem(\"initialCash\");\r\n//     if (storedInitialCash) {\r\n//       setInitialCash(parseFloat(storedInitialCash));\r\n//     }\r\n//   }, []);\r\n\r\n//   // Calculate net profit/loss\r\n//   const netProfitLoss = recentTrades.reduce(\r\n//     (total, trade) => total + parseFloat(trade.profit_loss || 0),\r\n//     0\r\n//   );\r\n\r\n//   // Update current cash whenever initialCash or netProfitLoss changes\r\n//   useEffect(() => {\r\n//     if (initialCash !== \"\") {\r\n//       setCurrentCash(parseFloat(initialCash) + netProfitLoss);\r\n//     }\r\n//   }, [initialCash, netProfitLoss]);\r\n\r\n//   // Check if recentTrades is empty or not provided\r\n//   if (!recentTrades || recentTrades.length === 0) {\r\n//     return <div style={{ fontSize: \"12px\" }}>Fetching Trade Summary...</div>;\r\n//   }\r\n\r\n//   // Calculate other metrics (winRate, avgWin, avgLoss, roi, winLossRatio)\r\n//   const totalWin = recentTrades.reduce(\r\n//     (total, trade) => total + (parseFloat(trade.profit_loss) > 0 ? 1 : 0),\r\n//     0\r\n//   );\r\n//   const totalLoss = recentTrades.reduce(\r\n//     (total, trade) => total + (parseFloat(trade.profit_loss) < 0 ? 1 : 0),\r\n//     0\r\n//   );\r\n//   const winRate =\r\n//     recentTrades.length > 0 ? (totalWin / recentTrades.length) * 100 : 0;\r\n//   const winTrades = recentTrades.filter(\r\n//     (trade) => parseFloat(trade.profit_loss) > 0\r\n//   );\r\n//   const lossTrades = recentTrades.filter(\r\n//     (trade) => parseFloat(trade.profit_loss) < 0\r\n//   );\r\n//   const avgWin =\r\n//     winTrades.length > 0\r\n//       ? winTrades.reduce(\r\n//           (total, trade) => total + parseFloat(trade.profit_loss || 0),\r\n//           0\r\n//         ) / winTrades.length\r\n//       : 0;\r\n//   const avgLoss =\r\n//     lossTrades.length > 0\r\n//       ? lossTrades.reduce(\r\n//           (total, trade) => total + parseFloat(trade.profit_loss || 0),\r\n//           0\r\n//         ) / lossTrades.length\r\n//       : 0;\r\n//   const totalInvestment = recentTrades.reduce(\r\n//     (total, trade) =>\r\n//       total +\r\n//       parseFloat(trade.entry_price || 0) * parseFloat(trade.contracts || 0),\r\n//     0\r\n//   );\r\n//   const roi =\r\n//     totalInvestment !== 0 ? (netProfitLoss / totalInvestment) * 100 : 0;\r\n//   const winLossRatio = avgLoss !== 0 ? Math.abs(avgWin / avgLoss) : 0;\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     setSubmitted(true);\r\n//     setCurrentCash(parseFloat(initialCash) + netProfitLoss);\r\n//   };\r\n\r\n//   const handleEdit = () => {\r\n//     setSubmitted(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"summary-container\">\r\n//       <div className=\"summary\">\r\n//         <div className=\"header-card\">\r\n//           <p>Summary</p>\r\n//         </div>\r\n//         <div className=\"details-cards\">\r\n//           <div className=\"summary-item\">\r\n//             <form\r\n//               className={`initial ${submitted ? \"submitted\" : \"\"}`}\r\n//               onSubmit={handleSubmit}\r\n//             >\r\n//               <input\r\n//                 id=\"initial-cash\"\r\n//                 type=\"number\"\r\n//                 placeholder=\"Initial Cash\"\r\n//                 value={initialCash}\r\n//                 onChange={(e) => setInitialCash(e.target.value)}\r\n//                 required\r\n//                 // disabled={submitted}\r\n//               />\r\n//               <button\r\n//                 // type=\"button\"\r\n//                 onClick={handleEdit}\r\n//                 className={submitted ? \"submitted\" : \"\"}\r\n//               >\r\n//                 {submitted ? \"Update\" : \"Update\"}\r\n//               </button>\r\n//             </form>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Cash:</p>\r\n//             <p className=\"detail\">${currentCash.toFixed(2)}</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Net P&L:</p>\r\n//             <p className=\"detail\">${netProfitLoss.toFixed(2) * 100}</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">RoI:</p>\r\n//             <p className=\"detail\">{roi.toFixed(2)}%</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Profits:</p>\r\n//             <p className=\"detail\">${avgWin.toFixed(2) * 100}</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Loss:</p>\r\n//             <p className=\"detail\">${avgLoss.toFixed(2) * 100}</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Total Win:</p>\r\n//             <p className=\"detail\">{totalWin}</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Total Loss:</p>\r\n//             <p className=\"detail\">{totalLoss}</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">Win Rate:</p>\r\n//             <p className=\"detail\">{winRate.toFixed(2)}%</p>\r\n//           </div>\r\n//           <div className=\"summary-item\">\r\n//             <p className=\"title\">W/L Ratio:</p>\r\n//             <p className=\"detail\">{winLossRatio.toFixed(2)}</p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Summary;\r\n"],"mappings},"metadata":{},"sourceType":"module"}
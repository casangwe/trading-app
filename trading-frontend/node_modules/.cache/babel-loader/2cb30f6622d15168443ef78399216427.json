{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange,\n  periodPL,\n  timePeriod\n}) => {\n  const chartRef = useRef(null); // Reference to the canvas element\n\n  useEffect(() => {\n    const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\n      const profitsData = {\n        labels: getLabels(selectedTimePeriod),\n        profits: getData(trades, selectedTimePeriod)\n      };\n      return profitsData;\n    };\n    const getLabels = period => {\n      // Implement logic to return labels based on the selected time period\n      // For example,\n      return [\"Day 1\", \"Day 2\", \"Day 3\"];\n    };\n    const getData = (trades, period) => {\n      // Implement logic to return data based on the selected time period and trades\n      // For demonstration, let's assume data is an array with sample data\n      return [100, -50, 75];\n    };\n\n    // Load Chart.js from the CDN dynamically\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n    script.async = true;\n    script.onload = () => {\n      // Initialize Chart.js instance after the script has loaded\n      const ctx = chartRef.current.getContext(\"2d\");\n\n      // Calculate profits for the selected time period\n      const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\n\n      // Data for the chart based on profitsData\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: profitsData.labels,\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitsData.profits,\n            backgroundColor: \"lightgreen\"\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: true\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false // Hide grid lines\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        myChart.destroy(); // Clean up chart on unmount\n      };\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script); // Clean up script tag on unmount\n    };\n  }, [trades, timePeriod]);\n\n  // Function to handle time period change\n  const handleTimePeriodClick = period => {\n    onTimePeriodChange(period); // Call the onTimePeriodChange function from props\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"Max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","AccountGraph","trades","onTimePeriodChange","periodPL","timePeriod","chartRef","calculateProfitsForTimePeriod","selectedTimePeriod","profitsData","labels","getLabels","profits","getData","period","script","document","createElement","src","async","onload","ctx","current","getContext","myChart","window","Chart","type","data","datasets","label","backgroundColor","options","plugins","legend","display","scales","x","grid","y","title","text","destroy","body","appendChild","removeChild","handleTimePeriodClick","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange, periodPL, timePeriod }) => {\r\n  const chartRef = useRef(null); // Reference to the canvas element\r\n\r\n  useEffect(() => {\r\n    const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\r\n      const profitsData = {\r\n        labels: getLabels(selectedTimePeriod),\r\n        profits: getData(trades, selectedTimePeriod),\r\n      };\r\n      return profitsData;\r\n    };\r\n\r\n    const getLabels = (period) => {\r\n      // Implement logic to return labels based on the selected time period\r\n      // For example,\r\n      return [\"Day 1\", \"Day 2\", \"Day 3\"];\r\n    };\r\n\r\n    const getData = (trades, period) => {\r\n      // Implement logic to return data based on the selected time period and trades\r\n      // For demonstration, let's assume data is an array with sample data\r\n      return [100, -50, 75];\r\n    };\r\n\r\n    // Load Chart.js from the CDN dynamically\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      // Initialize Chart.js instance after the script has loaded\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      // Calculate profits for the selected time period\r\n      const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\r\n\r\n      // Data for the chart based on profitsData\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: profitsData.labels,\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitsData.profits,\r\n              backgroundColor: \"lightgreen\",\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false, // Hide grid lines\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy(); // Clean up chart on unmount\r\n      };\r\n    };\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script); // Clean up script tag on unmount\r\n    };\r\n  }, [trades, timePeriod]);\r\n\r\n  // Function to handle time period change\r\n  const handleTimePeriodClick = (period) => {\r\n    onTimePeriodChange(period); // Call the onTimePeriodChange function from props\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"Max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
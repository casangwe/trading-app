{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\BiggestWinsLosses.js\";\nimport React, { useState } from \"react\";\nimport \"./styles/biggestWinsLosses.css\";\nconst BiggestWinsLosses = ({\n  recentTrades\n}) => {\n  const [showPositive, setShowPositive] = useState(true);\n  const toggleProfitDisplay = () => {\n    setShowPositive(!showPositive);\n  };\n\n  // Filter trades and sort them based on profit\n  const sortedTrades = recentTrades.filter(trade => {\n    return typeof trade.profit_loss === \"number\" &&\n    // Check if profit_loss is a number\n    !isNaN(trade.profit_loss) &&\n    // Check if profit_loss is not NaN\n    trade.contracts !== undefined &&\n    // Check if contracts is defined\n    !isNaN(trade.contracts) && (\n    // Check if contracts is a number\n    showPositive && trade.profit_loss >= 0 ||\n    // Filter positive trades\n    !showPositive && trade.profit_loss < 0) // Filter negative trades\n    ;\n  }).sort((a, b) => {\n    // Sort trades based on profit_loss in descending order\n    if (showPositive) {\n      return b.profit_loss * b.contracts - a.profit_loss * a.contracts;\n    } else {\n      return a.profit_loss * a.contracts - b.profit_loss * b.contracts;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-lost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"P/L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"menu\",\n    onClick: toggleProfitDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"::\"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, sortedTrades.map((trade, index) => {\n    const isPositive = trade.profit_loss >= 0;\n    const cardItemClasses = `card-item ${isPositive ? \"positive\" : \"negative\"}`;\n\n    // Calculate profit/loss based on number of contracts\n    const profitLoss = trade.profit_loss * trade.contracts * 100;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: cardItemClasses,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, trade.option_symbol), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }, \"$\", profitLoss.toFixed(2))));\n  }))));\n};\nexport default BiggestWinsLosses;","map":{"version":3,"names":["React","useState","BiggestWinsLosses","recentTrades","showPositive","setShowPositive","toggleProfitDisplay","sortedTrades","filter","trade","profit_loss","isNaN","contracts","undefined","sort","a","b","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","isPositive","cardItemClasses","profitLoss","key","option_symbol","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ recentTrades }) => {\r\n  const [showPositive, setShowPositive] = useState(true);\r\n\r\n  const toggleProfitDisplay = () => {\r\n    setShowPositive(!showPositive);\r\n  };\r\n\r\n  // Filter trades and sort them based on profit\r\n  const sortedTrades = recentTrades\r\n    .filter((trade) => {\r\n      return (\r\n        typeof trade.profit_loss === \"number\" && // Check if profit_loss is a number\r\n        !isNaN(trade.profit_loss) && // Check if profit_loss is not NaN\r\n        trade.contracts !== undefined && // Check if contracts is defined\r\n        !isNaN(trade.contracts) && // Check if contracts is a number\r\n        ((showPositive && trade.profit_loss >= 0) || // Filter positive trades\r\n          (!showPositive && trade.profit_loss < 0)) // Filter negative trades\r\n      );\r\n    })\r\n    .sort((a, b) => {\r\n      // Sort trades based on profit_loss in descending order\r\n      if (showPositive) {\r\n        return b.profit_loss * b.contracts - a.profit_loss * a.contracts;\r\n      } else {\r\n        return a.profit_loss * a.contracts - b.profit_loss * b.contracts;\r\n      }\r\n    });\r\n\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"card\">\r\n        <p>P/L</p>\r\n        <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n          ::\r\n        </p>{\" \"}\r\n        {/* Toggle display on click */}\r\n      </div>\r\n      <div className=\"card-list\">\r\n        <ul className=\"cards\">\r\n          {sortedTrades.map((trade, index) => {\r\n            const isPositive = trade.profit_loss >= 0;\r\n            const cardItemClasses = `card-item ${\r\n              isPositive ? \"positive\" : \"negative\"\r\n            }`;\r\n\r\n            // Calculate profit/loss based on number of contracts\r\n            const profitLoss = trade.profit_loss * trade.contracts * 100;\r\n\r\n            return (\r\n              <li className={cardItemClasses} key={index}>\r\n                <div className=\"card-content\">\r\n                  <p>{trade.option_symbol}</p>\r\n                  <p>${profitLoss.toFixed(2)}</p>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
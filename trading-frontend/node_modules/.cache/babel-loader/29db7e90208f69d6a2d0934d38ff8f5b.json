{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n//   useEffect(() => {\n//     // Fetch top profitable trades from API\n//     const fetchTopProfitableTrades = () => {\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\n//         .then((response) => response.json())\n//         .then((data) => setTopProfitableTrades(data))\n//         .catch((error) =>\n//           console.error(\"Error fetching top profitable trades:\", error)\n//         );\n//     };\n\n//     fetchTopProfitableTrades();\n//   }, []); // Fetch data only once on component mount\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = (period) => {\n//     // Implement logic to return labels based on the selected time period\n//     // For example,\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = (period) => {\n//     // Implement logic to return data based on the selected time period\n//     // For example, if period is \"weeks\", return data for weeks\n//   };\n\n//   // Function to handle time period change\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n// return (\n//   <div className=\"account-graph\">\n//     <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//     <div className=\"time-period-selector\">\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"days\")}\n//       >\n//         1D\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"weeks\")}\n//       >\n//         1W\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"months\")}\n//       >\n//         1M\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"3-months\")}\n//       >\n//         3M\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"YTD\")}\n//       >\n//         YTD\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"1-year\")}\n//       >\n//         1Y\n//       </button>\n//       <button\n//         className=\"time-period-button\"\n//         onClick={() => handleTimePeriodChange(\"max\")}\n//       >\n//         MAX\n//       </button>\n//     </div>\n//   </div>\n// );\n// };\n\n// export default AccountGraph;\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n//   useEffect(() => {\n//     // Fetch top profitable trades from API\n//     const fetchTopProfitableTrades = () => {\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\n//         .then((response) => response.json())\n//         .then((data) => setTopProfitableTrades(data))\n//         .catch((error) =>\n//           console.error(\"Error fetching top profitable trades:\", error)\n//         );\n//     };\n\n//     fetchTopProfitableTrades();\n//   }, []); // Fetch data only once on component mount\n\n//   useEffect(() => {\n//     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               label: \"Profit\",\n//               data: getData(), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: true,\n//               position: \"top\",\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false,\n//               },\n//             },\n//             y: {\n//               grid: {\n//                 display: true,\n//               },\n//               title: {\n//                 display: true,\n//                 text: \"Profit\",\n//               },\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = () => {\n//     return topProfitableTrades.map((trade) => trade.date); // Assuming trade object has 'date' property\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = () => {\n//     return topProfitableTrades.map((trade) => trade.profit); // Assuming trade object has 'profit' property\n//   };\n\n//   // Function to handle time period change (not used in this simplified version)\n//   const handleTimePeriodChange = (period) => {\n//     // Here you can implement logic to handle time period change if needed\n//     setTimePeriod(period);\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"days\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"months\")}\n//         >\n//           1M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\n//         >\n//           3M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\n//         >\n//           YTD\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\n//         >\n//           1Y\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"max\")}\n//         >\n//           MAX\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;\n\nuseEffect(() => {\n  if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n  // Extracting profits and trade dates from the fetched data\n  const profits = topProfitableTrades.map(trade => parseFloat(trade.profit));\n  const tradeDates = topProfitableTrades.map(trade => new Date(trade.trade_date));\n\n  // Load Chart.js from the CDN dynamically\n  const script = document.createElement(\"script\");\n  script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n  script.async = true;\n  script.onload = () => {\n    // Initialize Chart.js instance after the script has loaded\n    const ctx = chartRef.current.getContext(\"2d\");\n    const myChart = new window.Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: tradeDates,\n        // Use trade dates as labels\n        datasets: [{\n          label: \"Profit\",\n          data: profits,\n          // Use profits as data points\n          borderColor: \"green\",\n          // Green color for line\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          // Transparent background color\n          borderWidth: 2 // Width of the line\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            position: \"top\"\n          }\n        },\n        scales: {\n          x: {\n            type: \"time\",\n            // Use time scale for x-axis\n            time: {\n              unit: \"day\" // Display unit as day\n            },\n            title: {\n              display: true,\n              text: \"Trade Date\"\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: \"Profit\"\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      myChart.destroy(); // Clean up chart on unmount\n    };\n  };\n  document.body.appendChild(script);\n  return () => {\n    document.body.removeChild(script); // Clean up script tag on unmount\n  };\n}, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes","map":{"version":3,"names":["useEffect","topProfitableTrades","length","profits","map","trade","parseFloat","profit","tradeDates","Date","trade_date","script","document","createElement","src","async","onload","ctx","chartRef","current","getContext","myChart","window","Chart","type","data","labels","datasets","label","borderColor","backgroundColor","borderWidth","options","plugins","legend","display","position","scales","x","time","unit","title","text","y","destroy","body","appendChild","removeChild"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top profitable trades from API\r\n//     const fetchTopProfitableTrades = () => {\r\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTopProfitableTrades(data))\r\n//         .catch((error) =>\r\n//           console.error(\"Error fetching top profitable trades:\", error)\r\n//         );\r\n//     };\r\n\r\n//     fetchTopProfitableTrades();\r\n//   }, []); // Fetch data only once on component mount\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = (period) => {\r\n//     // Implement logic to return labels based on the selected time period\r\n//     // For example,\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = (period) => {\r\n//     // Implement logic to return data based on the selected time period\r\n//     // For example, if period is \"weeks\", return data for weeks\r\n//   };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n// return (\r\n//   <div className=\"account-graph\">\r\n//     <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//     <div className=\"time-period-selector\">\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"days\")}\r\n//       >\r\n//         1D\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//       >\r\n//         1W\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"months\")}\r\n//       >\r\n//         1M\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//       >\r\n//         3M\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//       >\r\n//         YTD\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//       >\r\n//         1Y\r\n//       </button>\r\n//       <button\r\n//         className=\"time-period-button\"\r\n//         onClick={() => handleTimePeriodChange(\"max\")}\r\n//       >\r\n//         MAX\r\n//       </button>\r\n//     </div>\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// export default AccountGraph;\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top profitable trades from API\r\n//     const fetchTopProfitableTrades = () => {\r\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTopProfitableTrades(data))\r\n//         .catch((error) =>\r\n//           console.error(\"Error fetching top profitable trades:\", error)\r\n//         );\r\n//     };\r\n\r\n//     fetchTopProfitableTrades();\r\n//   }, []); // Fetch data only once on component mount\r\n\r\n//   useEffect(() => {\r\n//     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               label: \"Profit\",\r\n//               data: getData(), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: true,\r\n//               position: \"top\",\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false,\r\n//               },\r\n//             },\r\n//             y: {\r\n//               grid: {\r\n//                 display: true,\r\n//               },\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Profit\",\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = () => {\r\n//     return topProfitableTrades.map((trade) => trade.date); // Assuming trade object has 'date' property\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = () => {\r\n//     return topProfitableTrades.map((trade) => trade.profit); // Assuming trade object has 'profit' property\r\n//   };\r\n\r\n//   // Function to handle time period change (not used in this simplified version)\r\n//   const handleTimePeriodChange = (period) => {\r\n//     // Here you can implement logic to handle time period change if needed\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"days\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"months\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//         >\r\n//           3M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//         >\r\n//           YTD\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//         >\r\n//           1Y\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"max\")}\r\n//         >\r\n//           MAX\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n\r\nuseEffect(() => {\r\n  if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n  // Extracting profits and trade dates from the fetched data\r\n  const profits = topProfitableTrades.map((trade) => parseFloat(trade.profit));\r\n  const tradeDates = topProfitableTrades.map(\r\n    (trade) => new Date(trade.trade_date)\r\n  );\r\n\r\n  // Load Chart.js from the CDN dynamically\r\n  const script = document.createElement(\"script\");\r\n  script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n  script.async = true;\r\n  script.onload = () => {\r\n    // Initialize Chart.js instance after the script has loaded\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    const myChart = new window.Chart(ctx, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: tradeDates, // Use trade dates as labels\r\n        datasets: [\r\n          {\r\n            label: \"Profit\",\r\n            data: profits, // Use profits as data points\r\n            borderColor: \"green\", // Green color for line\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n            borderWidth: 2, // Width of the line\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: \"time\", // Use time scale for x-axis\r\n            time: {\r\n              unit: \"day\", // Display unit as day\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: \"Trade Date\",\r\n            },\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: \"Profit\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      myChart.destroy(); // Clean up chart on unmount\r\n    };\r\n  };\r\n\r\n  document.body.appendChild(script);\r\n\r\n  return () => {\r\n    document.body.removeChild(script); // Clean up script tag on unmount\r\n  };\r\n}, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\r\n"],"mappingsd,IAAIC,mBAAmB,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;;EAE9C;EACA,MAAMC,OAAO,GAAGF,mBAAmB,CAACG,GAAG,CAAEC,KAAK,IAAKC,UAAU,CAACD,KAAK,CAACE,MAAM,CAAC,CAAC;EAC5E,MAAMC,UAAU,GAAGP,mBAAmB,CAACG,GAAG,CACvCC,KAAK,IAAK,IAAII,IAAI,CAACJ,KAAK,CAACK,UAAU,CACtC,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACG,GAAG,GAAG,uCAAuC;EACpDH,MAAM,CAACI,KAAK,GAAG,IAAI;EACnBJ,MAAM,CAACK,MAAM,GAAG,MAAM;IACpB;IACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC7C,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACN,GAAG,EAAE;MACpCO,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACJC,MAAM,EAAElB,UAAU;QAAE;QACpBmB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,QAAQ;UACfH,IAAI,EAAEtB,OAAO;UAAE;UACf0B,WAAW,EAAE,OAAO;UAAE;UACtBC,eAAe,EAAE,kBAAkB;UAAE;UACrCC,WAAW,EAAE,CAAC,CAAE;QAClB,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE,IAAI;YACbC,QAAQ,EAAE;UACZ;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDd,IAAI,EAAE,MAAM;YAAE;YACde,IAAI,EAAE;cACJC,IAAI,EAAE,KAAK,CAAE;YACf,CAAC;YACDC,KAAK,EAAE;cACLN,OAAO,EAAE,IAAI;cACbO,IAAI,EAAE;YACR;UACF,CAAC;UACDC,CAAC,EAAE;YACDF,KAAK,EAAE;cACLN,OAAO,EAAE,IAAI;cACbO,IAAI,EAAE;YACR;UACF;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXrB,OAAO,CAACuB,OAAO,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;EACH,CAAC;EAEDhC,QAAQ,CAACiC,IAAI,CAACC,WAAW,CAACnC,MAAM,CAAC;EAEjC,OAAO,MAAM;IACXC,QAAQ,CAACiC,IAAI,CAACE,WAAW,CAACpC,MAAM,CAAC,CAAC,CAAC;EACrC,CAAC;AACH,CAAC,EAAE,CAACV,mBAAmB,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module"}
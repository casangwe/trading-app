{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\analysis\\\\AnalysisDisplay.js\";\n// import React, { useState, useEffect } from \"react\";\n// import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\n// import { performAnalysis } from \"./AnalysisGet\";\n// import { Line } from \"rc-progress\";\n\n// const AnalysisDisplay = () => {\n//   const [analysisResults, setAnalysisResults] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await performAnalysis();\n//         setAnalysisResults(results);\n//       } catch (err) {\n//         setError(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   if (error) {\n//     console.error(\"Error fetching analysis data:\", error);\n//   }\n\n//   if (!analysisResults && !error) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const {\n//     absoluteReturn = 0,\n//     sharpeRatio = 0,\n//     winRate = 0,\n//     numberOfTrades = 0,\n//     winningTrades = 0,\n//     losingTrades = 0,\n//     averageWin = 0,\n//     averageLoss = 0,\n//     riskRewardRatio = 0,\n//   } = analysisResults || {};\n//   const total = averageWin + averageLoss;\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\n//   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\n\n//   const data = [\n//     {\n//       name: \"Average Win\",\n//       value: winPercent,\n//       color: \"#4a90e2\",\n//       amount: averageWin,\n//     },\n//     {\n//       name: \"Average Loss\",\n//       value: 100 - winPercent,\n//       color: \"#f44336\",\n//       amount: averageLoss,\n//     },\n//   ];\n\n//   const winRateData = [\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\n//   ];\n//   const formatValue = (value, isCurrency = false) => {\n//     if (isNaN(value) || value === undefined) {\n//       return isCurrency ? \"$0.00\" : \"N/A\";\n//     }\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\n//   };\n//   return (\n//     <div className=\"analysis-container\">\n//       <div className=\"analysis-row\">\n//         <div className=\"analysis-circle\">\n//           <h3>Trades</h3>\n//           <p>{numberOfTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Wins</h3>\n//           <p>{winningTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Losses</h3>\n//           <p>{losingTrades}</p>\n//         </div>\n//       </div>\n\n//       <div className=\"analysis-metric\">\n//         <h3>Absolute Return</h3>\n//         <p>{`${absoluteReturn.toFixed(2)}%`}</p>\n//         <Line\n//           percent={absoluteReturnPercentage}\n//           strokeWidth=\"2\"\n//           trailWidth=\"2\"\n//           strokeColor={\"#4a90e2\"}\n//           trailColor=\"#d8e3ef\"\n//         />\n//       </div>\n\n//       <div className=\"analysis-metric\">\n//         <h3>Sharpe Ratio</h3>\n//         <p>{formatValue(sharpeRatio)}</p>\n//         <Line\n//           percent={sharpeRatioPercentage}\n//           strokeWidth=\"2\"\n//           trailWidth=\"2\"\n//           strokeColor={\"#4a90e2\"}\n//           trailColor=\"#d8e3ef\"\n//         />\n//       </div>\n\n//       {/* Win Rate */}\n//       <div style={{ marginTop: \"20px\" }}>\n//         <ResponsiveContainer width=\"100%\" height={150}>\n//           <PieChart>\n//             <Pie\n//               data={winRateData}\n//               innerRadius={50}\n//               outerRadius={70}\n//               startAngle={90}\n//               endAngle={-270}\n//               stroke=\"none\"\n//               dataKey=\"value\"\n//             >\n//               {winRateData.map((entry, index) => (\n//                 <Cell\n//                   key={`winrate-cell-${index}`}\n//                   fill={entry.color}\n//                   style={{\n//                     transition: \"filter 0.3s\",\n//                     cursor: entry.name === \"Win Rate\" ? \"pointer\" : \"default\",\n//                   }}\n//                   onMouseEnter={(e) => {\n//                     if (entry.name === \"Win Rate\") {\n//                       e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n//                     }\n//                   }}\n//                   onMouseLeave={(e) => {\n//                     e.currentTarget.style.filter = \"none\";\n//                   }}\n//                 />\n//               ))}\n//             </Pie>\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (\n//                   payload &&\n//                   payload.length &&\n//                   payload[0].payload.name === \"Win Rate\"\n//                 ) {\n//                   const { name, value } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{name}</p>\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//           </PieChart>\n//         </ResponsiveContainer>\n\n//         {/* Average Win and Loss */}\n//         <ResponsiveContainer width=\"100%\" height={250}>\n//           <PieChart>\n//             <Pie\n//               data={data}\n//               innerRadius={50}\n//               outerRadius={70}\n//               dataKey=\"value\"\n//               startAngle={90}\n//               endAngle={-270}\n//               stroke=\"none\"\n//             >\n//               {data.map((entry, index) => (\n//                 <Cell\n//                   key={`cell-${index}`}\n//                   fill={entry.color}\n//                   style={{\n//                     transition: \"filter 0.3s\",\n//                     cursor: \"pointer\",\n//                   }}\n//                   onMouseEnter={(e) => {\n//                     e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n//                   }}\n//                   onMouseLeave={(e) => {\n//                     e.currentTarget.style.filter = \"none\";\n//                   }}\n//                 />\n//               ))}\n//             </Pie>\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { name, amount } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{name}</p>\n//                       <p className=\"amount\">{formatCash(amount)}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//           </PieChart>\n//         </ResponsiveContainer>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AnalysisDisplay;\n\n// import React, { useState, useEffect } from \"react\";\n// import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\n// import { performAnalysis } from \"./AnalysisGet\";\n\n// const AnalysisDisplay = () => {\n//   const [analysisResults, setAnalysisResults] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await performAnalysis();\n//         setAnalysisResults(results);\n//       } catch (err) {\n//         setError(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   if (error) {\n//     console.error(\"Error fetching analysis data:\", error);\n//   }\n\n//   if (!analysisResults && !error) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const {\n//     averageWin = 0,\n//     averageLoss = 0,\n//     winRate = 0,\n//   } = analysisResults || {};\n//   const total = averageWin + averageLoss;\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\n\n//   const data = [\n//     {\n//       name: \"Average Win\",\n//       value: winPercent,\n//       color: \"#4a90e2\",\n//       amount: averageWin,\n//     },\n//     {\n//       name: \"Average Loss\",\n//       value: 100 - winPercent,\n//       color: \"#f44336\",\n//       amount: averageLoss,\n//     },\n//   ];\n\n//   const winRateData = [\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\n//   ];\n\n//   return (\n//     <div\n//       className=\"analysis-display-container\"\n//       style={{ width: \"150px\", margin: \"0 auto\" }}\n//     >\n//       {/* Main Chart for Average Win and Loss */}\n//       <ResponsiveContainer width=\"100%\" height={250}>\n//         <PieChart>\n//           <Pie\n//             data={data}\n//             innerRadius={50}\n//             outerRadius={70}\n//             dataKey=\"value\"\n//             startAngle={90}\n//             endAngle={-270}\n//             stroke=\"none\"\n//           >\n//             {data.map((entry, index) => (\n//               <Cell\n//                 key={`cell-${index}`}\n//                 fill={entry.color}\n//                 style={{\n//                   transition: \"filter 0.3s\",\n//                   cursor: \"pointer\",\n//                 }}\n//                 onMouseEnter={(e) => {\n//                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n//                 }}\n//                 onMouseLeave={(e) => {\n//                   e.currentTarget.style.filter = \"none\";\n//                 }}\n//               />\n//             ))}\n//           </Pie>\n//           <Tooltip\n//             cursor={false}\n//             content={({ payload }) => {\n//               if (payload && payload.length) {\n//                 const { name, amount } = payload[0].payload;\n//                 return (\n//                   <div className=\"tooltip-content\">\n//                     <p>{name}</p>\n//                     <p className=\"amount\">{formatCash(amount)}</p>\n//                   </div>\n//                 );\n//               }\n//               return null;\n//             }}\n//           />\n//         </PieChart>\n//       </ResponsiveContainer>\n\n//       <div style={{ marginTop: \"20px\" }}>\n//         <ResponsiveContainer width=\"100%\" height={150}>\n//           <PieChart>\n//             <Pie\n//               data={winRateData}\n//               innerRadius={50}\n//               outerRadius={70}\n//               startAngle={90}\n//               endAngle={-270}\n//               stroke=\"none\"\n//               dataKey=\"value\"\n//             >\n//               {winRateData.map((entry, index) => (\n//                 <Cell key={`winrate-cell-${index}`} fill={entry.color} />\n//               ))}\n//             </Pie>\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { name, value } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{name}</p>\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n//           </PieChart>\n//         </ResponsiveContainer>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AnalysisDisplay;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\n// // import { performAnalysis } from \"./AnalysisGet\";\n\n// // const AnalysisDisplay = () => {\n// //   const [analysisResults, setAnalysisResults] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const results = await performAnalysis();\n// //         setAnalysisResults(results);\n// //       } catch (err) {\n// //         setError(err);\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, []);\n\n// //   if (error) {\n// //     console.error(\"Error fetching analysis data:\", error);\n// //   }\n\n// //   if (!analysisResults && !error) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   const { averageWin = 0, averageLoss = 0 } = analysisResults || {};\n// //   const total = averageWin + averageLoss;\n// //   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\n// //   const formatCash = (value) => `$${value.toFixed(2)}`;\n\n// //   const data = [\n// //     {\n// //       name: \"Average Win\",\n// //       value: winPercent,\n// //       color: \"#4a90e2\",\n// //       amount: averageWin,\n// //     },\n// //     {\n// //       name: \"Average Loss\",\n// //       value: 100 - winPercent,\n// //       color: \"#f44336\",\n// //       amount: averageLoss,\n// //     },\n// //   ];\n\n// //   return (\n// //     <div\n// //       className=\"analysis-display-container\"\n// //       style={{ width: \"150px\", margin: \"0 auto\" }}\n// //     >\n// //       <ResponsiveContainer width=\"100%\" height={250}>\n// //         <PieChart>\n// //           <Pie\n// //             data={data}\n// //             innerRadius={50}\n// //             outerRadius={70}\n// //             dataKey=\"value\"\n// //             startAngle={90}\n// //             endAngle={-270}\n// //             stroke=\"none\"\n// //           >\n// //             {data.map((entry, index) => (\n// //               <Cell\n// //                 key={`cell-${index}`}\n// //                 fill={entry.color}\n// //                 style={{\n// //                   transition: \"filter 0.3s\",\n// //                   filter: \"none\",\n// //                   cursor: \"pointer\",\n// //                   width: \"max-content\",\n// //                   padding: \"10px\",\n// //                   borderRadius: \"50%\",\n// //                 }}\n// //                 onMouseEnter={(e) => {\n// //                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\n// //                 }}\n// //                 onMouseLeave={(e) => {\n// //                   e.currentTarget.style.filter = \"none\";\n// //                 }}\n// //               />\n// //             ))}\n// //           </Pie>\n// //           <Tooltip\n// //             cursor={false}\n// //             content={({ payload }) => {\n// //               if (payload && payload.length) {\n// //                 const { name, amount } = payload[0].payload;\n// //                 return (\n// //                   <div className=\"tooltip-content\">\n// //                     <p>{name}</p>\n// //                     <p className=\"amount\">{formatCash(amount)}</p>\n// //                   </div>\n// //                 );\n// //               }\n// //               return null;\n// //             }}\n// //           />\n// //         </PieChart>\n// //       </ResponsiveContainer>\n// //     </div>\n// //   );\n// // };\n\n// // export default AnalysisDisplay;\n\nimport React, { useState, useEffect } from \"react\";\nimport { performAnalysis } from \"./AnalysisGet\";\nimport { Line } from \"rc-progress\";\nconst AnalysisDisplay = () => {\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const results = await performAnalysis();\n        setAnalysisResults(results);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    fetchData();\n  }, []);\n  const formatValue = (value, isCurrency = false) => {\n    if (isNaN(value) || value === undefined) {\n      return isCurrency ? \"$0.00\" : \"N/A\";\n    }\n    return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\n  };\n  if (error) {\n    console.error(\"Error fetching analysis data:\", error);\n  }\n  if (!analysisResults && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  const {\n    absoluteReturn = 0,\n    sharpeRatio = 0,\n    winRate = 0,\n    numberOfTrades = 0,\n    winningTrades = 0,\n    losingTrades = 0,\n    averageWin = 0,\n    averageLoss = 0,\n    riskRewardRatio = 0\n  } = analysisResults || {};\n  const absoluteReturnPercentage = absoluteReturn / 80 * 100;\n  const sharpeRatioPercentage = sharpeRatio / 3 * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metrics-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metric-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 11\n    }\n  }, \"Absolute Return\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 11\n    }\n  }, `${absoluteReturn.toFixed(2)}%`), /*#__PURE__*/React.createElement(Line, {\n    percent: absoluteReturnPercentage,\n    strokeWidth: \"2\",\n    trailWidth: \"2\",\n    strokeColor: \"#4a90e2\",\n    trailColor: \"#d8e3ef\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metric-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 11\n    }\n  }, \"Sharpe Ratio\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 11\n    }\n  }, formatValue(sharpeRatio)), /*#__PURE__*/React.createElement(Line, {\n    percent: sharpeRatioPercentage,\n    strokeWidth: \"2\",\n    trailWidth: \"2\",\n    strokeColor: \"#4a90e2\",\n    trailColor: \"#d8e3ef\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 11\n    }\n  }, \"Trades\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 11\n    }\n  }, numberOfTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 11\n    }\n  }, \"Wins\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 11\n    }\n  }, winningTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 11\n    }\n  }, \"Losses\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 11\n    }\n  }, losingTrades))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metrics-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 11\n    }\n  }, \"Win Rate\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 11\n    }\n  }, formatValue(winRate), \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 11\n    }\n  }, \"Avg. Win\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 11\n    }\n  }, formatValue(averageWin, true))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 11\n    }\n  }, \"Avg. Loss\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 11\n    }\n  }, formatValue(averageLoss, true))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 11\n    }\n  }, \"Risk Reward\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 11\n    }\n  }, formatValue(riskRewardRatio)))));\n};\nexport default AnalysisDisplay;","map":{"version":3,"names":["React","useState","useEffect","performAnalysis","Line","AnalysisDisplay","analysisResults","setAnalysisResults","error","setError","fetchData","results","err","formatValue","value","isCurrency","isNaN","undefined","toFixed","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","absoluteReturn","sharpeRatio","winRate","numberOfTrades","winningTrades","losingTrades","averageWin","averageLoss","riskRewardRatio","absoluteReturnPercentage","sharpeRatioPercentage","className","percent","strokeWidth","trailWidth","strokeColor","trailColor"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisDisplay.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// import { performAnalysis } from \"./AnalysisGet\";\r\n// import { Line } from \"rc-progress\";\r\n\r\n// const AnalysisDisplay = () => {\r\n//   const [analysisResults, setAnalysisResults] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const results = await performAnalysis();\r\n//         setAnalysisResults(results);\r\n//       } catch (err) {\r\n//         setError(err);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   if (error) {\r\n//     console.error(\"Error fetching analysis data:\", error);\r\n//   }\r\n\r\n//   if (!analysisResults && !error) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const {\r\n//     absoluteReturn = 0,\r\n//     sharpeRatio = 0,\r\n//     winRate = 0,\r\n//     numberOfTrades = 0,\r\n//     winningTrades = 0,\r\n//     losingTrades = 0,\r\n//     averageWin = 0,\r\n//     averageLoss = 0,\r\n//     riskRewardRatio = 0,\r\n//   } = analysisResults || {};\r\n//   const total = averageWin + averageLoss;\r\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\r\n//   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\r\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\r\n\r\n//   const data = [\r\n//     {\r\n//       name: \"Average Win\",\r\n//       value: winPercent,\r\n//       color: \"#4a90e2\",\r\n//       amount: averageWin,\r\n//     },\r\n//     {\r\n//       name: \"Average Loss\",\r\n//       value: 100 - winPercent,\r\n//       color: \"#f44336\",\r\n//       amount: averageLoss,\r\n//     },\r\n//   ];\r\n\r\n//   const winRateData = [\r\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\r\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\r\n//   ];\r\n//   const formatValue = (value, isCurrency = false) => {\r\n//     if (isNaN(value) || value === undefined) {\r\n//       return isCurrency ? \"$0.00\" : \"N/A\";\r\n//     }\r\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\r\n//   };\r\n//   return (\r\n//     <div className=\"analysis-container\">\r\n//       <div className=\"analysis-row\">\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Trades</h3>\r\n//           <p>{numberOfTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Wins</h3>\r\n//           <p>{winningTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Losses</h3>\r\n//           <p>{losingTrades}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"analysis-metric\">\r\n//         <h3>Absolute Return</h3>\r\n//         <p>{`${absoluteReturn.toFixed(2)}%`}</p>\r\n//         <Line\r\n//           percent={absoluteReturnPercentage}\r\n//           strokeWidth=\"2\"\r\n//           trailWidth=\"2\"\r\n//           strokeColor={\"#4a90e2\"}\r\n//           trailColor=\"#d8e3ef\"\r\n//         />\r\n//       </div>\r\n\r\n//       <div className=\"analysis-metric\">\r\n//         <h3>Sharpe Ratio</h3>\r\n//         <p>{formatValue(sharpeRatio)}</p>\r\n//         <Line\r\n//           percent={sharpeRatioPercentage}\r\n//           strokeWidth=\"2\"\r\n//           trailWidth=\"2\"\r\n//           strokeColor={\"#4a90e2\"}\r\n//           trailColor=\"#d8e3ef\"\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Win Rate */}\r\n//       <div style={{ marginTop: \"20px\" }}>\r\n//         <ResponsiveContainer width=\"100%\" height={150}>\r\n//           <PieChart>\r\n//             <Pie\r\n//               data={winRateData}\r\n//               innerRadius={50}\r\n//               outerRadius={70}\r\n//               startAngle={90}\r\n//               endAngle={-270}\r\n//               stroke=\"none\"\r\n//               dataKey=\"value\"\r\n//             >\r\n//               {winRateData.map((entry, index) => (\r\n//                 <Cell\r\n//                   key={`winrate-cell-${index}`}\r\n//                   fill={entry.color}\r\n//                   style={{\r\n//                     transition: \"filter 0.3s\",\r\n//                     cursor: entry.name === \"Win Rate\" ? \"pointer\" : \"default\",\r\n//                   }}\r\n//                   onMouseEnter={(e) => {\r\n//                     if (entry.name === \"Win Rate\") {\r\n//                       e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n//                     }\r\n//                   }}\r\n//                   onMouseLeave={(e) => {\r\n//                     e.currentTarget.style.filter = \"none\";\r\n//                   }}\r\n//                 />\r\n//               ))}\r\n//             </Pie>\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (\r\n//                   payload &&\r\n//                   payload.length &&\r\n//                   payload[0].payload.name === \"Win Rate\"\r\n//                 ) {\r\n//                   const { name, value } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{name}</p>\r\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//           </PieChart>\r\n//         </ResponsiveContainer>\r\n\r\n//         {/* Average Win and Loss */}\r\n//         <ResponsiveContainer width=\"100%\" height={250}>\r\n//           <PieChart>\r\n//             <Pie\r\n//               data={data}\r\n//               innerRadius={50}\r\n//               outerRadius={70}\r\n//               dataKey=\"value\"\r\n//               startAngle={90}\r\n//               endAngle={-270}\r\n//               stroke=\"none\"\r\n//             >\r\n//               {data.map((entry, index) => (\r\n//                 <Cell\r\n//                   key={`cell-${index}`}\r\n//                   fill={entry.color}\r\n//                   style={{\r\n//                     transition: \"filter 0.3s\",\r\n//                     cursor: \"pointer\",\r\n//                   }}\r\n//                   onMouseEnter={(e) => {\r\n//                     e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n//                   }}\r\n//                   onMouseLeave={(e) => {\r\n//                     e.currentTarget.style.filter = \"none\";\r\n//                   }}\r\n//                 />\r\n//               ))}\r\n//             </Pie>\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { name, amount } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{name}</p>\r\n//                       <p className=\"amount\">{formatCash(amount)}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//           </PieChart>\r\n//         </ResponsiveContainer>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisDisplay;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// import { performAnalysis } from \"./AnalysisGet\";\r\n\r\n// const AnalysisDisplay = () => {\r\n//   const [analysisResults, setAnalysisResults] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const results = await performAnalysis();\r\n//         setAnalysisResults(results);\r\n//       } catch (err) {\r\n//         setError(err);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   if (error) {\r\n//     console.error(\"Error fetching analysis data:\", error);\r\n//   }\r\n\r\n//   if (!analysisResults && !error) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const {\r\n//     averageWin = 0,\r\n//     averageLoss = 0,\r\n//     winRate = 0,\r\n//   } = analysisResults || {};\r\n//   const total = averageWin + averageLoss;\r\n//   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n//   const formatCash = (value) => `$${value.toFixed(2)}`;\r\n\r\n//   const data = [\r\n//     {\r\n//       name: \"Average Win\",\r\n//       value: winPercent,\r\n//       color: \"#4a90e2\",\r\n//       amount: averageWin,\r\n//     },\r\n//     {\r\n//       name: \"Average Loss\",\r\n//       value: 100 - winPercent,\r\n//       color: \"#f44336\",\r\n//       amount: averageLoss,\r\n//     },\r\n//   ];\r\n\r\n//   const winRateData = [\r\n//     { name: \"Win Rate\", value: winRate, color: \"#4a90e2\" },\r\n//     { name: \"Remaining\", value: 100 - winRate, color: \"#d8e3ef\" },\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"analysis-display-container\"\r\n//       style={{ width: \"150px\", margin: \"0 auto\" }}\r\n//     >\r\n//       {/* Main Chart for Average Win and Loss */}\r\n//       <ResponsiveContainer width=\"100%\" height={250}>\r\n//         <PieChart>\r\n//           <Pie\r\n//             data={data}\r\n//             innerRadius={50}\r\n//             outerRadius={70}\r\n//             dataKey=\"value\"\r\n//             startAngle={90}\r\n//             endAngle={-270}\r\n//             stroke=\"none\"\r\n//           >\r\n//             {data.map((entry, index) => (\r\n//               <Cell\r\n//                 key={`cell-${index}`}\r\n//                 fill={entry.color}\r\n//                 style={{\r\n//                   transition: \"filter 0.3s\",\r\n//                   cursor: \"pointer\",\r\n//                 }}\r\n//                 onMouseEnter={(e) => {\r\n//                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n//                 }}\r\n//                 onMouseLeave={(e) => {\r\n//                   e.currentTarget.style.filter = \"none\";\r\n//                 }}\r\n//               />\r\n//             ))}\r\n//           </Pie>\r\n//           <Tooltip\r\n//             cursor={false}\r\n//             content={({ payload }) => {\r\n//               if (payload && payload.length) {\r\n//                 const { name, amount } = payload[0].payload;\r\n//                 return (\r\n//                   <div className=\"tooltip-content\">\r\n//                     <p>{name}</p>\r\n//                     <p className=\"amount\">{formatCash(amount)}</p>\r\n//                   </div>\r\n//                 );\r\n//               }\r\n//               return null;\r\n//             }}\r\n//           />\r\n//         </PieChart>\r\n//       </ResponsiveContainer>\r\n\r\n//       <div style={{ marginTop: \"20px\" }}>\r\n//         <ResponsiveContainer width=\"100%\" height={150}>\r\n//           <PieChart>\r\n//             <Pie\r\n//               data={winRateData}\r\n//               innerRadius={50}\r\n//               outerRadius={70}\r\n//               startAngle={90}\r\n//               endAngle={-270}\r\n//               stroke=\"none\"\r\n//               dataKey=\"value\"\r\n//             >\r\n//               {winRateData.map((entry, index) => (\r\n//                 <Cell key={`winrate-cell-${index}`} fill={entry.color} />\r\n//               ))}\r\n//             </Pie>\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { name, value } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{name}</p>\r\n//                       <p className=\"amount\">{`${value.toFixed(2)}%`}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n//           </PieChart>\r\n//         </ResponsiveContainer>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisDisplay;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from \"recharts\";\r\n// // import { performAnalysis } from \"./AnalysisGet\";\r\n\r\n// // const AnalysisDisplay = () => {\r\n// //   const [analysisResults, setAnalysisResults] = useState(null);\r\n// //   const [error, setError] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchData = async () => {\r\n// //       try {\r\n// //         const results = await performAnalysis();\r\n// //         setAnalysisResults(results);\r\n// //       } catch (err) {\r\n// //         setError(err);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchData();\r\n// //   }, []);\r\n\r\n// //   if (error) {\r\n// //     console.error(\"Error fetching analysis data:\", error);\r\n// //   }\r\n\r\n// //   if (!analysisResults && !error) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   const { averageWin = 0, averageLoss = 0 } = analysisResults || {};\r\n// //   const total = averageWin + averageLoss;\r\n// //   const winPercent = total > 0 ? (averageWin / total) * 100 : 50;\r\n// //   const formatCash = (value) => `$${value.toFixed(2)}`;\r\n\r\n// //   const data = [\r\n// //     {\r\n// //       name: \"Average Win\",\r\n// //       value: winPercent,\r\n// //       color: \"#4a90e2\",\r\n// //       amount: averageWin,\r\n// //     },\r\n// //     {\r\n// //       name: \"Average Loss\",\r\n// //       value: 100 - winPercent,\r\n// //       color: \"#f44336\",\r\n// //       amount: averageLoss,\r\n// //     },\r\n// //   ];\r\n\r\n// //   return (\r\n// //     <div\r\n// //       className=\"analysis-display-container\"\r\n// //       style={{ width: \"150px\", margin: \"0 auto\" }}\r\n// //     >\r\n// //       <ResponsiveContainer width=\"100%\" height={250}>\r\n// //         <PieChart>\r\n// //           <Pie\r\n// //             data={data}\r\n// //             innerRadius={50}\r\n// //             outerRadius={70}\r\n// //             dataKey=\"value\"\r\n// //             startAngle={90}\r\n// //             endAngle={-270}\r\n// //             stroke=\"none\"\r\n// //           >\r\n// //             {data.map((entry, index) => (\r\n// //               <Cell\r\n// //                 key={`cell-${index}`}\r\n// //                 fill={entry.color}\r\n// //                 style={{\r\n// //                   transition: \"filter 0.3s\",\r\n// //                   filter: \"none\",\r\n// //                   cursor: \"pointer\",\r\n// //                   width: \"max-content\",\r\n// //                   padding: \"10px\",\r\n// //                   borderRadius: \"50%\",\r\n// //                 }}\r\n// //                 onMouseEnter={(e) => {\r\n// //                   e.currentTarget.style.filter = `drop-shadow(0 0 3px ${entry.color})`;\r\n// //                 }}\r\n// //                 onMouseLeave={(e) => {\r\n// //                   e.currentTarget.style.filter = \"none\";\r\n// //                 }}\r\n// //               />\r\n// //             ))}\r\n// //           </Pie>\r\n// //           <Tooltip\r\n// //             cursor={false}\r\n// //             content={({ payload }) => {\r\n// //               if (payload && payload.length) {\r\n// //                 const { name, amount } = payload[0].payload;\r\n// //                 return (\r\n// //                   <div className=\"tooltip-content\">\r\n// //                     <p>{name}</p>\r\n// //                     <p className=\"amount\">{formatCash(amount)}</p>\r\n// //                   </div>\r\n// //                 );\r\n// //               }\r\n// //               return null;\r\n// //             }}\r\n// //           />\r\n// //         </PieChart>\r\n// //       </ResponsiveContainer>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default AnalysisDisplay;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { performAnalysis } from \"./AnalysisGet\";\r\nimport { Line } from \"rc-progress\";\r\n\r\nconst AnalysisDisplay = () => {\r\n  const [analysisResults, setAnalysisResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const results = await performAnalysis();\r\n        setAnalysisResults(results);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const formatValue = (value, isCurrency = false) => {\r\n    if (isNaN(value) || value === undefined) {\r\n      return isCurrency ? \"$0.00\" : \"N/A\";\r\n    }\r\n    return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\r\n  };\r\n\r\n  if (error) {\r\n    console.error(\"Error fetching analysis data:\", error);\r\n  }\r\n\r\n  if (!analysisResults && !error) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const {\r\n    absoluteReturn = 0,\r\n    sharpeRatio = 0,\r\n    winRate = 0,\r\n    numberOfTrades = 0,\r\n    winningTrades = 0,\r\n    losingTrades = 0,\r\n    averageWin = 0,\r\n    averageLoss = 0,\r\n    riskRewardRatio = 0,\r\n  } = analysisResults || {};\r\n\r\n  const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\r\n  const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\r\n\r\n  return (\r\n    <div className=\"analysis-container\">\r\n      <div className=\"analysis-metrics-row\">\r\n        {/* Absolute Return Metric */}\r\n        <div className=\"analysis-metric-top\">\r\n          <h3>Absolute Return</h3>\r\n          <p>{`${absoluteReturn.toFixed(2)}%`}</p>\r\n          <Line\r\n            percent={absoluteReturnPercentage}\r\n            strokeWidth=\"2\"\r\n            trailWidth=\"2\"\r\n            strokeColor={\"#4a90e2\"}\r\n            trailColor=\"#d8e3ef\"\r\n          />\r\n        </div>\r\n\r\n        {/* Sharpe Ratio Metric */}\r\n        <div className=\"analysis-metric-top\">\r\n          <h3>Sharpe Ratio</h3>\r\n          <p>{formatValue(sharpeRatio)}</p>\r\n          <Line\r\n            percent={sharpeRatioPercentage}\r\n            strokeWidth=\"2\"\r\n            trailWidth=\"2\"\r\n            strokeColor={\"#4a90e2\"}\r\n            trailColor=\"#d8e3ef\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Trades, Wins, and Losses Row */}\r\n      <div className=\"analysis-row\">\r\n        <div className=\"analysis-circle\">\r\n          <h3>Trades</h3>\r\n          <p>{numberOfTrades}</p>\r\n        </div>\r\n        <div className=\"analysis-circle\">\r\n          <h3>Wins</h3>\r\n          <p>{winningTrades}</p>\r\n        </div>\r\n        <div className=\"analysis-circle\">\r\n          <h3>Losses</h3>\r\n          <p>{losingTrades}</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Additional Metrics Row */}\r\n      <div className=\"analysis-metrics-row\">\r\n        <div className=\"analysis-metric\">\r\n          <h3>Win Rate</h3>\r\n          <p>{formatValue(winRate)}%</p>\r\n        </div>\r\n        <div className=\"analysis-metric\">\r\n          <h3>Avg. Win</h3>\r\n          <p>{formatValue(averageWin, true)}</p>\r\n        </div>\r\n        <div className=\"analysis-metric\">\r\n          <h3>Avg. Loss</h3>\r\n          <p>{formatValue(averageLoss, true)}</p>\r\n        </div>\r\n        <div className=\"analysis-metric\">\r\n          <h3>Risk Reward</h3>\r\n          <p>{formatValue(riskRewardRatio)}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisDisplay;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
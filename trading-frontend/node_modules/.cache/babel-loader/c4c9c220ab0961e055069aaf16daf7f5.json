{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\TradeSum.js\";\n// TradeSum.js\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nimport Sort from \"./Sort\";\nconst TradeSum = () => {\n  // eslint-disable-next-line\n  const [dailyTrades, setDailyTrades] = useState([]);\n  const [weeklyTrades, setWeeklyTrades] = useState([]);\n  const [monthlyTrades, setMonthlyTrades] = useState([]);\n  useEffect(() => {\n    const fetchAndCategorizeTrades = async () => {\n      try {\n        const trades = await fetchTrades();\n        const today = new Date();\n        const startOfWeek = new Date(today);\n        startOfWeek.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1)); // Monday\n\n        const daily = [];\n        const weekly = [];\n        const monthly = [];\n        trades.forEach(trade => {\n          const exitDate = new Date(trade.exitDate);\n          const tradeExitDateStr = exitDate.toDateString();\n\n          // Check if the trade exit date is today\n          if (tradeExitDateStr === today.toDateString()) {\n            daily.push(trade);\n          }\n\n          // Check if the trade exit date is within the current week (Monday to Sunday)\n          if (exitDate >= startOfWeek && exitDate <= today) {\n            weekly.push(trade);\n          }\n\n          // Check if the trade exit date is within the current month\n          if (exitDate.getMonth() === today.getMonth() && exitDate.getFullYear() === today.getFullYear()) {\n            monthly.push(trade);\n          }\n        });\n        setDailyTrades(daily);\n        setWeeklyTrades(weekly);\n        setMonthlyTrades(monthly);\n      } catch (error) {\n        console.error(\"Error fetching trades:\", error);\n      }\n    };\n    fetchAndCategorizeTrades();\n  }, []);\n  const renderTrades = trades => {\n    const totalTrades = trades.length;\n    const winningTrades = trades.filter(trade => trade.profitLoss > 0).length;\n    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100).toFixed(2) : \"0\";\n    const totalPnL = trades.reduce((acc, trade) => acc + (trade.exitPrice - trade.entryPrice) * trade.contracts, 0).toFixed(2);\n    const totalEntry = trades.reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0).toFixed(2);\n    const pnlPercentage = totalEntry > 0 ? (totalPnL / totalEntry * 100).toFixed(2) : \"0\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, trades.map(trade => /*#__PURE__*/React.createElement(\"div\", {\n      key: trade.id,\n      className: \"trade-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, trade.symbol, \" \", trade.optionType, \" $\", trade.strikePrice, \" \", trade.expDate.split(\"-\").slice(1).join(\"/\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"middle-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"$\", trade.entryPrice.toFixed(2), \" - $\", trade.exitPrice.toFixed(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, ((trade.exitPrice - trade.entryPrice) / trade.entryPrice * 100).toFixed(2), \"%\"))), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"hr-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"win-rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"Win Rate:\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, winningTrades, \"/\", totalTrades), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"percent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, winRate, \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pnl-rate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, \"P/L:\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, \"$\", totalPnL), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"percent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, pnlPercentage, \"%\")));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Week\")), renderTrades(weeklyTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Month\")), renderTrades(monthlyTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Sort, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default TradeSum;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTrades } from \"./ApiCalls\";\n// import Sort from \"./Sort\";\n\n// const TradeSum = () => {\n//   // eslint-disable-next-line\n//   const [dailyTrades, setDailyTrades] = useState([]);\n//   const [weeklyTrades, setWeeklyTrades] = useState([]);\n//   const [monthlyTrades, setMonthlyTrades] = useState([]);\n\n//   useEffect(() => {\n//     const fetchAndCategorizeTrades = async () => {\n//       try {\n//         const trades = await fetchTrades();\n//         const today = new Date();\n//         const startOfWeek = new Date(today);\n//         startOfWeek.setDate(today.getDate() - today.getDay() + 1); // Monday\n\n//         const daily = [];\n//         const weekly = [];\n//         const monthly = [];\n\n//         trades.forEach((trade) => {\n//           const tradeDate = new Date(trade.entryDate);\n//           if (tradeDate.toDateString() === today.toDateString()) {\n//             daily.push(trade);\n//           }\n//           if (tradeDate >= startOfWeek && tradeDate <= today) {\n//             weekly.push(trade);\n//           }\n//           if (\n//             tradeDate.getMonth() === today.getMonth() &&\n//             tradeDate.getFullYear() === today.getFullYear()\n//           ) {\n//             monthly.push(trade);\n//           }\n//         });\n\n//         setDailyTrades(daily);\n//         setWeeklyTrades(weekly);\n//         setMonthlyTrades(monthly);\n//       } catch (error) {\n//         console.error(\"Error fetching trades:\", error);\n//       }\n//     };\n\n//     fetchAndCategorizeTrades();\n//   }, []);\n\n//   const renderTrades = (trades) => {\n//     const totalTrades = trades.length;\n//     const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\n//     const winRate =\n//       totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\n\n//     const totalPnL = trades\n//       .reduce(\n//         (acc, trade) =>\n//           acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\n//         0\n//       )\n//       .toFixed(2);\n//     const totalEntry = trades\n//       .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\n//       .toFixed(2);\n//     const pnlPercentage =\n//       totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\n\n//     return (\n//       <div>\n//         {trades.map((trade) => (\n//           <div key={trade.id} className=\"trade-item\">\n//             <div className=\"left-column\">\n//               {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\n//               {trade.expDate.split(\"-\").slice(1).join(\"/\")}\n//             </div>\n//             <div className=\"middle-column\">\n//               ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\n//             </div>\n//             <div className=\"right-column\">\n//               {(\n//                 ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\n//                 100\n//               ).toFixed(2)}\n//               %\n//             </div>\n//           </div>\n//         ))}\n//         <hr className=\"hr-bar\"></hr>\n//         <div className=\"win-rate\">\n//           <span className=\"title\">Win Rate:</span>\n//           <span className=\"value\">\n//             {winningTrades}/{totalTrades}\n//           </span>\n//           <span className=\"percent\">{winRate}%</span>\n//         </div>\n//         <div className=\"pnl-rate\">\n//           <span className=\"title\">P/L:</span>\n//           <span className=\"value\">${(totalPnL * 100).toFixed(2)}</span>\n//           <span className=\"percent\">{pnlPercentage}%</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"trade-summary\">\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Week</p>\n//         </div>{\" \"}\n//         {renderTrades(weeklyTrades)}\n//       </div>\n//       <div className=\"trade-category\">\n//         <div className=\"header\">\n//           <p>Month</p>\n//         </div>{\" \"}\n//         {renderTrades(monthlyTrades)}\n//       </div>\n//       <div className=\"trade-category\">\n//         <div className=\"analysis-sort\">\n//           <Sort />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TradeSum;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","Sort","TradeSum","dailyTrades","setDailyTrades","weeklyTrades","setWeeklyTrades","monthlyTrades","setMonthlyTrades","fetchAndCategorizeTrades","trades","today","Date","startOfWeek","setDate","getDate","getDay","daily","weekly","monthly","forEach","trade","exitDate","tradeExitDateStr","toDateString","push","getMonth","getFullYear","error","console","renderTrades","totalTrades","length","winningTrades","filter","profitLoss","winRate","toFixed","totalPnL","reduce","acc","exitPrice","entryPrice","contracts","totalEntry","pnlPercentage","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","id","className","symbol","optionType","strikePrice","expDate","split","slice","join"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/TradeSum.js"],"sourcesContent":["// TradeSum.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\nimport Sort from \"./Sort\";\r\n\r\nconst TradeSum = () => {\r\n  // eslint-disable-next-line\r\n  const [dailyTrades, setDailyTrades] = useState([]);\r\n  const [weeklyTrades, setWeeklyTrades] = useState([]);\r\n  const [monthlyTrades, setMonthlyTrades] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAndCategorizeTrades = async () => {\r\n      try {\r\n        const trades = await fetchTrades();\r\n        const today = new Date();\r\n        const startOfWeek = new Date(today);\r\n        startOfWeek.setDate(\r\n          today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1)\r\n        ); // Monday\r\n\r\n        const daily = [];\r\n        const weekly = [];\r\n        const monthly = [];\r\n\r\n        trades.forEach((trade) => {\r\n          const exitDate = new Date(trade.exitDate);\r\n          const tradeExitDateStr = exitDate.toDateString();\r\n\r\n          // Check if the trade exit date is today\r\n          if (tradeExitDateStr === today.toDateString()) {\r\n            daily.push(trade);\r\n          }\r\n\r\n          // Check if the trade exit date is within the current week (Monday to Sunday)\r\n          if (exitDate >= startOfWeek && exitDate <= today) {\r\n            weekly.push(trade);\r\n          }\r\n\r\n          // Check if the trade exit date is within the current month\r\n          if (\r\n            exitDate.getMonth() === today.getMonth() &&\r\n            exitDate.getFullYear() === today.getFullYear()\r\n          ) {\r\n            monthly.push(trade);\r\n          }\r\n        });\r\n\r\n        setDailyTrades(daily);\r\n        setWeeklyTrades(weekly);\r\n        setMonthlyTrades(monthly);\r\n      } catch (error) {\r\n        console.error(\"Error fetching trades:\", error);\r\n      }\r\n    };\r\n\r\n    fetchAndCategorizeTrades();\r\n  }, []);\r\n\r\n  const renderTrades = (trades) => {\r\n    const totalTrades = trades.length;\r\n    const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\r\n    const winRate =\r\n      totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\r\n\r\n    const totalPnL = trades\r\n      .reduce(\r\n        (acc, trade) =>\r\n          acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\r\n        0\r\n      )\r\n      .toFixed(2);\r\n    const totalEntry = trades\r\n      .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\r\n      .toFixed(2);\r\n    const pnlPercentage =\r\n      totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\r\n\r\n    return (\r\n      <div>\r\n        {trades.map((trade) => (\r\n          <div key={trade.id} className=\"trade-item\">\r\n            <div className=\"left-column\">\r\n              {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\r\n              {trade.expDate.split(\"-\").slice(1).join(\"/\")}\r\n            </div>\r\n            <div className=\"middle-column\">\r\n              ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\r\n            </div>\r\n            <div className=\"right-column\">\r\n              {(\r\n                ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\r\n                100\r\n              ).toFixed(2)}\r\n              %\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <hr className=\"hr-bar\"></hr>\r\n        <div className=\"win-rate\">\r\n          <span className=\"title\">Win Rate:</span>\r\n          <span className=\"value\">\r\n            {winningTrades}/{totalTrades}\r\n          </span>\r\n          <span className=\"percent\">{winRate}%</span>\r\n        </div>\r\n        <div className=\"pnl-rate\">\r\n          <span className=\"title\">P/L:</span>\r\n          <span className=\"value\">${totalPnL}</span>\r\n          <span className=\"percent\">{pnlPercentage}%</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"trade-summary\">\r\n      <div className=\"trade-category\">\r\n        <div className=\"header\">\r\n          <p>Week</p>\r\n        </div>\r\n        {renderTrades(weeklyTrades)}\r\n      </div>\r\n      <div className=\"trade-category\">\r\n        <div className=\"header\">\r\n          <p>Month</p>\r\n        </div>\r\n        {renderTrades(monthlyTrades)}\r\n      </div>\r\n      <div className=\"trade-category\">\r\n        <div className=\"header\">\r\n          <p>Sort</p>\r\n        </div>\r\n        <div className=\"analysis-sort\">\r\n          <Sort />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeSum;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTrades } from \"./ApiCalls\";\r\n// import Sort from \"./Sort\";\r\n\r\n// const TradeSum = () => {\r\n//   // eslint-disable-next-line\r\n//   const [dailyTrades, setDailyTrades] = useState([]);\r\n//   const [weeklyTrades, setWeeklyTrades] = useState([]);\r\n//   const [monthlyTrades, setMonthlyTrades] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAndCategorizeTrades = async () => {\r\n//       try {\r\n//         const trades = await fetchTrades();\r\n//         const today = new Date();\r\n//         const startOfWeek = new Date(today);\r\n//         startOfWeek.setDate(today.getDate() - today.getDay() + 1); // Monday\r\n\r\n//         const daily = [];\r\n//         const weekly = [];\r\n//         const monthly = [];\r\n\r\n//         trades.forEach((trade) => {\r\n//           const tradeDate = new Date(trade.entryDate);\r\n//           if (tradeDate.toDateString() === today.toDateString()) {\r\n//             daily.push(trade);\r\n//           }\r\n//           if (tradeDate >= startOfWeek && tradeDate <= today) {\r\n//             weekly.push(trade);\r\n//           }\r\n//           if (\r\n//             tradeDate.getMonth() === today.getMonth() &&\r\n//             tradeDate.getFullYear() === today.getFullYear()\r\n//           ) {\r\n//             monthly.push(trade);\r\n//           }\r\n//         });\r\n\r\n//         setDailyTrades(daily);\r\n//         setWeeklyTrades(weekly);\r\n//         setMonthlyTrades(monthly);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching trades:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchAndCategorizeTrades();\r\n//   }, []);\r\n\r\n//   const renderTrades = (trades) => {\r\n//     const totalTrades = trades.length;\r\n//     const winningTrades = trades.filter((trade) => trade.profitLoss > 0).length;\r\n//     const winRate =\r\n//       totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(2) : \"0\";\r\n\r\n//     const totalPnL = trades\r\n//       .reduce(\r\n//         (acc, trade) =>\r\n//           acc + (trade.exitPrice - trade.entryPrice) * trade.contracts,\r\n//         0\r\n//       )\r\n//       .toFixed(2);\r\n//     const totalEntry = trades\r\n//       .reduce((acc, trade) => acc + trade.entryPrice * trade.contracts, 0)\r\n//       .toFixed(2);\r\n//     const pnlPercentage =\r\n//       totalEntry > 0 ? ((totalPnL / totalEntry) * 100).toFixed(2) : \"0\";\r\n\r\n//     return (\r\n//       <div>\r\n//         {trades.map((trade) => (\r\n//           <div key={trade.id} className=\"trade-item\">\r\n//             <div className=\"left-column\">\r\n//               {trade.symbol} {trade.optionType} ${trade.strikePrice}{\" \"}\r\n//               {trade.expDate.split(\"-\").slice(1).join(\"/\")}\r\n//             </div>\r\n//             <div className=\"middle-column\">\r\n//               ${trade.entryPrice.toFixed(2)} - ${trade.exitPrice.toFixed(2)}\r\n//             </div>\r\n//             <div className=\"right-column\">\r\n//               {(\r\n//                 ((trade.exitPrice - trade.entryPrice) / trade.entryPrice) *\r\n//                 100\r\n//               ).toFixed(2)}\r\n//               %\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//         <hr className=\"hr-bar\"></hr>\r\n//         <div className=\"win-rate\">\r\n//           <span className=\"title\">Win Rate:</span>\r\n//           <span className=\"value\">\r\n//             {winningTrades}/{totalTrades}\r\n//           </span>\r\n//           <span className=\"percent\">{winRate}%</span>\r\n//         </div>\r\n//         <div className=\"pnl-rate\">\r\n//           <span className=\"title\">P/L:</span>\r\n//           <span className=\"value\">${(totalPnL * 100).toFixed(2)}</span>\r\n//           <span className=\"percent\">{pnlPercentage}%</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"trade-summary\">\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Week</p>\r\n//         </div>{\" \"}\r\n//         {renderTrades(weeklyTrades)}\r\n//       </div>\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"header\">\r\n//           <p>Month</p>\r\n//         </div>{\" \"}\r\n//         {renderTrades(monthlyTrades)}\r\n//       </div>\r\n//       <div className=\"trade-category\">\r\n//         <div className=\"analysis-sort\">\r\n//           <Sort />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TradeSum;\r\n"],"mappings":"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,CAAAiD,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,MAAO,CACP,CAAC,eACNvD,KAAA,CAAAiD,aAAA;IAAKU,SAAS,EAAC,eAAe;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BvD,KAAA,CAAAiD,aAAA,CAAC7C,IAAI;IAAA8C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACJ,CACF,CACF,CAAC;AAEV,CAAC;AAED,eAAelD,QAAQ;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}
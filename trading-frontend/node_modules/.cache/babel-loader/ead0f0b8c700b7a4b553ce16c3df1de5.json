{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import NewTrade from \"./NewTrade\";\n// import Modal from \"./Modal\";\n// import \"./styles/recentTrades.css\";\n// import { showSuccessModal, showUnsuccessModal } from \"./Utility\";\n\n// const RecentTrades = ({ formatDate }) => {\n//   const [recentTrades, setRecentTrades] = useState([]);\n//   const [selectedTrade, setSelectedTrade] = useState(null);\n//   const [editedTrade, setEditedTrade] = useState(null);\n//   const [showNewTradeModal, setShowNewTradeModal] = useState(false);\n\n//   useEffect(() => {\n//     fetchRecentTrades();\n//   }, []);\n\n//   const fetchRecentTrades = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:8000/trades/\");\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch recent trades\");\n//       }\n//       const data = await response.json();\n//       setRecentTrades(data);\n//     } catch (error) {\n//       console.error(\"Error fetching recent trades:\", error);\n//     }\n//   };\n\n//   const handleNewTradeClick = () => {\n//     setShowNewTradeModal(true);\n//   };\n\n//   const handleRowClick = (trade) => {\n//     setSelectedTrade(trade);\n//     setEditedTrade({ ...trade });\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedTrade(null);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditedTrade((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8000/trades/${editedTrade.trade_id}`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify(editedTrade),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update trade data\");\n//       }\n//       handleCloseModal();\n//       fetchRecentTrades();\n//       showSuccessModal();\n//     } catch (error) {\n//       console.error(\"Error updating trade data:\", error);\n//       handleCloseModal();\n//       showUnsuccessModal(error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"trades-container\">\n//       <div className=\"header-card\">\n//         <p className=\"recent\">Trades</p>\n//         <i\n//           className=\"fa-solid fa-plus\"\n//           id=\"new-btn\"\n//           onClick={handleNewTradeClick}\n//         ></i>\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>ID</th>\n//             <th>Options</th>\n//             <th>Trade Date</th>\n//             <th>Settle Date</th>\n//             <th>Price</th>\n//             <th>QTY</th>\n//             <th>Principle</th>\n//             <th>Exit</th>\n//             <th>%</th>\n//             <th>Net Amount</th>\n//             <th>P/L</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {recentTrades.map((trade) => (\n//             <tr key={trade.id} onClick={() => handleRowClick(trade)}>\n//               <td>{trade.id}</td>\n//               <td>\n//                 {trade.symbol} {formatDate(trade.exp_date)} {trade.option_type}{\" \"}\n//                 ${trade.strike_price}\n//               </td>\n//               <td>{formatDate(trade.entry_date)}</td>\n//               <td>{trade.close_date ? formatDate(trade.close_date) : \"\"}</td>\n//               <td>${trade.entry_price}</td>\n//               <td>{trade.contracts}</td>\n//               <td>${(trade.entry_price * trade.contracts * 100).toFixed(2)}</td>\n//               <td>{trade.exit_price ? `$${trade.exit_price}` : \"\"}</td>\n//               <td>\n//                 {trade.exit_price && trade.entry_price\n//                   ? `${(\n//                       ((trade.exit_price - trade.entry_price) /\n//                         trade.entry_price) *\n//                       100\n//                     ).toFixed(2)}%`\n//                   : \"\"}\n//               </td>\n//               <td>${(trade.exit_price * trade.contracts * 100).toFixed(2)}</td>\n//               <td>${(trade.profit_loss * 100 * trade.contracts).toFixed(2)}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {showNewTradeModal && (\n//         <NewTrade\n//           setShowModal={setShowNewTradeModal}\n//           fetchRecentTrades={fetchRecentTrades}\n//         />\n//       )}\n//       {selectedTrade && (\n//         <Modal isOpen={true} onClose={handleCloseModal}>\n//           <div className=\"header-card\">\n//             <h1>{selectedTrade.symbol}</h1>\n//           </div>\n//           <form className=\"trade-update-form\" onSubmit={handleFormSubmit}>\n//             <label htmlFor=\"symbol\">Symbol:</label>\n//             <input\n//               type=\"text\"\n//               name=\"symbol\"\n//               value={editedTrade.symbol}\n//               onChange={handleInputChange}\n//             />\n//             <label htmlFor=\"option_type\">Option Type:</label>\n//             <input\n//               type=\"text\"\n//               name=\"option_type\"\n//               value={editedTrade.option_type}\n//               onChange={handleInputChange}\n//             />\n//             <label htmlFor=\"strike_price\">Strike Price:</label>\n//             <input\n//               type=\"text\"\n//               name=\"strike_price\"\n//               value={editedTrade.strike_price}\n//               onChange={handleInputChange}\n//             />\n//             <label htmlFor=\"entry_price\">Entry Price:</label>\n//             <input\n//               type=\"text\"\n//               name=\"entry_price\"\n//               value={editedTrade.entry_price}\n//               onChange={handleInputChange}\n//             />\n//             <label htmlFor=\"exit_price\">Exit Price:</label>\n//             <input\n//               type=\"text\"\n//               name=\"exit_price\"\n//               placeholder=\"Exit trade before entering exit price\"\n//               value={editedTrade.exit_price || \"\"}\n//               onChange={handleInputChange}\n//             />\n//             <label htmlFor=\"contracts\">Contracts:</label>\n//             <input\n//               type=\"text\"\n//               name=\"contracts\"\n//               value={editedTrade.contracts}\n//               onChange={handleInputChange}\n//             />\n//             <label htmlFor=\"close_date\">Close Date:</label>\n//             <input\n//               type=\"date\"\n//               name=\"close_date\"\n//               value={editedTrade.close_date || \"\"}\n//               onChange={handleInputChange}\n//             />\n//             <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//         </Modal>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default RecentTrades;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import NewTrade from \"./NewTrade\";\n// // import Modal from \"./Modal\";\n// // import \"./styles/recentTrades.css\";\n// // import { showSuccessModal, showUnsuccessModal } from \"./Utility\"; // Import utility functions\n\n// // const RecentTrades = ({ formatDate }) => {\n// //   const [recentTrades, setRecentTrades] = useState([]);\n// //   const [selectedTrade, setSelectedTrade] = useState(null);\n// //   const [editedTrade, setEditedTrade] = useState(null);\n// //   const [showNewTradeModal, setShowNewTradeModal] = useState(false);\n\n// //   useEffect(() => {\n// //     // Fetch recent trades when the component mounts\n// //     fetchRecentTrades();\n// //   }, []);\n\n// //   const fetchRecentTrades = async () => {\n// //     try {\n// //       const response = await fetch(\"http://localhost:8000/trades/\");\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to fetch recent trades\");\n// //       }\n// //       const data = await response.json();\n// //       setRecentTrades(data);\n// //     } catch (error) {\n// //       console.error(\"Error fetching recent trades:\", error);\n// //     }\n// //   };\n\n// //   const handleNewTradeClick = () => {\n// //     setShowNewTradeModal(true);\n// //   };\n\n// //   const handleRowClick = (trade) => {\n// //     setSelectedTrade(trade);\n// //     setEditedTrade({ ...trade });\n// //   };\n\n// //   const handleCloseModal = () => {\n// //     setSelectedTrade(null);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditedTrade((prevState) => ({\n// //       ...prevState,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   const handleFormSubmit = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await fetch(\n// //         `http://localhost:8000/trades/${editedTrade.trade_id}`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify(editedTrade),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to update trade data\");\n// //       }\n// //       handleCloseModal();\n// //       fetchRecentTrades();\n// //       showSuccessModal();\n// //     } catch (error) {\n// //       console.error(\"Error updating trade data:\", error);\n// //       handleCloseModal();\n// //       showUnsuccessModal(error.message);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"trades-container\">\n// //       <div className=\"header-card\">\n// //         <p className=\"recent\">Trades</p>\n// //         <i\n// //           className=\"fa-solid fa-plus\"\n// //           id=\"new-btn\"\n// //           onClick={handleNewTradeClick}\n// //         ></i>\n// //       </div>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>ID</th>\n// //             <th>Options</th>\n// //             <th>Trade Date</th>\n// //             <th>Settle Date</th>\n// //             <th>Price</th>\n// //             <th>QTY</th>\n// //             <th>Principle</th>\n// //             <th>Exit</th>\n// //             <th> % </th>\n// //             <th>Net Amount</th>\n// //             <th>P/L</th>\n// //           </tr>\n// //         </thead>\n\n// //         <tbody>\n// //           {recentTrades.slice(-15).map((trade) => (\n// //             <tr key={trade.trade_id} onClick={() => handleRowClick(trade)}>\n// //               <td>{trade.trade_id}</td>\n// //               <td>\n// //                 {trade.symbol} {formatDate(trade.expiration_date)}{\" \"}\n// //                 {trade.option_type} ${trade.strike_price}\n// //               </td>\n// //               <td>{formatDate(trade.open_date)}</td>\n// //               <td>{trade.close_date ? formatDate(trade.close_date) : \"\"}</td>\n// //               <td>${trade.entry_price}</td>\n// //               <td>{trade.contracts}</td>\n// //               <td>\n// //                 ${(trade.entry_price * trade.contracts * 100).toFixed(2)}\n// //               </td>{\" \"}\n// //               <td>{trade.exit_price ? `$${trade.exit_price}` : \"\"}</td>\n// //               <td>\n// //                 {trade.exit_price && trade.entry_price\n// //                   ? `${(\n// //                       ((trade.exit_price - trade.entry_price) /\n// //                         trade.entry_price) *\n// //                       100\n// //                     ).toFixed(2)}%`\n// //                   : \"\"}\n// //               </td>{\" \"}\n// //               <td>${(trade.exit_price * trade.contracts * 100).toFixed(2)}</td>{\" \"}\n// //               <td>${(trade.profit_loss * 100 * trade.contracts).toFixed(2)}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {showNewTradeModal && (\n// //         <NewTrade\n// //           setShowModal={setShowNewTradeModal}\n// //           fetchRecentTrades={fetchRecentTrades}\n// //         />\n// //       )}\n// //       {selectedTrade && (\n// //         <Modal isOpen={true} onClose={handleCloseModal}>\n// //           <div className=\"header-card\">\n// //             <h1>{selectedTrade.symbol}</h1>\n// //           </div>\n// //           <form className=\"trade-update-form\" onSubmit={handleFormSubmit}>\n// //             <label htmlFor=\"option_symbol\">Option Symbol:</label>\n// //             <input\n// //               type=\"text\"\n// //               name=\"option_symbol\"\n// //               value={editedTrade.symbol}\n// //               onChange={handleInputChange}\n// //             />\n// //             <label htmlFor=\"option_type\">Option Type:</label>\n// //             <input\n// //               type=\"text\"\n// //               name=\"option_type\"\n// //               value={editedTrade.option_type}\n// //               onChange={handleInputChange}\n// //             />\n// //             <label htmlFor=\"strike_price\">Strike Price:</label>\n// //             <input\n// //               type=\"text\"\n// //               name=\"strike_price\"\n// //               value={editedTrade.strike_price}\n// //               onChange={handleInputChange}\n// //             />\n// //             <label htmlFor=\"entry_price\">Entry Price:</label>\n// //             <input\n// //               type=\"text\"\n// //               name=\"entry_price\"\n// //               value={editedTrade.entry_price}\n// //               onChange={handleInputChange}\n// //             />\n// //             <label htmlFor=\"exit_price\">Exit Price:</label>\n// //             <input\n// //               type=\"text\"\n// //               name=\"exit_price\"\n// //               placeholder=\"Exit trade before entering exit price\"\n// //               value={editedTrade.exit_price || \"\"}\n// //               onChange={handleInputChange}\n// //             />\n// //             <label htmlFor=\"contracts\">Contracts:</label>\n// //             <input\n// //               type=\"text\"\n// //               name=\"contracts\"\n// //               value={editedTrade.contracts}\n// //               onChange={handleInputChange}\n// //             />\n// //             <label htmlFor=\"close_date\">Close Date:</label>\n// //             <input\n// //               type=\"date\"\n// //               name=\"close_date\"\n// //               value={editedTrade.close_date || \"\"}\n// //               onChange={handleInputChange}\n// //             />\n// //             <input type=\"submit\" value=\"Submit\" />\n// //           </form>\n// //         </Modal>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default RecentTrades;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/RecentTrades.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import NewTrade from \"./NewTrade\";\r\n// import Modal from \"./Modal\";\r\n// import \"./styles/recentTrades.css\";\r\n// import { showSuccessModal, showUnsuccessModal } from \"./Utility\";\r\n\r\n// const RecentTrades = ({ formatDate }) => {\r\n//   const [recentTrades, setRecentTrades] = useState([]);\r\n//   const [selectedTrade, setSelectedTrade] = useState(null);\r\n//   const [editedTrade, setEditedTrade] = useState(null);\r\n//   const [showNewTradeModal, setShowNewTradeModal] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchRecentTrades();\r\n//   }, []);\r\n\r\n//   const fetchRecentTrades = async () => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:8000/trades/\");\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to fetch recent trades\");\r\n//       }\r\n//       const data = await response.json();\r\n//       setRecentTrades(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching recent trades:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleNewTradeClick = () => {\r\n//     setShowNewTradeModal(true);\r\n//   };\r\n\r\n//   const handleRowClick = (trade) => {\r\n//     setSelectedTrade(trade);\r\n//     setEditedTrade({ ...trade });\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setSelectedTrade(null);\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setEditedTrade((prevState) => ({\r\n//       ...prevState,\r\n//       [name]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const handleFormSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8000/trades/${editedTrade.trade_id}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify(editedTrade),\r\n//         }\r\n//       );\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to update trade data\");\r\n//       }\r\n//       handleCloseModal();\r\n//       fetchRecentTrades();\r\n//       showSuccessModal();\r\n//     } catch (error) {\r\n//       console.error(\"Error updating trade data:\", error);\r\n//       handleCloseModal();\r\n//       showUnsuccessModal(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"trades-container\">\r\n//       <div className=\"header-card\">\r\n//         <p className=\"recent\">Trades</p>\r\n//         <i\r\n//           className=\"fa-solid fa-plus\"\r\n//           id=\"new-btn\"\r\n//           onClick={handleNewTradeClick}\r\n//         ></i>\r\n//       </div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>ID</th>\r\n//             <th>Options</th>\r\n//             <th>Trade Date</th>\r\n//             <th>Settle Date</th>\r\n//             <th>Price</th>\r\n//             <th>QTY</th>\r\n//             <th>Principle</th>\r\n//             <th>Exit</th>\r\n//             <th>%</th>\r\n//             <th>Net Amount</th>\r\n//             <th>P/L</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {recentTrades.map((trade) => (\r\n//             <tr key={trade.id} onClick={() => handleRowClick(trade)}>\r\n//               <td>{trade.id}</td>\r\n//               <td>\r\n//                 {trade.symbol} {formatDate(trade.exp_date)} {trade.option_type}{\" \"}\r\n//                 ${trade.strike_price}\r\n//               </td>\r\n//               <td>{formatDate(trade.entry_date)}</td>\r\n//               <td>{trade.close_date ? formatDate(trade.close_date) : \"\"}</td>\r\n//               <td>${trade.entry_price}</td>\r\n//               <td>{trade.contracts}</td>\r\n//               <td>${(trade.entry_price * trade.contracts * 100).toFixed(2)}</td>\r\n//               <td>{trade.exit_price ? `$${trade.exit_price}` : \"\"}</td>\r\n//               <td>\r\n//                 {trade.exit_price && trade.entry_price\r\n//                   ? `${(\r\n//                       ((trade.exit_price - trade.entry_price) /\r\n//                         trade.entry_price) *\r\n//                       100\r\n//                     ).toFixed(2)}%`\r\n//                   : \"\"}\r\n//               </td>\r\n//               <td>${(trade.exit_price * trade.contracts * 100).toFixed(2)}</td>\r\n//               <td>${(trade.profit_loss * 100 * trade.contracts).toFixed(2)}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {showNewTradeModal && (\r\n//         <NewTrade\r\n//           setShowModal={setShowNewTradeModal}\r\n//           fetchRecentTrades={fetchRecentTrades}\r\n//         />\r\n//       )}\r\n//       {selectedTrade && (\r\n//         <Modal isOpen={true} onClose={handleCloseModal}>\r\n//           <div className=\"header-card\">\r\n//             <h1>{selectedTrade.symbol}</h1>\r\n//           </div>\r\n//           <form className=\"trade-update-form\" onSubmit={handleFormSubmit}>\r\n//             <label htmlFor=\"symbol\">Symbol:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"symbol\"\r\n//               value={editedTrade.symbol}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label htmlFor=\"option_type\">Option Type:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"option_type\"\r\n//               value={editedTrade.option_type}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label htmlFor=\"strike_price\">Strike Price:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"strike_price\"\r\n//               value={editedTrade.strike_price}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label htmlFor=\"entry_price\">Entry Price:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"entry_price\"\r\n//               value={editedTrade.entry_price}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label htmlFor=\"exit_price\">Exit Price:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"exit_price\"\r\n//               placeholder=\"Exit trade before entering exit price\"\r\n//               value={editedTrade.exit_price || \"\"}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label htmlFor=\"contracts\">Contracts:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"contracts\"\r\n//               value={editedTrade.contracts}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label htmlFor=\"close_date\">Close Date:</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               name=\"close_date\"\r\n//               value={editedTrade.close_date || \"\"}\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <input type=\"submit\" value=\"Submit\" />\r\n//           </form>\r\n//         </Modal>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RecentTrades;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import NewTrade from \"./NewTrade\";\r\n// // import Modal from \"./Modal\";\r\n// // import \"./styles/recentTrades.css\";\r\n// // import { showSuccessModal, showUnsuccessModal } from \"./Utility\"; // Import utility functions\r\n\r\n// // const RecentTrades = ({ formatDate }) => {\r\n// //   const [recentTrades, setRecentTrades] = useState([]);\r\n// //   const [selectedTrade, setSelectedTrade] = useState(null);\r\n// //   const [editedTrade, setEditedTrade] = useState(null);\r\n// //   const [showNewTradeModal, setShowNewTradeModal] = useState(false);\r\n\r\n// //   useEffect(() => {\r\n// //     // Fetch recent trades when the component mounts\r\n// //     fetchRecentTrades();\r\n// //   }, []);\r\n\r\n// //   const fetchRecentTrades = async () => {\r\n// //     try {\r\n// //       const response = await fetch(\"http://localhost:8000/trades/\");\r\n// //       if (!response.ok) {\r\n// //         throw new Error(\"Failed to fetch recent trades\");\r\n// //       }\r\n// //       const data = await response.json();\r\n// //       setRecentTrades(data);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching recent trades:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleNewTradeClick = () => {\r\n// //     setShowNewTradeModal(true);\r\n// //   };\r\n\r\n// //   const handleRowClick = (trade) => {\r\n// //     setSelectedTrade(trade);\r\n// //     setEditedTrade({ ...trade });\r\n// //   };\r\n\r\n// //   const handleCloseModal = () => {\r\n// //     setSelectedTrade(null);\r\n// //   };\r\n\r\n// //   const handleInputChange = (e) => {\r\n// //     const { name, value } = e.target;\r\n// //     setEditedTrade((prevState) => ({\r\n// //       ...prevState,\r\n// //       [name]: value,\r\n// //     }));\r\n// //   };\r\n\r\n// //   const handleFormSubmit = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       const response = await fetch(\r\n// //         `http://localhost:8000/trades/${editedTrade.trade_id}`,\r\n// //         {\r\n// //           method: \"PUT\",\r\n// //           headers: {\r\n// //             \"Content-Type\": \"application/json\",\r\n// //           },\r\n// //           body: JSON.stringify(editedTrade),\r\n// //         }\r\n// //       );\r\n// //       if (!response.ok) {\r\n// //         throw new Error(\"Failed to update trade data\");\r\n// //       }\r\n// //       handleCloseModal();\r\n// //       fetchRecentTrades();\r\n// //       showSuccessModal();\r\n// //     } catch (error) {\r\n// //       console.error(\"Error updating trade data:\", error);\r\n// //       handleCloseModal();\r\n// //       showUnsuccessModal(error.message);\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"trades-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p className=\"recent\">Trades</p>\r\n// //         <i\r\n// //           className=\"fa-solid fa-plus\"\r\n// //           id=\"new-btn\"\r\n// //           onClick={handleNewTradeClick}\r\n// //         ></i>\r\n// //       </div>\r\n// //       <table>\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>ID</th>\r\n// //             <th>Options</th>\r\n// //             <th>Trade Date</th>\r\n// //             <th>Settle Date</th>\r\n// //             <th>Price</th>\r\n// //             <th>QTY</th>\r\n// //             <th>Principle</th>\r\n// //             <th>Exit</th>\r\n// //             <th> % </th>\r\n// //             <th>Net Amount</th>\r\n// //             <th>P/L</th>\r\n// //           </tr>\r\n// //         </thead>\r\n\r\n// //         <tbody>\r\n// //           {recentTrades.slice(-15).map((trade) => (\r\n// //             <tr key={trade.trade_id} onClick={() => handleRowClick(trade)}>\r\n// //               <td>{trade.trade_id}</td>\r\n// //               <td>\r\n// //                 {trade.symbol} {formatDate(trade.expiration_date)}{\" \"}\r\n// //                 {trade.option_type} ${trade.strike_price}\r\n// //               </td>\r\n// //               <td>{formatDate(trade.open_date)}</td>\r\n// //               <td>{trade.close_date ? formatDate(trade.close_date) : \"\"}</td>\r\n// //               <td>${trade.entry_price}</td>\r\n// //               <td>{trade.contracts}</td>\r\n// //               <td>\r\n// //                 ${(trade.entry_price * trade.contracts * 100).toFixed(2)}\r\n// //               </td>{\" \"}\r\n// //               <td>{trade.exit_price ? `$${trade.exit_price}` : \"\"}</td>\r\n// //               <td>\r\n// //                 {trade.exit_price && trade.entry_price\r\n// //                   ? `${(\r\n// //                       ((trade.exit_price - trade.entry_price) /\r\n// //                         trade.entry_price) *\r\n// //                       100\r\n// //                     ).toFixed(2)}%`\r\n// //                   : \"\"}\r\n// //               </td>{\" \"}\r\n// //               <td>${(trade.exit_price * trade.contracts * 100).toFixed(2)}</td>{\" \"}\r\n// //               <td>${(trade.profit_loss * 100 * trade.contracts).toFixed(2)}</td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {showNewTradeModal && (\r\n// //         <NewTrade\r\n// //           setShowModal={setShowNewTradeModal}\r\n// //           fetchRecentTrades={fetchRecentTrades}\r\n// //         />\r\n// //       )}\r\n// //       {selectedTrade && (\r\n// //         <Modal isOpen={true} onClose={handleCloseModal}>\r\n// //           <div className=\"header-card\">\r\n// //             <h1>{selectedTrade.symbol}</h1>\r\n// //           </div>\r\n// //           <form className=\"trade-update-form\" onSubmit={handleFormSubmit}>\r\n// //             <label htmlFor=\"option_symbol\">Option Symbol:</label>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               name=\"option_symbol\"\r\n// //               value={editedTrade.symbol}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label htmlFor=\"option_type\">Option Type:</label>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               name=\"option_type\"\r\n// //               value={editedTrade.option_type}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label htmlFor=\"strike_price\">Strike Price:</label>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               name=\"strike_price\"\r\n// //               value={editedTrade.strike_price}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label htmlFor=\"entry_price\">Entry Price:</label>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               name=\"entry_price\"\r\n// //               value={editedTrade.entry_price}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label htmlFor=\"exit_price\">Exit Price:</label>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               name=\"exit_price\"\r\n// //               placeholder=\"Exit trade before entering exit price\"\r\n// //               value={editedTrade.exit_price || \"\"}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label htmlFor=\"contracts\">Contracts:</label>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               name=\"contracts\"\r\n// //               value={editedTrade.contracts}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label htmlFor=\"close_date\">Close Date:</label>\r\n// //             <input\r\n// //               type=\"date\"\r\n// //               name=\"close_date\"\r\n// //               value={editedTrade.close_date || \"\"}\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <input type=\"submit\" value=\"Submit\" />\r\n// //           </form>\r\n// //         </Modal>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default RecentTrades;\r\n"],"mappings},"metadata":{},"sourceType":"module"}
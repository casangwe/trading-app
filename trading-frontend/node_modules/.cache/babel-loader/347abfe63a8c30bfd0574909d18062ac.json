{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { fetchTrades } from \"../api/TradesAPI\";\n// import { getCash } from \"../api/CashApi\";\n// import { performAnalysis } from \"../analysis/AnalysisGet\";\n// import {\n//   Line,\n//   XAxis,\n//   Tooltip,\n//   ResponsiveContainer,\n//   ComposedChart,\n//   YAxis,\n// } from \"recharts\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const EQTCurve = () => {\n//   const [chartData, setChartData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [tradeSummary, setTradeSummary] = useState(null);\n\n//   useEffect(() => {\n//     const fetchAndAnalyzeData = async () => {\n//       try {\n//         const cashData = await getCash();\n//         const trades = await fetchTrades();\n\n//         if (cashData && trades && trades.length > 0) {\n//           const startingEquity = parseFloat(cashData.initial_cash || 0);\n//           const formattedData = formatChartData(\n//             trades,\n//             startingEquity,\n//             cashData\n//           );\n//           setChartData(formattedData);\n\n//           // Perform analysis to get summary metrics\n//           const analysisResults = await performAnalysis();\n//           const roi = (\n//             ((formattedData[formattedData.length - 1].equity - startingEquity) /\n//               startingEquity) *\n//             100\n//           ).toFixed(2);\n\n//           setTradeSummary({\n//             totalTrades: analysisResults.numberOfTrades,\n//             roi,\n//             sharpeRatio: analysisResults.sharpeRatio.toFixed(2),\n//           });\n//         } else {\n//           setError(\"No trade or cash data available\");\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching trade or cash data\");\n//         console.error(\"Error:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchAndAnalyzeData();\n//   }, []);\n\n//   const formatChartData = (trades, startingEquity, cashData) => {\n//     let cumulativeEquity = startingEquity;\n//     const idealIncrement =\n//       (startingEquity * 3 - startingEquity) / trades.length;\n\n//     const sortedTrades = trades.sort(\n//       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n//     );\n\n//     const chartData = [\n//       {\n//         date: formatDate(cashData.entry_date),\n//         equity: startingEquity,\n//         idealEquity: startingEquity,\n//       },\n//     ];\n\n//     sortedTrades.forEach((trade, index) => {\n//       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n//       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n//       chartData.push({\n//         date: formatDate(trade.close_date),\n//         equity: cumulativeEquity,\n//         idealEquity: idealEquity,\n//       });\n//     });\n\n//     return chartData;\n//   };\n\n//   return (\n//     <div className=\"equity-curve-chart-container\">\n//       {/* Summary Section for Trade Analysis */}\n//       <div className=\"summary-section\">\n//         <p className=\"equity-summary-total-trades\">\n//           <span className=\"trade-count\">\n//             {tradeSummary ? tradeSummary.totalTrades : \"...\"}\n//           </span>\n//           <span className=\"trade-label\"> Trades</span>\n//         </p>\n\n//         <p className=\"equity-summary-roi\">\n//           {tradeSummary ? `${tradeSummary.roi}%` : \"%...\"}\n//         </p>\n//         <p className=\"equity-summary-sharpe-ratio\">\n//           {tradeSummary ? tradeSummary.sharpeRatio : \"Sharpe Ratio...\"}\n//         </p>\n//       </div>\n\n//       {loading ? (\n//         <div>Loading...</div>\n//       ) : error ? (\n//         <div>{error}</div>\n//       ) : (\n//         <ResponsiveContainer width=\"100%\" height={300}>\n//           <ComposedChart data={chartData}>\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n//             <YAxis hide={true} />\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { date, equity } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{formatCash(equity)}</p>\n//                       <p className=\"trade-date\">{date}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"idealEquity\"\n//               stroke=\"#dddddd\"\n//               strokeWidth={2}\n//               dot={false}\n//               name=\"Ideal Equity\"\n//             />\n\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"equity\"\n//               stroke=\"#4A90E2\"\n//               strokeWidth={2}\n//               dot={false}\n//               name=\"Equity Curve\"\n//             />\n//           </ComposedChart>\n//         </ResponsiveContainer>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EQTCurve;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTrades } from \"../api/TradesAPI\";\n// // import { getCash } from \"../api/CashApi\";\n// // import { performAnalysis } from \"../analysis/AnalysisGet\";\n// // import {\n// //   Line,\n// //   XAxis,\n// //   Tooltip,\n// //   ResponsiveContainer,\n// //   ComposedChart,\n// //   YAxis,\n// // } from \"recharts\";\n// // import { formatCash, formatDate } from \"../func/functions\";\n\n// // const EQTCurve = () => {\n// //   const [chartData, setChartData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [tradeSummary, setTradeSummary] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchAndAnalyzeData = async () => {\n// //       try {\n// //         const cashData = await getCash();\n// //         const trades = await fetchTrades();\n\n// //         if (cashData && trades && trades.length > 0) {\n// //           const startingEquity = parseFloat(cashData.initial_cash || 0);\n// //           const formattedData = formatChartData(\n// //             trades,\n// //             startingEquity,\n// //             cashData\n// //           );\n// //           setChartData(formattedData);\n\n// //           // Perform analysis to get summary metrics\n// //           const analysisResults = await performAnalysis();\n// //           setTradeSummary({\n// //             initialCash: startingEquity,\n// //             totalTrades: analysisResults.numberOfTrades,\n// //             winRate: analysisResults.winRate.toFixed(2),\n// //             sharpeRatio: analysisResults.sharpeRatio.toFixed(2),\n// //           });\n// //         } else {\n// //           setError(\"No trade or cash data available\");\n// //         }\n// //       } catch (error) {\n// //         setError(\"Error fetching trade or cash data\");\n// //         console.error(\"Error:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchAndAnalyzeData();\n// //   }, []);\n\n// //   const formatChartData = (trades, startingEquity, cashData) => {\n// //     let cumulativeEquity = startingEquity;\n// //     const idealIncrement =\n// //       (startingEquity * 3 - startingEquity) / trades.length;\n\n// //     const sortedTrades = trades.sort(\n// //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n// //     );\n\n// //     const chartData = [\n// //       {\n// //         date: formatDate(cashData.entry_date),\n// //         equity: startingEquity,\n// //         idealEquity: startingEquity,\n// //       },\n// //     ];\n\n// //     sortedTrades.forEach((trade, index) => {\n// //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n// //       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n// //       chartData.push({\n// //         date: formatDate(trade.close_date),\n// //         equity: cumulativeEquity,\n// //         idealEquity: idealEquity,\n// //       });\n// //     });\n\n// //     return chartData;\n// //   };\n\n// //   return (\n// //     <div className=\"equity-curve-chart-container\">\n// //       {/* Summary Section for Trade Analysis */}\n// //       <div className=\"summary-section\">\n// //         <p className=\"equity-summary-initial-cash\">\n// //           Initial Cash: {formatCash(tradeSummary?.initialCash || 0)}\n// //         </p>\n// //         <p className=\"equity-summary-total-trades\">\n// //           Trades: {tradeSummary ? tradeSummary.totalTrades : \"Loading...\"}\n// //         </p>\n// //         <p className=\"equity-summary-win-rate\">\n// //           Win Rate: {tradeSummary ? `${tradeSummary.winRate}%` : \"Loading...\"}\n// //         </p>\n// //         <p className=\"equity-summary-sharpe-ratio\">\n// //           Sharpe Ratio: {tradeSummary ? tradeSummary.sharpeRatio : \"Loading...\"}\n// //         </p>\n// //       </div>\n\n// //       {loading ? (\n// //         <div>Loading...</div>\n// //       ) : error ? (\n// //         <div>{error}</div>\n// //       ) : (\n// //         <ResponsiveContainer width=\"100%\" height={400}>\n// //           <ComposedChart data={chartData}>\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// //             <YAxis hide={true} />\n\n// //             <Tooltip\n// //               cursor={false}\n// //               content={({ payload }) => {\n// //                 if (payload && payload.length) {\n// //                   const { date, equity } = payload[0].payload;\n// //                   return (\n// //                     <div className=\"tooltip-content\">\n// //                       <p>{formatCash(equity)}</p>\n// //                       <p className=\"trade-date\">{date}</p>\n// //                     </div>\n// //                   );\n// //                 }\n// //                 return null;\n// //               }}\n// //             />\n\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"idealEquity\"\n// //               stroke=\"#dddddd\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //               name=\"Ideal Equity\"\n// //             />\n\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"equity\"\n// //               stroke=\"#4A90E2\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //               name=\"Equity Curve\"\n// //             />\n// //           </ComposedChart>\n// //         </ResponsiveContainer>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EQTCurve;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTrades } from \"../api/TradesAPI\";\n// // import { getCash } from \"../api/CashApi\";\n// // import {\n// //   Line,\n// //   XAxis,\n// //   Tooltip,\n// //   ResponsiveContainer,\n// //   ComposedChart,\n// //   YAxis,\n// // } from \"recharts\";\n// // import { formatCash, formatDate } from \"../func/functions\";\n\n// // const EQTCurve = () => {\n// //   const [chartData, setChartData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [tradeSummary, setTradeSummary] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchAndFormatData = async () => {\n// //       try {\n// //         const cashData = await getCash();\n// //         const trades = await fetchTrades();\n\n// //         if (cashData && trades && trades.length > 0) {\n// //           const startingEquity = parseFloat(cashData.initial_cash || 0);\n// //           const formattedData = formatChartData(\n// //             trades,\n// //             startingEquity,\n// //             cashData\n// //           );\n// //           setChartData(formattedData);\n\n// //           // Set trade summary data\n// //           setTradeSummary({\n// //             initialCash: startingEquity,\n// //             totalTrades: trades.length,\n// //             finalEquity: formattedData[formattedData.length - 1].equity,\n// //           });\n// //         } else {\n// //           setError(\"No trade or cash data available\");\n// //         }\n// //       } catch (error) {\n// //         setError(\"Error fetching trade or cash data\");\n// //         console.error(\"Error:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchAndFormatData();\n// //   }, []);\n\n// //   const formatChartData = (trades, startingEquity, cashData) => {\n// //     let cumulativeEquity = startingEquity;\n// //     const idealIncrement =\n// //       (startingEquity * 3 - startingEquity) / trades.length;\n\n// //     const sortedTrades = trades.sort(\n// //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n// //     );\n\n// //     const chartData = [\n// //       {\n// //         date: formatDate(cashData.entry_date),\n// //         equity: startingEquity,\n// //         idealEquity: startingEquity,\n// //       },\n// //     ];\n\n// //     sortedTrades.forEach((trade, index) => {\n// //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n// //       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n// //       chartData.push({\n// //         date: formatDate(trade.close_date),\n// //         equity: cumulativeEquity,\n// //         idealEquity: idealEquity,\n// //       });\n// //     });\n\n// //     return chartData;\n// //   };\n\n// //   return (\n// //     <div className=\"equity-curve-chart-container\">\n// //       <div className=\"summary-section\">\n// //         <p className=\"equity-summary-initial-cash\">\n// //           {formatCash(tradeSummary?.initialCash || 0)}\n// //         </p>\n// //         <p className=\"equity-summary-total-trades\">\n// //           {tradeSummary ? `Trades: ${tradeSummary.totalTrades}` : \"Loading...\"}\n// //         </p>\n// //         <p className=\"equity-summary-final-equity\">\n// //           {tradeSummary\n// //             ? `Final Equity: ${formatCash(tradeSummary.finalEquity || 0)}`\n// //             : \"Loading...\"}\n// //         </p>\n// //       </div>\n\n// //       {loading ? (\n// //         <div>Loading...</div>\n// //       ) : error ? (\n// //         <div>{error}</div>\n// //       ) : (\n// //         <ResponsiveContainer width=\"100%\" height={400}>\n// //           <ComposedChart data={chartData}>\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// //             <YAxis hide={true} />\n\n// //             <Tooltip\n// //               cursor={false}\n// //               content={({ payload }) => {\n// //                 if (payload && payload.length) {\n// //                   const { date, equity } = payload[0].payload;\n// //                   return (\n// //                     <div className=\"tooltip-content\">\n// //                       <p>{formatCash(equity)}</p>\n// //                       <p className=\"trade-date\">{date}</p>\n// //                     </div>\n// //                   );\n// //                 }\n// //                 return null;\n// //               }}\n// //             />\n\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"idealEquity\"\n// //               stroke=\"#dddddd\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //               name=\"Ideal Equity\"\n// //             />\n\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"equity\"\n// //               stroke=\"#4A90E2\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //               name=\"Equity Curve\"\n// //             />\n// //           </ComposedChart>\n// //         </ResponsiveContainer>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EQTCurve;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/trades/EQTcurve.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTrades } from \"../api/TradesAPI\";\r\n// import { getCash } from \"../api/CashApi\";\r\n// import { performAnalysis } from \"../analysis/AnalysisGet\";\r\n// import {\r\n//   Line,\r\n//   XAxis,\r\n//   Tooltip,\r\n//   ResponsiveContainer,\r\n//   ComposedChart,\r\n//   YAxis,\r\n// } from \"recharts\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const EQTCurve = () => {\r\n//   const [chartData, setChartData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [tradeSummary, setTradeSummary] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAndAnalyzeData = async () => {\r\n//       try {\r\n//         const cashData = await getCash();\r\n//         const trades = await fetchTrades();\r\n\r\n//         if (cashData && trades && trades.length > 0) {\r\n//           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n//           const formattedData = formatChartData(\r\n//             trades,\r\n//             startingEquity,\r\n//             cashData\r\n//           );\r\n//           setChartData(formattedData);\r\n\r\n//           // Perform analysis to get summary metrics\r\n//           const analysisResults = await performAnalysis();\r\n//           const roi = (\r\n//             ((formattedData[formattedData.length - 1].equity - startingEquity) /\r\n//               startingEquity) *\r\n//             100\r\n//           ).toFixed(2);\r\n\r\n//           setTradeSummary({\r\n//             totalTrades: analysisResults.numberOfTrades,\r\n//             roi,\r\n//             sharpeRatio: analysisResults.sharpeRatio.toFixed(2),\r\n//           });\r\n//         } else {\r\n//           setError(\"No trade or cash data available\");\r\n//         }\r\n//       } catch (error) {\r\n//         setError(\"Error fetching trade or cash data\");\r\n//         console.error(\"Error:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchAndAnalyzeData();\r\n//   }, []);\r\n\r\n//   const formatChartData = (trades, startingEquity, cashData) => {\r\n//     let cumulativeEquity = startingEquity;\r\n//     const idealIncrement =\r\n//       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n//     const sortedTrades = trades.sort(\r\n//       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n//     );\r\n\r\n//     const chartData = [\r\n//       {\r\n//         date: formatDate(cashData.entry_date),\r\n//         equity: startingEquity,\r\n//         idealEquity: startingEquity,\r\n//       },\r\n//     ];\r\n\r\n//     sortedTrades.forEach((trade, index) => {\r\n//       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n//       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n//       chartData.push({\r\n//         date: formatDate(trade.close_date),\r\n//         equity: cumulativeEquity,\r\n//         idealEquity: idealEquity,\r\n//       });\r\n//     });\r\n\r\n//     return chartData;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"equity-curve-chart-container\">\r\n//       {/* Summary Section for Trade Analysis */}\r\n//       <div className=\"summary-section\">\r\n//         <p className=\"equity-summary-total-trades\">\r\n//           <span className=\"trade-count\">\r\n//             {tradeSummary ? tradeSummary.totalTrades : \"...\"}\r\n//           </span>\r\n//           <span className=\"trade-label\"> Trades</span>\r\n//         </p>\r\n\r\n//         <p className=\"equity-summary-roi\">\r\n//           {tradeSummary ? `${tradeSummary.roi}%` : \"%...\"}\r\n//         </p>\r\n//         <p className=\"equity-summary-sharpe-ratio\">\r\n//           {tradeSummary ? tradeSummary.sharpeRatio : \"Sharpe Ratio...\"}\r\n//         </p>\r\n//       </div>\r\n\r\n//       {loading ? (\r\n//         <div>Loading...</div>\r\n//       ) : error ? (\r\n//         <div>{error}</div>\r\n//       ) : (\r\n//         <ResponsiveContainer width=\"100%\" height={300}>\r\n//           <ComposedChart data={chartData}>\r\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n//             <YAxis hide={true} />\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { date, equity } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{formatCash(equity)}</p>\r\n//                       <p className=\"trade-date\">{date}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"idealEquity\"\r\n//               stroke=\"#dddddd\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//               name=\"Ideal Equity\"\r\n//             />\r\n\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"equity\"\r\n//               stroke=\"#4A90E2\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//               name=\"Equity Curve\"\r\n//             />\r\n//           </ComposedChart>\r\n//         </ResponsiveContainer>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EQTCurve;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // import { getCash } from \"../api/CashApi\";\r\n// // import { performAnalysis } from \"../analysis/AnalysisGet\";\r\n// // import {\r\n// //   Line,\r\n// //   XAxis,\r\n// //   Tooltip,\r\n// //   ResponsiveContainer,\r\n// //   ComposedChart,\r\n// //   YAxis,\r\n// // } from \"recharts\";\r\n// // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // const EQTCurve = () => {\r\n// //   const [chartData, setChartData] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [tradeSummary, setTradeSummary] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchAndAnalyzeData = async () => {\r\n// //       try {\r\n// //         const cashData = await getCash();\r\n// //         const trades = await fetchTrades();\r\n\r\n// //         if (cashData && trades && trades.length > 0) {\r\n// //           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n// //           const formattedData = formatChartData(\r\n// //             trades,\r\n// //             startingEquity,\r\n// //             cashData\r\n// //           );\r\n// //           setChartData(formattedData);\r\n\r\n// //           // Perform analysis to get summary metrics\r\n// //           const analysisResults = await performAnalysis();\r\n// //           setTradeSummary({\r\n// //             initialCash: startingEquity,\r\n// //             totalTrades: analysisResults.numberOfTrades,\r\n// //             winRate: analysisResults.winRate.toFixed(2),\r\n// //             sharpeRatio: analysisResults.sharpeRatio.toFixed(2),\r\n// //           });\r\n// //         } else {\r\n// //           setError(\"No trade or cash data available\");\r\n// //         }\r\n// //       } catch (error) {\r\n// //         setError(\"Error fetching trade or cash data\");\r\n// //         console.error(\"Error:\", error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchAndAnalyzeData();\r\n// //   }, []);\r\n\r\n// //   const formatChartData = (trades, startingEquity, cashData) => {\r\n// //     let cumulativeEquity = startingEquity;\r\n// //     const idealIncrement =\r\n// //       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n// //     const sortedTrades = trades.sort(\r\n// //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n// //     );\r\n\r\n// //     const chartData = [\r\n// //       {\r\n// //         date: formatDate(cashData.entry_date),\r\n// //         equity: startingEquity,\r\n// //         idealEquity: startingEquity,\r\n// //       },\r\n// //     ];\r\n\r\n// //     sortedTrades.forEach((trade, index) => {\r\n// //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n// //       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n// //       chartData.push({\r\n// //         date: formatDate(trade.close_date),\r\n// //         equity: cumulativeEquity,\r\n// //         idealEquity: idealEquity,\r\n// //       });\r\n// //     });\r\n\r\n// //     return chartData;\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"equity-curve-chart-container\">\r\n// //       {/* Summary Section for Trade Analysis */}\r\n// //       <div className=\"summary-section\">\r\n// //         <p className=\"equity-summary-initial-cash\">\r\n// //           Initial Cash: {formatCash(tradeSummary?.initialCash || 0)}\r\n// //         </p>\r\n// //         <p className=\"equity-summary-total-trades\">\r\n// //           Trades: {tradeSummary ? tradeSummary.totalTrades : \"Loading...\"}\r\n// //         </p>\r\n// //         <p className=\"equity-summary-win-rate\">\r\n// //           Win Rate: {tradeSummary ? `${tradeSummary.winRate}%` : \"Loading...\"}\r\n// //         </p>\r\n// //         <p className=\"equity-summary-sharpe-ratio\">\r\n// //           Sharpe Ratio: {tradeSummary ? tradeSummary.sharpeRatio : \"Loading...\"}\r\n// //         </p>\r\n// //       </div>\r\n\r\n// //       {loading ? (\r\n// //         <div>Loading...</div>\r\n// //       ) : error ? (\r\n// //         <div>{error}</div>\r\n// //       ) : (\r\n// //         <ResponsiveContainer width=\"100%\" height={400}>\r\n// //           <ComposedChart data={chartData}>\r\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// //             <YAxis hide={true} />\r\n\r\n// //             <Tooltip\r\n// //               cursor={false}\r\n// //               content={({ payload }) => {\r\n// //                 if (payload && payload.length) {\r\n// //                   const { date, equity } = payload[0].payload;\r\n// //                   return (\r\n// //                     <div className=\"tooltip-content\">\r\n// //                       <p>{formatCash(equity)}</p>\r\n// //                       <p className=\"trade-date\">{date}</p>\r\n// //                     </div>\r\n// //                   );\r\n// //                 }\r\n// //                 return null;\r\n// //               }}\r\n// //             />\r\n\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"idealEquity\"\r\n// //               stroke=\"#dddddd\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //               name=\"Ideal Equity\"\r\n// //             />\r\n\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"equity\"\r\n// //               stroke=\"#4A90E2\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //               name=\"Equity Curve\"\r\n// //             />\r\n// //           </ComposedChart>\r\n// //         </ResponsiveContainer>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default EQTCurve;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // import { getCash } from \"../api/CashApi\";\r\n// // import {\r\n// //   Line,\r\n// //   XAxis,\r\n// //   Tooltip,\r\n// //   ResponsiveContainer,\r\n// //   ComposedChart,\r\n// //   YAxis,\r\n// // } from \"recharts\";\r\n// // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // const EQTCurve = () => {\r\n// //   const [chartData, setChartData] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [tradeSummary, setTradeSummary] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchAndFormatData = async () => {\r\n// //       try {\r\n// //         const cashData = await getCash();\r\n// //         const trades = await fetchTrades();\r\n\r\n// //         if (cashData && trades && trades.length > 0) {\r\n// //           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n// //           const formattedData = formatChartData(\r\n// //             trades,\r\n// //             startingEquity,\r\n// //             cashData\r\n// //           );\r\n// //           setChartData(formattedData);\r\n\r\n// //           // Set trade summary data\r\n// //           setTradeSummary({\r\n// //             initialCash: startingEquity,\r\n// //             totalTrades: trades.length,\r\n// //             finalEquity: formattedData[formattedData.length - 1].equity,\r\n// //           });\r\n// //         } else {\r\n// //           setError(\"No trade or cash data available\");\r\n// //         }\r\n// //       } catch (error) {\r\n// //         setError(\"Error fetching trade or cash data\");\r\n// //         console.error(\"Error:\", error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchAndFormatData();\r\n// //   }, []);\r\n\r\n// //   const formatChartData = (trades, startingEquity, cashData) => {\r\n// //     let cumulativeEquity = startingEquity;\r\n// //     const idealIncrement =\r\n// //       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n// //     const sortedTrades = trades.sort(\r\n// //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n// //     );\r\n\r\n// //     const chartData = [\r\n// //       {\r\n// //         date: formatDate(cashData.entry_date),\r\n// //         equity: startingEquity,\r\n// //         idealEquity: startingEquity,\r\n// //       },\r\n// //     ];\r\n\r\n// //     sortedTrades.forEach((trade, index) => {\r\n// //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n// //       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n// //       chartData.push({\r\n// //         date: formatDate(trade.close_date),\r\n// //         equity: cumulativeEquity,\r\n// //         idealEquity: idealEquity,\r\n// //       });\r\n// //     });\r\n\r\n// //     return chartData;\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"equity-curve-chart-container\">\r\n// //       <div className=\"summary-section\">\r\n// //         <p className=\"equity-summary-initial-cash\">\r\n// //           {formatCash(tradeSummary?.initialCash || 0)}\r\n// //         </p>\r\n// //         <p className=\"equity-summary-total-trades\">\r\n// //           {tradeSummary ? `Trades: ${tradeSummary.totalTrades}` : \"Loading...\"}\r\n// //         </p>\r\n// //         <p className=\"equity-summary-final-equity\">\r\n// //           {tradeSummary\r\n// //             ? `Final Equity: ${formatCash(tradeSummary.finalEquity || 0)}`\r\n// //             : \"Loading...\"}\r\n// //         </p>\r\n// //       </div>\r\n\r\n// //       {loading ? (\r\n// //         <div>Loading...</div>\r\n// //       ) : error ? (\r\n// //         <div>{error}</div>\r\n// //       ) : (\r\n// //         <ResponsiveContainer width=\"100%\" height={400}>\r\n// //           <ComposedChart data={chartData}>\r\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// //             <YAxis hide={true} />\r\n\r\n// //             <Tooltip\r\n// //               cursor={false}\r\n// //               content={({ payload }) => {\r\n// //                 if (payload && payload.length) {\r\n// //                   const { date, equity } = payload[0].payload;\r\n// //                   return (\r\n// //                     <div className=\"tooltip-content\">\r\n// //                       <p>{formatCash(equity)}</p>\r\n// //                       <p className=\"trade-date\">{date}</p>\r\n// //                     </div>\r\n// //                   );\r\n// //                 }\r\n// //                 return null;\r\n// //               }}\r\n// //             />\r\n\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"idealEquity\"\r\n// //               stroke=\"#dddddd\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //               name=\"Ideal Equity\"\r\n// //             />\r\n\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"equity\"\r\n// //               stroke=\"#4A90E2\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //               name=\"Equity Curve\"\r\n// //             />\r\n// //           </ComposedChart>\r\n// //         </ResponsiveContainer>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default EQTCurve;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  fetchData\n}) => {\n  const chartRef = useRef(null);\n  const [timePeriod, setTimePeriod] = useState(\"day\");\n  const [topProfitableTrades, setTopProfitableTrades] = useState([]);\n  useEffect(() => {\n    const fetchTopProfitableTrades = () => {\n      fetchData().then(data => setTopProfitableTrades(data)).catch(error => console.error(\"Error fetching top profitable trades:\", error));\n    };\n    fetchTopProfitableTrades();\n  }, [fetchData]);\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n    script.async = true;\n    script.onload = () => {\n      const ctx = chartRef.current.getContext(\"2d\");\n      const myChart = new window.Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: getLabels(timePeriod),\n          datasets: [{\n            data: getData(timePeriod),\n            borderColor: \"green\",\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            borderWidth: 2\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                display: false\n              },\n              min: 0,\n              max: 1000,\n              position: \"center\"\n            },\n            y: {\n              display: false\n            }\n          }\n        }\n      });\n      return () => {\n        myChart.destroy();\n      };\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, [timePeriod, topProfitableTrades]);\n\n  // Function to get labels based on the selected time period\n  const getLabels = period => {\n    if (period === \"day\") {\n      return [\"12AM\", \"3AM\", \"6AM\", \"9AM\", \"12PM\", \"3PM\", \"6PM\", \"9PM\"];\n    } else if (period === \"weeks\") {\n      return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    } else if (period === \"months\") {\n      // Return labels for days of the month (assuming 30 days for simplicity)\n      return Array.from({\n        length: 30\n      }, (_, i) => `Day ${i + 1}`);\n    } else if (period === \"3-months\") {\n      // Return labels for months (3 months)\n      return [\"Month 1\", \"Month 2\", \"Month 3\"];\n    } else if (period === \"YTD\") {\n      // Return labels for months in the year-to-date period (e.g., Jan, Feb, etc.)\n      return [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    } else if (period === \"1-year\") {\n      // Return labels for months of the year (12 months)\n      return [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    } else if (period === \"max\") {\n      // Return labels for years (assuming data for multiple years)\n      return [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\"];\n    }\n  };\n\n  // Function to get data based on the selected time period\n  const getData = period => {\n    const data = [];\n\n    // Filter trades based on the selected time period\n    let filteredTrades = [];\n    if (period === \"day\") {\n      // Filter trades for the last day\n      filteredTrades = topProfitableTrades.filter(trade => {\n        return trade.timestamp >= Date.now() - 24 * 60 * 60 * 1000;\n      });\n    } else if (period === \"weeks\") {\n      // Filter trades for the last week\n      filteredTrades = topProfitableTrades.filter(trade => {\n        return trade.timestamp >= Date.now() - 7 * 24 * 60 * 60 * 1000;\n      });\n    } else if (period === \"months\") {\n      // Filter trades for the last month\n      filteredTrades = topProfitableTrades.filter(trade => {\n        return new Date(trade.timestamp).getMonth() === new Date().getMonth();\n      });\n    } else if (period === \"3-months\") {\n      // Filter trades for the last 3 months\n      const threeMonthsAgo = new Date();\n      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\n      filteredTrades = topProfitableTrades.filter(trade => {\n        return new Date(trade.timestamp) >= threeMonthsAgo;\n      });\n    } else if (period === \"YTD\") {\n      // Filter trades for the year-to-date period\n      filteredTrades = topProfitableTrades.filter(trade => {\n        const tradeDate = new Date(trade.timestamp);\n        return tradeDate.getFullYear() === new Date().getFullYear();\n      });\n    } else if (period === \"1-year\") {\n      // Filter trades for the last year\n      const lastYear = new Date();\n      lastYear.setFullYear(lastYear.getFullYear() - 1);\n      filteredTrades = topProfitableTrades.filter(trade => {\n        return new Date(trade.timestamp) >= lastYear;\n      });\n    } else if (period === \"max\") {\n      // Sort trades based on profit in descending order\n      topProfitableTrades.sort((a, b) => b.profit - a.profit);\n\n      // Consider all trades with profits, without limiting to a specific number\n      filteredTrades = topProfitableTrades;\n    }\n\n    // Calculate profit for each filtered trade and add to the data array\n    filteredTrades.forEach(trade => {\n      data.push(trade.profit);\n    });\n    return data;\n  };\n\n  // Function to handle time period change\n  const handleTimePeriodChange = period => {\n    setTimePeriod(period);\n  };\n  const renderGraphData = () => {\n    if (topProfitableTrades.length === 0) {\n      return []; // Return an empty array if there is no data\n    }\n    return topProfitableTrades.map(trade => ({\n      x: new Date(trade.date).toLocaleString(),\n      y: trade.value\n    }));\n  };\n  const renderCustomDataPoint = data => {\n    // Code for custom data points rendering\n  };\n  const renderTooltipData = data => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, \"Date: \", data.x), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, \"Value: \", data.y));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"days\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"weeks\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"months\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"3-months\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"1-year\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodChange(\"max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n//   useEffect(() => {\n//     // Fetch top profitable trades from API\n//     const fetchTopProfitableTrades = () => {\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\n//         .then((response) => response.json())\n//         .then((data) => setTopProfitableTrades(data))\n//         .catch((error) =>\n//           console.error(\"Error fetching top profitable trades:\", error)\n//         );\n//     };\n\n//     fetchTopProfitableTrades();\n//   }, []); // Fetch data only once on component mount\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\n\n// // Function to get labels based on the selected time period\n// const getLabels = (period) => {\n//   if (period === \"day\") {\n//     return [\"12AM\", \"3AM\", \"6AM\", \"9AM\", \"12PM\", \"3PM\", \"6PM\", \"9PM\"];\n//   } else if (period === \"weeks\") {\n//     return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n//   } else if (period === \"months\") {\n//     // Return labels for days of the month (assuming 30 days for simplicity)\n//     return Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`);\n//   } else if (period === \"3-months\") {\n//     // Return labels for months (3 months)\n//     return [\"Month 1\", \"Month 2\", \"Month 3\"];\n//   } else if (period === \"YTD\") {\n//     // Return labels for months in the year-to-date period (e.g., Jan, Feb, etc.)\n//     return [\n//       \"Jan\",\n//       \"Feb\",\n//       \"Mar\",\n//       \"Apr\",\n//       \"May\",\n//       \"Jun\",\n//       \"Jul\",\n//       \"Aug\",\n//       \"Sep\",\n//       \"Oct\",\n//       \"Nov\",\n//       \"Dec\",\n//     ];\n//   } else if (period === \"1-year\") {\n//     // Return labels for months of the year (12 months)\n//     return [\n//       \"Jan\",\n//       \"Feb\",\n//       \"Mar\",\n//       \"Apr\",\n//       \"May\",\n//       \"Jun\",\n//       \"Jul\",\n//       \"Aug\",\n//       \"Sep\",\n//       \"Oct\",\n//       \"Nov\",\n//       \"Dec\",\n//     ];\n//   } else if (period === \"max\") {\n//     // Return labels for years (assuming data for multiple years)\n//     return [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\"];\n//   }\n// };\n\n// // Function to get data based on the selected time period\n// const getData = (period) => {\n//   const data = [];\n\n//   // Filter trades based on the selected time period\n//   let filteredTrades = [];\n//   if (period === \"day\") {\n//     // Filter trades for the last day\n//     filteredTrades = topProfitableTrades.filter((trade) => {\n//       return trade.timestamp >= Date.now() - 24 * 60 * 60 * 1000;\n//     });\n//   } else if (period === \"weeks\") {\n//     // Filter trades for the last week\n//     filteredTrades = topProfitableTrades.filter((trade) => {\n//       return trade.timestamp >= Date.now() - 7 * 24 * 60 * 60 * 1000;\n//     });\n//   } else if (period === \"months\") {\n//     // Filter trades for the last month\n//     filteredTrades = topProfitableTrades.filter((trade) => {\n//       return new Date(trade.timestamp).getMonth() === new Date().getMonth();\n//     });\n//   } else if (period === \"3-months\") {\n//     // Filter trades for the last 3 months\n//     const threeMonthsAgo = new Date();\n//     threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\n//     filteredTrades = topProfitableTrades.filter((trade) => {\n//       return new Date(trade.timestamp) >= threeMonthsAgo;\n//     });\n//   } else if (period === \"YTD\") {\n//     // Filter trades for the year-to-date period\n//     filteredTrades = topProfitableTrades.filter((trade) => {\n//       const tradeDate = new Date(trade.timestamp);\n//       return tradeDate.getFullYear() === new Date().getFullYear();\n//     });\n//   } else if (period === \"1-year\") {\n//     // Filter trades for the last year\n//     const lastYear = new Date();\n//     lastYear.setFullYear(lastYear.getFullYear() - 1);\n//     filteredTrades = topProfitableTrades.filter((trade) => {\n//       return new Date(trade.timestamp) >= lastYear;\n//     });\n//   } else if (period === \"max\") {\n//     // Sort trades based on profit in descending order\n//     topProfitableTrades.sort((a, b) => b.profit - a.profit);\n\n//     // Consider all trades with profits, without limiting to a specific number\n//     filteredTrades = topProfitableTrades;\n//   }\n\n//   // Calculate profit for each filtered trade and add to the data array\n//   filteredTrades.forEach((trade) => {\n//     data.push(trade.profit);\n//   });\n\n//   return data;\n// };\n\n// // Function to handle time period change\n// const handleTimePeriodChange = (period) => {\n//   setTimePeriod(period);\n// };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"days\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"months\")}\n//         >\n//           1M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\n//         >\n//           3M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\n//         >\n//           YTD\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\n//         >\n//           1Y\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"max\")}\n//         >\n//           MAX\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","fetchData","chartRef","timePeriod","setTimePeriod","topProfitableTrades","setTopProfitableTrades","fetchTopProfitableTrades","then","data","catch","error","console","script","document","createElement","src","async","onload","ctx","current","getContext","myChart","window","Chart","type","labels","getLabels","datasets","getData","borderColor","backgroundColor","borderWidth","options","plugins","legend","display","scales","x","grid","ticks","min","max","position","y","destroy","body","appendChild","removeChild","period","Array","from","length","_","i","filteredTrades","filter","trade","timestamp","Date","now","getMonth","threeMonthsAgo","setMonth","tradeDate","getFullYear","lastYear","setFullYear","sort","a","b","profit","forEach","push","handleTimePeriodChange","renderGraphData","map","date","toLocaleString","value","renderCustomDataPoint","renderTooltipData","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ fetchData }) => {\r\n  const chartRef = useRef(null);\r\n  const [timePeriod, setTimePeriod] = useState(\"day\");\r\n  const [topProfitableTrades, setTopProfitableTrades] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchTopProfitableTrades = () => {\r\n      fetchData()\r\n        .then((data) => setTopProfitableTrades(data))\r\n        .catch((error) =>\r\n          console.error(\"Error fetching top profitable trades:\", error)\r\n        );\r\n    };\r\n\r\n    fetchTopProfitableTrades();\r\n  }, [fetchData]);\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"line\",\r\n        data: {\r\n          labels: getLabels(timePeriod),\r\n          datasets: [\r\n            {\r\n              data: getData(timePeriod),\r\n              borderColor: \"green\",\r\n              backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n              borderWidth: 2,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                display: false,\r\n              },\r\n              min: 0,\r\n              max: 1000,\r\n              position: \"center\",\r\n            },\r\n            y: {\r\n              display: false,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy();\r\n      };\r\n    };\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, [timePeriod, topProfitableTrades]);\r\n\r\n  // Function to get labels based on the selected time period\r\n  const getLabels = (period) => {\r\n    if (period === \"day\") {\r\n      return [\"12AM\", \"3AM\", \"6AM\", \"9AM\", \"12PM\", \"3PM\", \"6PM\", \"9PM\"];\r\n    } else if (period === \"weeks\") {\r\n      return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n    } else if (period === \"months\") {\r\n      // Return labels for days of the month (assuming 30 days for simplicity)\r\n      return Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`);\r\n    } else if (period === \"3-months\") {\r\n      // Return labels for months (3 months)\r\n      return [\"Month 1\", \"Month 2\", \"Month 3\"];\r\n    } else if (period === \"YTD\") {\r\n      // Return labels for months in the year-to-date period (e.g., Jan, Feb, etc.)\r\n      return [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\",\r\n      ];\r\n    } else if (period === \"1-year\") {\r\n      // Return labels for months of the year (12 months)\r\n      return [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\",\r\n      ];\r\n    } else if (period === \"max\") {\r\n      // Return labels for years (assuming data for multiple years)\r\n      return [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\"];\r\n    }\r\n  };\r\n\r\n  // Function to get data based on the selected time period\r\n  const getData = (period) => {\r\n    const data = [];\r\n\r\n    // Filter trades based on the selected time period\r\n    let filteredTrades = [];\r\n    if (period === \"day\") {\r\n      // Filter trades for the last day\r\n      filteredTrades = topProfitableTrades.filter((trade) => {\r\n        return trade.timestamp >= Date.now() - 24 * 60 * 60 * 1000;\r\n      });\r\n    } else if (period === \"weeks\") {\r\n      // Filter trades for the last week\r\n      filteredTrades = topProfitableTrades.filter((trade) => {\r\n        return trade.timestamp >= Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n      });\r\n    } else if (period === \"months\") {\r\n      // Filter trades for the last month\r\n      filteredTrades = topProfitableTrades.filter((trade) => {\r\n        return new Date(trade.timestamp).getMonth() === new Date().getMonth();\r\n      });\r\n    } else if (period === \"3-months\") {\r\n      // Filter trades for the last 3 months\r\n      const threeMonthsAgo = new Date();\r\n      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\r\n      filteredTrades = topProfitableTrades.filter((trade) => {\r\n        return new Date(trade.timestamp) >= threeMonthsAgo;\r\n      });\r\n    } else if (period === \"YTD\") {\r\n      // Filter trades for the year-to-date period\r\n      filteredTrades = topProfitableTrades.filter((trade) => {\r\n        const tradeDate = new Date(trade.timestamp);\r\n        return tradeDate.getFullYear() === new Date().getFullYear();\r\n      });\r\n    } else if (period === \"1-year\") {\r\n      // Filter trades for the last year\r\n      const lastYear = new Date();\r\n      lastYear.setFullYear(lastYear.getFullYear() - 1);\r\n      filteredTrades = topProfitableTrades.filter((trade) => {\r\n        return new Date(trade.timestamp) >= lastYear;\r\n      });\r\n    } else if (period === \"max\") {\r\n      // Sort trades based on profit in descending order\r\n      topProfitableTrades.sort((a, b) => b.profit - a.profit);\r\n\r\n      // Consider all trades with profits, without limiting to a specific number\r\n      filteredTrades = topProfitableTrades;\r\n    }\r\n\r\n    // Calculate profit for each filtered trade and add to the data array\r\n    filteredTrades.forEach((trade) => {\r\n      data.push(trade.profit);\r\n    });\r\n\r\n    return data;\r\n  };\r\n\r\n  // Function to handle time period change\r\n  const handleTimePeriodChange = (period) => {\r\n    setTimePeriod(period);\r\n  };\r\n  const renderGraphData = () => {\r\n    if (topProfitableTrades.length === 0) {\r\n      return []; // Return an empty array if there is no data\r\n    }\r\n\r\n    return topProfitableTrades.map((trade) => ({\r\n      x: new Date(trade.date).toLocaleString(),\r\n      y: trade.value,\r\n    }));\r\n  };\r\n\r\n  const renderCustomDataPoint = (data) => {\r\n    // Code for custom data points rendering\r\n  };\r\n\r\n  const renderTooltipData = (data) => {\r\n    return (\r\n      <div>\r\n        <div>Date: {data.x}</div>\r\n        <div>Value: {data.y}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"days\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"weeks\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"months\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"3-months\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"1-year\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodChange(\"max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top profitable trades from API\r\n//     const fetchTopProfitableTrades = () => {\r\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTopProfitableTrades(data))\r\n//         .catch((error) =>\r\n//           console.error(\"Error fetching top profitable trades:\", error)\r\n//         );\r\n//     };\r\n\r\n//     fetchTopProfitableTrades();\r\n//   }, []); // Fetch data only once on component mount\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\r\n\r\n// // Function to get labels based on the selected time period\r\n// const getLabels = (period) => {\r\n//   if (period === \"day\") {\r\n//     return [\"12AM\", \"3AM\", \"6AM\", \"9AM\", \"12PM\", \"3PM\", \"6PM\", \"9PM\"];\r\n//   } else if (period === \"weeks\") {\r\n//     return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n//   } else if (period === \"months\") {\r\n//     // Return labels for days of the month (assuming 30 days for simplicity)\r\n//     return Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`);\r\n//   } else if (period === \"3-months\") {\r\n//     // Return labels for months (3 months)\r\n//     return [\"Month 1\", \"Month 2\", \"Month 3\"];\r\n//   } else if (period === \"YTD\") {\r\n//     // Return labels for months in the year-to-date period (e.g., Jan, Feb, etc.)\r\n//     return [\r\n//       \"Jan\",\r\n//       \"Feb\",\r\n//       \"Mar\",\r\n//       \"Apr\",\r\n//       \"May\",\r\n//       \"Jun\",\r\n//       \"Jul\",\r\n//       \"Aug\",\r\n//       \"Sep\",\r\n//       \"Oct\",\r\n//       \"Nov\",\r\n//       \"Dec\",\r\n//     ];\r\n//   } else if (period === \"1-year\") {\r\n//     // Return labels for months of the year (12 months)\r\n//     return [\r\n//       \"Jan\",\r\n//       \"Feb\",\r\n//       \"Mar\",\r\n//       \"Apr\",\r\n//       \"May\",\r\n//       \"Jun\",\r\n//       \"Jul\",\r\n//       \"Aug\",\r\n//       \"Sep\",\r\n//       \"Oct\",\r\n//       \"Nov\",\r\n//       \"Dec\",\r\n//     ];\r\n//   } else if (period === \"max\") {\r\n//     // Return labels for years (assuming data for multiple years)\r\n//     return [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\"];\r\n//   }\r\n// };\r\n\r\n// // Function to get data based on the selected time period\r\n// const getData = (period) => {\r\n//   const data = [];\r\n\r\n//   // Filter trades based on the selected time period\r\n//   let filteredTrades = [];\r\n//   if (period === \"day\") {\r\n//     // Filter trades for the last day\r\n//     filteredTrades = topProfitableTrades.filter((trade) => {\r\n//       return trade.timestamp >= Date.now() - 24 * 60 * 60 * 1000;\r\n//     });\r\n//   } else if (period === \"weeks\") {\r\n//     // Filter trades for the last week\r\n//     filteredTrades = topProfitableTrades.filter((trade) => {\r\n//       return trade.timestamp >= Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n//     });\r\n//   } else if (period === \"months\") {\r\n//     // Filter trades for the last month\r\n//     filteredTrades = topProfitableTrades.filter((trade) => {\r\n//       return new Date(trade.timestamp).getMonth() === new Date().getMonth();\r\n//     });\r\n//   } else if (period === \"3-months\") {\r\n//     // Filter trades for the last 3 months\r\n//     const threeMonthsAgo = new Date();\r\n//     threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\r\n//     filteredTrades = topProfitableTrades.filter((trade) => {\r\n//       return new Date(trade.timestamp) >= threeMonthsAgo;\r\n//     });\r\n//   } else if (period === \"YTD\") {\r\n//     // Filter trades for the year-to-date period\r\n//     filteredTrades = topProfitableTrades.filter((trade) => {\r\n//       const tradeDate = new Date(trade.timestamp);\r\n//       return tradeDate.getFullYear() === new Date().getFullYear();\r\n//     });\r\n//   } else if (period === \"1-year\") {\r\n//     // Filter trades for the last year\r\n//     const lastYear = new Date();\r\n//     lastYear.setFullYear(lastYear.getFullYear() - 1);\r\n//     filteredTrades = topProfitableTrades.filter((trade) => {\r\n//       return new Date(trade.timestamp) >= lastYear;\r\n//     });\r\n//   } else if (period === \"max\") {\r\n//     // Sort trades based on profit in descending order\r\n//     topProfitableTrades.sort((a, b) => b.profit - a.profit);\r\n\r\n//     // Consider all trades with profits, without limiting to a specific number\r\n//     filteredTrades = topProfitableTrades;\r\n//   }\r\n\r\n//   // Calculate profit for each filtered trade and add to the data array\r\n//   filteredTrades.forEach((trade) => {\r\n//     data.push(trade.profit);\r\n//   });\r\n\r\n//   return data;\r\n// };\r\n\r\n// // Function to handle time period change\r\n// const handleTimePeriodChange = (period) => {\r\n//   setTimePeriod(period);\r\n// };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"days\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"months\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//         >\r\n//           3M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//         >\r\n//           YTD\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//         >\r\n//           1Y\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"max\")}\r\n//         >\r\n//           MAX\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n"],"mappings":"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MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC9C,KAEO,CACL,CACF,CAAC;AAEV,CAAC;AAED,eAAevF,YAAY;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
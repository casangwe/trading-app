{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Calender.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash } from \"../func/functions\";\nconst Calender = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [modalDetails, setModalDetails] = useState(null);\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"Error fetching Daily PNL data\");\n        console.error(\"Error fetching Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view === \"month\") {\n      const formattedDate = date.toISOString().split(\"T\")[0];\n      const pnlEntry = dailyPNLData.find(pnl => pnl.entry_date === formattedDate);\n      if (pnlEntry) {\n        const backgroundColor = pnlEntry.open_cash > pnlEntry.close_cash ? \"lightcoral\" : \"lightgreen\";\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"react-calendar__month-view__weekdays__weekday\",\n          style: {\n            backgroundColor\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }\n        }, formatCash(pnlEntry.balance)), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }\n        }, pnlEntry.roi, \"%\"));\n      }\n    }\n    return null;\n  };\n  const handleTileClick = date => {\n    const formattedDate = date.toISOString().split(\"T\")[0];\n    const pnlEntry = dailyPNLData.find(pnl => pnl.entry_date === formattedDate);\n    if (pnlEntry) {\n      setModalDetails({\n        date: date.toDateString(),\n        ...pnlEntry\n      });\n    }\n  };\n  const handleCloseModal = () => {\n    setModalDetails(null);\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    onChange: setSelectedDate,\n    value: selectedDate,\n    tileContent: tileContent,\n    onClickDay: handleTileClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), modalDetails && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"PNL Details for \", modalDetails.date), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-button\",\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"Balance:\"), \" \", formatCash(modalDetails.balance)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"RoI:\"), \" \", modalDetails.roi, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Close Cash:\"), \" \", formatCash(modalDetails.close_cash)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"Open Cash:\"), \" \", formatCash(modalDetails.open_cash))))), dailyPNLData.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }\n  }, \"No PNL data available\"));\n};\nexport default Calender;","map":{"version":3,"names":["React","useState","useEffect","Calendar","fetchDailyPnls","formatCash","Calender","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","selectedDate","setSelectedDate","Date","modalDetails","setModalDetails","fetchDailyPNLData","data","console","tileContent","date","view","formattedDate","toISOString","split","pnlEntry","find","pnl","entry_date","backgroundColor","open_cash","close_cash","createElement","className","style","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","balance","roi","handleTileClick","toDateString","handleCloseModal","onChange","value","onClickDay","onClick","length"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Calender.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash } from \"../func/functions\";\r\n\r\nconst Calender = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [modalDetails, setModalDetails] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"Error fetching Daily PNL data\");\r\n        console.error(\"Error fetching Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    if (view === \"month\") {\r\n      const formattedDate = date.toISOString().split(\"T\")[0];\r\n      const pnlEntry = dailyPNLData.find(\r\n        (pnl) => pnl.entry_date === formattedDate\r\n      );\r\n\r\n      if (pnlEntry) {\r\n        const backgroundColor =\r\n          pnlEntry.open_cash > pnlEntry.close_cash\r\n            ? \"lightcoral\"\r\n            : \"lightgreen\";\r\n\r\n        return (\r\n          <div\r\n            className=\"react-calendar__month-view__weekdays__weekday\"\r\n            style={{ backgroundColor }}\r\n          >\r\n            <div>{formatCash(pnlEntry.balance)}</div>\r\n            <div>{pnlEntry.roi}%</div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleTileClick = (date) => {\r\n    const formattedDate = date.toISOString().split(\"T\")[0];\r\n    const pnlEntry = dailyPNLData.find(\r\n      (pnl) => pnl.entry_date === formattedDate\r\n    );\r\n\r\n    if (pnlEntry) {\r\n      setModalDetails({\r\n        date: date.toDateString(),\r\n        ...pnlEntry,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setModalDetails(null);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <Calendar\r\n        onChange={setSelectedDate}\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        onClickDay={handleTileClick}\r\n      />\r\n      {modalDetails && (\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h2>PNL Details for {modalDetails.date}</h2>\r\n              <button className=\"close-button\" onClick={handleCloseModal}>\r\n                &times;\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>\r\n                <strong>Balance:</strong> {formatCash(modalDetails.balance)}\r\n              </p>\r\n              <p>\r\n                <strong>RoI:</strong> {modalDetails.roi}%\r\n              </p>\r\n              <p>\r\n                <strong>Close Cash:</strong>{\" \"}\r\n                {formatCash(modalDetails.close_cash)}\r\n              </p>\r\n              <p>\r\n                <strong>Open Cash:</strong> {formatCash(modalDetails.open_cash)}\r\n              </p>\r\n              {/* Add more details if necessary */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {dailyPNLData.length === 0 && <p>No PNL data available</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calender;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
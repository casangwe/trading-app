{"ast":null,"code":"import { getCash } from \"../api/CashApi\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { calculateNumberOfTrades, calculateWinningTrades, calculateLosingTrades, calculateWinRate, calculateAverageWin, calculateAverageLoss, calculateRiskRewardRatio, calculateAbsoluteReturn, calculateSharpeRatio, calculateAverageDaysInTrade } from \"./AnalysisCalc\";\nexport const performAnalysis = async () => {\n  try {\n    const cashData = await getCash();\n    const trades = await fetchTrades();\n    const transactions = await fetchTrades(); // Ensure this is fetching correctly\n\n    // Log the transactions to see if data is present\n    console.log(\"Fetched transactions:\", transactions);\n\n    // Check if transactions are defined\n    if (!Array.isArray(transactions)) {\n      console.error(\"Transactions data is not an array or undefined:\", transactions);\n      return;\n    }\n    console.log(cashData);\n    console.log(trades);\n\n    // Calculate metrics\n    const numberOfTrades = calculateNumberOfTrades(trades);\n    const winningTrades = calculateWinningTrades(trades);\n    const losingTrades = calculateLosingTrades(trades);\n    const winRate = calculateWinRate(trades);\n    const averageWin = calculateAverageWin(trades);\n    const averageLoss = calculateAverageLoss(trades);\n    const riskRewardRatio = calculateRiskRewardRatio(trades);\n    const absoluteReturn = calculateAbsoluteReturn(trades);\n    const sharpeRatio = calculateSharpeRatio(trades);\n    const avgDaysInTrade = calculateAverageDaysInTrade(trades);\n\n    // Assuming netPL needs to be fetched or calculated elsewhere\n    // const netPL = ...; // Fetch or calculate netPL\n    // const cashBalance = calculateCashBalance(cashData.initial_cash, netPL);\n\n    // Prepare the results object\n    const analysisResults = {\n      numberOfTrades,\n      winningTrades,\n      losingTrades,\n      winRate,\n      averageWin,\n      averageLoss,\n      riskRewardRatio,\n      absoluteReturn,\n      sharpeRatio,\n      avgDaysInTrade\n      // cashBalance, // Uncomment if needed\n    };\n    console.log(analysisResults);\n    return analysisResults;\n  } catch (error) {\n    console.error(\"Analysis Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getCash","fetchTrades","calculateNumberOfTrades","calculateWinningTrades","calculateLosingTrades","calculateWinRate","calculateAverageWin","calculateAverageLoss","calculateRiskRewardRatio","calculateAbsoluteReturn","calculateSharpeRatio","calculateAverageDaysInTrade","performAnalysis","cashData","trades","transactions","console","log","Array","isArray","error","numberOfTrades","winningTrades","losingTrades","winRate","averageWin","averageLoss","riskRewardRatio","absoluteReturn","sharpeRatio","avgDaysInTrade","analysisResults"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisGet.js"],"sourcesContent":["import { getCash } from \"../api/CashApi\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport {\r\n  calculateNumberOfTrades,\r\n  calculateWinningTrades,\r\n  calculateLosingTrades,\r\n  calculateWinRate,\r\n  calculateAverageWin,\r\n  calculateAverageLoss,\r\n  calculateRiskRewardRatio,\r\n  calculateAbsoluteReturn,\r\n  calculateSharpeRatio,\r\n  calculateAverageDaysInTrade,\r\n} from \"./AnalysisCalc\";\r\n\r\nexport const performAnalysis = async () => {\r\n  try {\r\n    const cashData = await getCash();\r\n    const trades = await fetchTrades();\r\n    const transactions = await fetchTrades(); // Ensure this is fetching correctly\r\n\r\n    // Log the transactions to see if data is present\r\n    console.log(\"Fetched transactions:\", transactions);\r\n\r\n    // Check if transactions are defined\r\n    if (!Array.isArray(transactions)) {\r\n      console.error(\r\n        \"Transactions data is not an array or undefined:\",\r\n        transactions\r\n      );\r\n      return;\r\n    }\r\n\r\n    console.log(cashData);\r\n    console.log(trades);\r\n\r\n    // Calculate metrics\r\n    const numberOfTrades = calculateNumberOfTrades(trades);\r\n    const winningTrades = calculateWinningTrades(trades);\r\n    const losingTrades = calculateLosingTrades(trades);\r\n    const winRate = calculateWinRate(trades);\r\n    const averageWin = calculateAverageWin(trades);\r\n    const averageLoss = calculateAverageLoss(trades);\r\n    const riskRewardRatio = calculateRiskRewardRatio(trades);\r\n    const absoluteReturn = calculateAbsoluteReturn(trades);\r\n    const sharpeRatio = calculateSharpeRatio(trades);\r\n    const avgDaysInTrade = calculateAverageDaysInTrade(trades);\r\n\r\n    // Assuming netPL needs to be fetched or calculated elsewhere\r\n    // const netPL = ...; // Fetch or calculate netPL\r\n    // const cashBalance = calculateCashBalance(cashData.initial_cash, netPL);\r\n\r\n    // Prepare the results object\r\n    const analysisResults = {\r\n      numberOfTrades,\r\n      winningTrades,\r\n      losingTrades,\r\n      winRate,\r\n      averageWin,\r\n      averageLoss,\r\n      riskRewardRatio,\r\n      absoluteReturn,\r\n      sharpeRatio,\r\n      avgDaysInTrade,\r\n      // cashBalance, // Uncomment if needed\r\n    };\r\n\r\n    console.log(analysisResults);\r\n\r\n    return analysisResults;\r\n  } catch (error) {\r\n    console.error(\"Analysis Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,uBAAuB,EACvBC,sBAAsB,EACtBC,qBAAqB,EACrBC,gBAAgB,EAChBC,mBAAmB,EACnBC,oBAAoB,EACpBC,wBAAwB,EACxBC,uBAAuB,EACvBC,oBAAoB,EACpBC,2BAA2B,QACtB,gBAAgB;AAEvB,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMb,OAAO,CAAC,CAAC;IAChC,MAAMc,MAAM,GAAG,MAAMb,WAAW,CAAC,CAAC;IAClC,MAAMc,YAAY,GAAG,MAAMd,WAAW,CAAC,CAAC,CAAC,CAAC;;IAE1C;IACAe,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,YAAY,CAAC;;IAElD;IACA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,YAAY,CAAC,EAAE;MAChCC,OAAO,CAACI,KAAK,CACX,iDAAiD,EACjDL,YACF,CAAC;MACD;IACF;IAEAC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrBG,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;;IAEnB;IACA,MAAMO,cAAc,GAAGnB,uBAAuB,CAACY,MAAM,CAAC;IACtD,MAAMQ,aAAa,GAAGnB,sBAAsB,CAACW,MAAM,CAAC;IACpD,MAAMS,YAAY,GAAGnB,qBAAqB,CAACU,MAAM,CAAC;IAClD,MAAMU,OAAO,GAAGnB,gBAAgB,CAACS,MAAM,CAAC;IACxC,MAAMW,UAAU,GAAGnB,mBAAmB,CAACQ,MAAM,CAAC;IAC9C,MAAMY,WAAW,GAAGnB,oBAAoB,CAACO,MAAM,CAAC;IAChD,MAAMa,eAAe,GAAGnB,wBAAwB,CAACM,MAAM,CAAC;IACxD,MAAMc,cAAc,GAAGnB,uBAAuB,CAACK,MAAM,CAAC;IACtD,MAAMe,WAAW,GAAGnB,oBAAoB,CAACI,MAAM,CAAC;IAChD,MAAMgB,cAAc,GAAGnB,2BAA2B,CAACG,MAAM,CAAC;;IAE1D;IACA;IACA;;IAEA;IACA,MAAMiB,eAAe,GAAG;MACtBV,cAAc;MACdC,aAAa;MACbC,YAAY;MACZC,OAAO;MACPC,UAAU;MACVC,WAAW;MACXC,eAAe;MACfC,cAAc;MACdC,WAAW;MACXC;MACA;IACF,CAAC;IAEDd,OAAO,CAACC,GAAG,CAACc,eAAe,CAAC;IAE5B,OAAOA,eAAe;EACxB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
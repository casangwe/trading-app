{"ast":null,"code":"// AnalysisCalc.js\n\n// Calculate Total ROI\nexport const calculateTotalROI = trades => {\n  var _trades$;\n  if (trades.length === 0) return 0;\n  const initialInvestment = ((_trades$ = trades[0]) === null || _trades$ === void 0 ? void 0 : _trades$.initial_investment) || 0;\n  const totalReturn = trades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  if (initialInvestment === 0) return 0; // Avoid division by zero\n\n  const totalROI = totalReturn / initialInvestment * 100; // Convert to percentage\n  return totalROI.toFixed(2); // Format to 2 decimal places\n};\n\n// Calculate Sharpe Ratio\nexport const calculateSharpeRatio = dailyPnls => {\n  if (dailyPnls.length === 0) return 0;\n  const averageReturn = dailyPnls.reduce((acc, pnl) => acc + pnl, 0) / dailyPnls.length;\n  const stdDeviation = Math.sqrt(dailyPnls.reduce((acc, pnl) => acc + Math.pow(pnl - averageReturn, 2), 0) / dailyPnls.length);\n  if (stdDeviation === 0) return 0; // Avoid division by zero\n\n  return (averageReturn / stdDeviation).toFixed(2); // Format to 2 decimal places\n};\n\n// Calculate Number of Trades\nexport const calculateNumberOfTrades = trades => {\n  return trades.length;\n};\n\n// Calculate Winning Trades\nexport const calculateWinningTrades = trades => {\n  return trades.filter(trade => trade.exit_price - trade.entry_price > 0).length;\n};\n\n// Calculate Losing Trades\nexport const calculateLosingTrades = trades => {\n  return trades.filter(trade => trade.exit_price - trade.entry_price < 0).length;\n};\n\n// Calculate Win Rate\nexport const calculateWinRate = trades => {\n  const winningTrades = calculateWinningTrades(trades);\n  const totalTrades = calculateNumberOfTrades(trades);\n  return totalTrades === 0 ? 0 : (winningTrades / totalTrades * 100).toFixed(2); // Format to 2 decimal places\n};\n\n// Calculate Average Win\nexport const calculateAverageWin = trades => {\n  const winningTrades = trades.filter(trade => trade.exit_price - trade.entry_price > 0);\n  const totalWin = winningTrades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  return winningTrades.length === 0 ? 0 : (totalWin / winningTrades.length).toFixed(2); // Format to 2 decimal places\n};\n\n// Calculate Average Loss\nexport const calculateAverageLoss = trades => {\n  const losingTrades = trades.filter(trade => trade.exit_price - trade.entry_price < 0);\n  const totalLoss = losingTrades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0);\n  return losingTrades.length === 0 ? 0 : (totalLoss / losingTrades.length).toFixed(2); // Format to 2 decimal places\n};\n\n// Calculate Risk-Reward Ratio\nexport const calculateRiskRewardRatio = trades => {\n  const averageWin = parseFloat(calculateAverageWin(trades));\n  const averageLoss = Math.abs(parseFloat(calculateAverageLoss(trades)));\n  return averageLoss === 0 ? 0 : (averageWin / averageLoss).toFixed(2); // Format to 2 decimal places\n};\n\n// Calculate Maximum Drawdown\nexport const calculateMaximumDrawdown = dailyPnls => {\n  if (dailyPnls.length === 0) return 0;\n  let maxDrawdown = 0;\n  let peak = dailyPnls[0];\n  dailyPnls.forEach(pnl => {\n    if (pnl > peak) {\n      peak = pnl;\n    }\n    const drawdown = (peak - pnl) / peak;\n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n    }\n  });\n  return (maxDrawdown * 100).toFixed(2); // Return as a percentage with 2 decimal places\n};\n\n// Additional Metric: Total Net P/L\nexport const calculateTotalNetPL = trades => {\n  return trades.reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0).toFixed(2); // Format to 2 decimal places\n};\n\n// Additional Metric: Cash Balance Calculation (if needed outside of performAnalysis)\nexport const calculateCashBalance = (initialCash, netPL) => {\n  return (initialCash + netPL).toFixed(2); // Format to 2 decimal places\n};\n\n// Add more calculation functions as needed","map":{"version":3,"names":["calculateTotalROI","trades","_trades$","length","initialInvestment","initial_investment","totalReturn","reduce","acc","trade","exit_price","entry_price","totalROI","toFixed","calculateSharpeRatio","dailyPnls","averageReturn","pnl","stdDeviation","Math","sqrt","pow","calculateNumberOfTrades","calculateWinningTrades","filter","calculateLosingTrades","calculateWinRate","winningTrades","totalTrades","calculateAverageWin","totalWin","calculateAverageLoss","losingTrades","totalLoss","calculateRiskRewardRatio","averageWin","parseFloat","averageLoss","abs","calculateMaximumDrawdown","maxDrawdown","peak","forEach","drawdown","calculateTotalNetPL","calculateCashBalance","initialCash","netPL"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisCalc.js"],"sourcesContent":["// AnalysisCalc.js\r\n\r\n// Calculate Total ROI\r\nexport const calculateTotalROI = (trades) => {\r\n  if (trades.length === 0) return 0;\r\n\r\n  const initialInvestment = trades[0]?.initial_investment || 0;\r\n  const totalReturn = trades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n\r\n  if (initialInvestment === 0) return 0; // Avoid division by zero\r\n\r\n  const totalROI = (totalReturn / initialInvestment) * 100; // Convert to percentage\r\n  return totalROI.toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Calculate Sharpe Ratio\r\nexport const calculateSharpeRatio = (dailyPnls) => {\r\n  if (dailyPnls.length === 0) return 0;\r\n\r\n  const averageReturn =\r\n    dailyPnls.reduce((acc, pnl) => acc + pnl, 0) / dailyPnls.length;\r\n  const stdDeviation = Math.sqrt(\r\n    dailyPnls.reduce((acc, pnl) => acc + Math.pow(pnl - averageReturn, 2), 0) /\r\n      dailyPnls.length\r\n  );\r\n\r\n  if (stdDeviation === 0) return 0; // Avoid division by zero\r\n\r\n  return (averageReturn / stdDeviation).toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Calculate Number of Trades\r\nexport const calculateNumberOfTrades = (trades) => {\r\n  return trades.length;\r\n};\r\n\r\n// Calculate Winning Trades\r\nexport const calculateWinningTrades = (trades) => {\r\n  return trades.filter((trade) => trade.exit_price - trade.entry_price > 0)\r\n    .length;\r\n};\r\n\r\n// Calculate Losing Trades\r\nexport const calculateLosingTrades = (trades) => {\r\n  return trades.filter((trade) => trade.exit_price - trade.entry_price < 0)\r\n    .length;\r\n};\r\n\r\n// Calculate Win Rate\r\nexport const calculateWinRate = (trades) => {\r\n  const winningTrades = calculateWinningTrades(trades);\r\n  const totalTrades = calculateNumberOfTrades(trades);\r\n  return totalTrades === 0\r\n    ? 0\r\n    : ((winningTrades / totalTrades) * 100).toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Calculate Average Win\r\nexport const calculateAverageWin = (trades) => {\r\n  const winningTrades = trades.filter(\r\n    (trade) => trade.exit_price - trade.entry_price > 0\r\n  );\r\n  const totalWin = winningTrades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return winningTrades.length === 0\r\n    ? 0\r\n    : (totalWin / winningTrades.length).toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Calculate Average Loss\r\nexport const calculateAverageLoss = (trades) => {\r\n  const losingTrades = trades.filter(\r\n    (trade) => trade.exit_price - trade.entry_price < 0\r\n  );\r\n  const totalLoss = losingTrades.reduce(\r\n    (acc, trade) => acc + (trade.exit_price - trade.entry_price),\r\n    0\r\n  );\r\n  return losingTrades.length === 0\r\n    ? 0\r\n    : (totalLoss / losingTrades.length).toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Calculate Risk-Reward Ratio\r\nexport const calculateRiskRewardRatio = (trades) => {\r\n  const averageWin = parseFloat(calculateAverageWin(trades));\r\n  const averageLoss = Math.abs(parseFloat(calculateAverageLoss(trades)));\r\n  return averageLoss === 0 ? 0 : (averageWin / averageLoss).toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Calculate Maximum Drawdown\r\nexport const calculateMaximumDrawdown = (dailyPnls) => {\r\n  if (dailyPnls.length === 0) return 0;\r\n\r\n  let maxDrawdown = 0;\r\n  let peak = dailyPnls[0];\r\n\r\n  dailyPnls.forEach((pnl) => {\r\n    if (pnl > peak) {\r\n      peak = pnl;\r\n    }\r\n    const drawdown = (peak - pnl) / peak;\r\n    if (drawdown > maxDrawdown) {\r\n      maxDrawdown = drawdown;\r\n    }\r\n  });\r\n\r\n  return (maxDrawdown * 100).toFixed(2); // Return as a percentage with 2 decimal places\r\n};\r\n\r\n// Additional Metric: Total Net P/L\r\nexport const calculateTotalNetPL = (trades) => {\r\n  return trades\r\n    .reduce((acc, trade) => acc + (trade.exit_price - trade.entry_price), 0)\r\n    .toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Additional Metric: Cash Balance Calculation (if needed outside of performAnalysis)\r\nexport const calculateCashBalance = (initialCash, netPL) => {\r\n  return (initialCash + netPL).toFixed(2); // Format to 2 decimal places\r\n};\r\n\r\n// Add more calculation functions as needed\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
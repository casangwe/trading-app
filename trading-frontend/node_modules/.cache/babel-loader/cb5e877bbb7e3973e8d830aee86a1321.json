{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\BiggestWinsLosses.js\";\nimport React, { useState } from \"react\";\nimport \"./styles/biggestWinsLosses.css\";\nconst BiggestWinsLosses = ({\n  recentTrades\n}) => {\n  const [showPositive, setShowPositive] = useState(true);\n  const toggleProfitDisplay = () => {\n    setShowPositive(!showPositive);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-lost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"P/L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"menu\",\n    onClick: toggleProfitDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"::\"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, recentTrades && recentTrades.map((trade, index) => {\n    const isPositive = trade.profit >= 0;\n    const shouldDisplay = isPositive && showPositive || !isPositive && !showPositive;\n    const cardItemClasses = `card-item ${isPositive ? \"positive\" : \"negative\"}`;\n    return shouldDisplay ? /*#__PURE__*/React.createElement(\"li\", {\n      className: cardItemClasses,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, trade.option_symbol), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }, \"$\", !isNaN(trade.profit) ? (trade.profit * 100).toFixed(2) : \"N/A\"))) : null;\n  }))));\n};\nexport default BiggestWinsLosses;\n\n// import React, { useState } from \"react\";\n// import \"./styles/biggestWinsLosses.css\";\n\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\n//   const [showPositive, setShowPositive] = useState(true);\n\n//   const toggleProfitDisplay = () => {\n//     setShowPositive(!showPositive);\n//   };\n\n//   return (\n//     <div className=\"wins-lost\">\n//       <div className=\"card\">\n//         <p>P/L</p>\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\n//           ::\n//         </p>{\" \"}\n//         {/* Toggle display on click */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BiggestWinsLosses;\n\n// import React, { useState } from \"react\";\n// import \"./styles/biggestWinsLosses.css\";\n\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\n//   const [showPositive, setShowPositive] = useState(true);\n\n//   const toggleProfitDisplay = () => {\n//     setShowPositive(!showPositive);\n//   };\n\n//   return (\n//     <div className=\"wins-lost\">\n//       <div className=\"card\">\n//         <p>P/L</p>\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\n//           ::\n//         </p>{\" \"}\n//         {/* Toggle display on click */}\n//       </div>\n//       <div className=\"card-list\">\n//         <ul className=\"cards\">\n//           {topProfitableTrades &&\n//             topProfitableTrades.map((trade, index) => {\n//               const isPositive = trade.profit >= 0;\n//               const shouldDisplay =\n//                 (isPositive && showPositive) || (!isPositive && !showPositive);\n//               const cardItemClasses = `card-item ${\n//                 !isPositive && !showPositive ? \"negative\" : \"\"\n//               }`;\n\n//               return shouldDisplay ? (\n//                 <li className={cardItemClasses} key={index}>\n//                   <div className=\"card-content\">\n//                     <p>{trade.option_symbol}</p>\n//                     <p>${(trade.profit * 100).toFixed(2)}</p>\n//                   </div>\n//                 </li>\n//               ) : null;\n//             })}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BiggestWinsLosses;","map":{"version":3,"names":["React","useState","BiggestWinsLosses","recentTrades","showPositive","setShowPositive","toggleProfitDisplay","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","trade","index","isPositive","profit","shouldDisplay","cardItemClasses","key","option_symbol","isNaN","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ recentTrades }) => {\r\n  const [showPositive, setShowPositive] = useState(true);\r\n\r\n  const toggleProfitDisplay = () => {\r\n    setShowPositive(!showPositive);\r\n  };\r\n\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"card\">\r\n        <p>P/L</p>\r\n        <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n          ::\r\n        </p>{\" \"}\r\n        {/* Toggle display on click */}\r\n      </div>\r\n      <div className=\"card-list\">\r\n        <ul className=\"cards\">\r\n          {recentTrades &&\r\n            recentTrades.map((trade, index) => {\r\n              const isPositive = trade.profit >= 0;\r\n              const shouldDisplay =\r\n                (isPositive && showPositive) || (!isPositive && !showPositive);\r\n              const cardItemClasses = `card-item ${\r\n                isPositive ? \"positive\" : \"negative\"\r\n              }`;\r\n\r\n              return shouldDisplay ? (\r\n                <li className={cardItemClasses} key={index}>\r\n                  <div className=\"card-content\">\r\n                    <p>{trade.option_symbol}</p>\r\n                    <p>\r\n                      $\r\n                      {!isNaN(trade.profit)\r\n                        ? (trade.profit * 100).toFixed(2)\r\n                        : \"N/A\"}\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n              ) : null;\r\n            })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"./styles/biggestWinsLosses.css\";\r\n\r\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\r\n//   const [showPositive, setShowPositive] = useState(true);\r\n\r\n//   const toggleProfitDisplay = () => {\r\n//     setShowPositive(!showPositive);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"wins-lost\">\r\n//       <div className=\"card\">\r\n//         <p>P/L</p>\r\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n//           ::\r\n//         </p>{\" \"}\r\n//         {/* Toggle display on click */}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BiggestWinsLosses;\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"./styles/biggestWinsLosses.css\";\r\n\r\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\r\n//   const [showPositive, setShowPositive] = useState(true);\r\n\r\n//   const toggleProfitDisplay = () => {\r\n//     setShowPositive(!showPositive);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"wins-lost\">\r\n//       <div className=\"card\">\r\n//         <p>P/L</p>\r\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n//           ::\r\n//         </p>{\" \"}\r\n//         {/* Toggle display on click */}\r\n//       </div>\r\n//       <div className=\"card-list\">\r\n//         <ul className=\"cards\">\r\n//           {topProfitableTrades &&\r\n//             topProfitableTrades.map((trade, index) => {\r\n//               const isPositive = trade.profit >= 0;\r\n//               const shouldDisplay =\r\n//                 (isPositive && showPositive) || (!isPositive && !showPositive);\r\n//               const cardItemClasses = `card-item ${\r\n//                 !isPositive && !showPositive ? \"negative\" : \"\"\r\n//               }`;\r\n\r\n//               return shouldDisplay ? (\r\n//                 <li className={cardItemClasses} key={index}>\r\n//                   <div className=\"card-content\">\r\n//                     <p>{trade.option_symbol}</p>\r\n//                     <p>${(trade.profit * 100).toFixed(2)}</p>\r\n//                   </div>\r\n//                 </li>\r\n//               ) : null;\r\n//             })}\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BiggestWinsLosses;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\BiggestWinsLosses.js\";\nimport React, { useState } from \"react\";\nimport \"./styles/biggestWinsLosses.css\";\nconst BiggestWinsLosses = ({\n  recentTrades\n}) => {\n  const [showPositive, setShowPositive] = useState(true);\n  const toggleProfitDisplay = () => {\n    setShowPositive(!showPositive);\n  };\n\n  // Function to calculate top profitable trades\n  const calculateTopProfitableTrades = trades => {\n    // Sort trades based on profit in descending order\n    const sortedTrades = trades.slice().sort((a, b) => b.profit - a.profit);\n    // Select the top 5 profitable trades\n    return sortedTrades.slice(0, 5);\n  };\n\n  // Calculate top profitable trades from recentTrades\n  const topProfitableTrades = calculateTopProfitableTrades(recentTrades);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-lost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"P/L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"menu\",\n    onClick: toggleProfitDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"::\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, topProfitableTrades.map((trade, index) => {\n    const isPositive = trade.profit >= 0;\n    const shouldDisplay = isPositive && showPositive || !isPositive && !showPositive;\n    const cardItemClasses = `card-item ${!isPositive && !showPositive ? \"negative\" : \"\"}`;\n    return shouldDisplay ? /*#__PURE__*/React.createElement(\"li\", {\n      className: cardItemClasses,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 19\n      }\n    }, trade.option_symbol), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }, \"$\", (trade.profit * 100).toFixed(2)))) : null;\n  }))));\n};\nexport default BiggestWinsLosses;\n\n// import React, { useState } from \"react\";\n// import \"./styles/biggestWinsLosses.css\";\n\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\n//   const [showPositive, setShowPositive] = useState(true);\n\n//   const toggleProfitDisplay = () => {\n//     setShowPositive(!showPositive);\n//   };\n\n//   return (\n//     <div className=\"wins-lost\">\n//       <div className=\"card\">\n//         <p>P/L</p>\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\n//           ::\n//         </p>{\" \"}\n//         {/* Toggle display on click */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BiggestWinsLosses;\n\n// import React, { useState } from \"react\";\n// import \"./styles/biggestWinsLosses.css\";\n\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\n//   const [showPositive, setShowPositive] = useState(true);\n\n//   const toggleProfitDisplay = () => {\n//     setShowPositive(!showPositive);\n//   };\n\n//   return (\n//     <div className=\"wins-lost\">\n//       <div className=\"card\">\n//         <p>P/L</p>\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\n//           ::\n//         </p>{\" \"}\n//         {/* Toggle display on click */}\n//       </div>\n//       <div className=\"card-list\">\n//         <ul className=\"cards\">\n//           {topProfitableTrades &&\n//             topProfitableTrades.map((trade, index) => {\n//               const isPositive = trade.profit >= 0;\n//               const shouldDisplay =\n//                 (isPositive && showPositive) || (!isPositive && !showPositive);\n//               const cardItemClasses = `card-item ${\n//                 !isPositive && !showPositive ? \"negative\" : \"\"\n//               }`;\n\n//               return shouldDisplay ? (\n//                 <li className={cardItemClasses} key={index}>\n//                   <div className=\"card-content\">\n//                     <p>{trade.option_symbol}</p>\n//                     <p>${(trade.profit * 100).toFixed(2)}</p>\n//                   </div>\n//                 </li>\n//               ) : null;\n//             })}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BiggestWinsLosses;","map":{"version":3,"names":["React","useState","BiggestWinsLosses","recentTrades","showPositive","setShowPositive","toggleProfitDisplay","calculateTopProfitableTrades","trades","sortedTrades","slice","sort","a","b","profit","topProfitableTrades","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","trade","index","isPositive","shouldDisplay","cardItemClasses","key","option_symbol","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ recentTrades }) => {\r\n  const [showPositive, setShowPositive] = useState(true);\r\n\r\n  const toggleProfitDisplay = () => {\r\n    setShowPositive(!showPositive);\r\n  };\r\n\r\n  // Function to calculate top profitable trades\r\n  const calculateTopProfitableTrades = (trades) => {\r\n    // Sort trades based on profit in descending order\r\n    const sortedTrades = trades.slice().sort((a, b) => b.profit - a.profit);\r\n    // Select the top 5 profitable trades\r\n    return sortedTrades.slice(0, 5);\r\n  };\r\n\r\n  // Calculate top profitable trades from recentTrades\r\n  const topProfitableTrades = calculateTopProfitableTrades(recentTrades);\r\n\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"card\">\r\n        <p>P/L</p>\r\n        <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n          ::\r\n        </p>\r\n      </div>\r\n      <div className=\"card-list\">\r\n        <ul className=\"cards\">\r\n          {/* Map over topProfitableTrades to render the list of trades */}\r\n          {topProfitableTrades.map((trade, index) => {\r\n            const isPositive = trade.profit >= 0;\r\n            const shouldDisplay =\r\n              (isPositive && showPositive) || (!isPositive && !showPositive);\r\n            const cardItemClasses = `card-item ${\r\n              !isPositive && !showPositive ? \"negative\" : \"\"\r\n            }`;\r\n\r\n            return shouldDisplay ? (\r\n              <li className={cardItemClasses} key={index}>\r\n                <div className=\"card-content\">\r\n                  <p>{trade.option_symbol}</p>\r\n                  <p>${(trade.profit * 100).toFixed(2)}</p>\r\n                </div>\r\n              </li>\r\n            ) : null;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"./styles/biggestWinsLosses.css\";\r\n\r\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\r\n//   const [showPositive, setShowPositive] = useState(true);\r\n\r\n//   const toggleProfitDisplay = () => {\r\n//     setShowPositive(!showPositive);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"wins-lost\">\r\n//       <div className=\"card\">\r\n//         <p>P/L</p>\r\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n//           ::\r\n//         </p>{\" \"}\r\n//         {/* Toggle display on click */}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BiggestWinsLosses;\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"./styles/biggestWinsLosses.css\";\r\n\r\n// const BiggestWinsLosses = ({ topProfitableTrades }) => {\r\n//   const [showPositive, setShowPositive] = useState(true);\r\n\r\n//   const toggleProfitDisplay = () => {\r\n//     setShowPositive(!showPositive);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"wins-lost\">\r\n//       <div className=\"card\">\r\n//         <p>P/L</p>\r\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n//           ::\r\n//         </p>{\" \"}\r\n//         {/* Toggle display on click */}\r\n//       </div>\r\n//       <div className=\"card-list\">\r\n//         <ul className=\"cards\">\r\n//           {topProfitableTrades &&\r\n//             topProfitableTrades.map((trade, index) => {\r\n//               const isPositive = trade.profit >= 0;\r\n//               const shouldDisplay =\r\n//                 (isPositive && showPositive) || (!isPositive && !showPositive);\r\n//               const cardItemClasses = `card-item ${\r\n//                 !isPositive && !showPositive ? \"negative\" : \"\"\r\n//               }`;\r\n\r\n//               return shouldDisplay ? (\r\n//                 <li className={cardItemClasses} key={index}>\r\n//                   <div className=\"card-content\">\r\n//                     <p>{trade.option_symbol}</p>\r\n//                     <p>${(trade.profit * 100).toFixed(2)}</p>\r\n//                   </div>\r\n//                 </li>\r\n//               ) : null;\r\n//             })}\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BiggestWinsLosses;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
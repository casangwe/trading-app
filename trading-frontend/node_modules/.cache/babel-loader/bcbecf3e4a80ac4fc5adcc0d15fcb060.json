{"ast":null,"code":"// trading-frontend/src/components/ApiCalls.js\n\nconst API_BASE_URL = \"http://localhost:8000\";\nexport const fetchUsers = async (skip = 0, limit = 100) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`);\n    if (!response.ok) throw new Error(\"Error fetching users\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Users Error:\", error);\n    throw error; // Optionally, rethrow the error for handling in the calling code\n  }\n};\nexport const fetchUser = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`);\n    if (!response.ok) throw new Error(\"User not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch User Error:\", error);\n    throw error;\n  }\n};\nexport const updateUser = async (userId, userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error(\"Error updating user\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update User Error:\", error);\n    throw error;\n  }\n};\nexport const deleteUser = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Error deleting user\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete User Error:\", error);\n    throw error;\n  }\n};\n\n// Cash API Calls\nexport const fetchCash = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`);\n    if (!response.ok) throw new Error(\"Cash record not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Cash Error:\", error);\n    throw error;\n  }\n};\n\n// Transactions API Calls\nexport const fetchTransactions = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/transactions/`);\n    if (!response.ok) throw new Error(\"Error fetching transactions\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Transactions Error:\", error);\n    throw error;\n  }\n};\n\n// Trades API Calls\nexport const fetchTrades = async (skip = 0, limit = 100) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/?skip=${skip}&limit=${limit}`);\n    if (!response.ok) throw new Error(\"Error fetching trades\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Trades Error:\", error);\n    throw error;\n  }\n};\nexport const createTrade = async (tradeData, userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/?user_id=${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(tradeData)\n    });\n    if (!response.ok) throw new Error(\"Error creating trade\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Create Trade Error:\", error);\n    throw error;\n  }\n};\n\n// Daily PNL API Calls\nexport const fetchDailyPNLs = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/daily_pnls/`);\n    if (!response.ok) throw new Error(\"Error fetching daily PNLs\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Daily PNLs Error:\", error);\n    throw error;\n  }\n};\n\n// Analysis API Call\nexport const fetchAnalysis = async (userId, startDate, endDate) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/analysis/${userId}?start_date=${startDate}&end_date=${endDate}`);\n    if (!response.ok) throw new Error(\"Error performing analysis\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Analysis Error:\", error);\n    throw error;\n  }\n};\n\n// Add more API calls for other endpoints (watchlists, summaries, rules, plans, etc.) following the same pattern\n\nexport default {\n  fetchUsers,\n  fetchUser,\n  updateUser,\n  deleteUser,\n  fetchCash,\n  fetchTransactions,\n  fetchTrades,\n  createTrade,\n  fetchDailyPNLs,\n  fetchAnalysis\n};","map":{"version":3,"names":["API_BASE_URL","fetchUsers","skip","limit","response","fetch","ok","Error","json","error","console","fetchUser","userId","updateUser","userData","method","headers","body","JSON","stringify","deleteUser","fetchCash","fetchTransactions","fetchTrades","createTrade","tradeData","fetchDailyPNLs","fetchAnalysis","startDate","endDate"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/ApiCalls.js"],"sourcesContent":["// trading-frontend/src/components/ApiCalls.js\r\n\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\nexport const fetchUsers = async (skip = 0, limit = 100) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Error fetching users\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Users Error:\", error);\r\n    throw error; // Optionally, rethrow the error for handling in the calling code\r\n  }\r\n};\r\n\r\nexport const fetchUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`);\r\n    if (!response.ok) throw new Error(\"User not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUser = async (userId, userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Error updating user\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) throw new Error(\"Error deleting user\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cash API Calls\r\nexport const fetchCash = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/cash/${userId}`);\r\n    if (!response.ok) throw new Error(\"Cash record not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Cash Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Transactions API Calls\r\nexport const fetchTransactions = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/transactions/`);\r\n    if (!response.ok) throw new Error(\"Error fetching transactions\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Transactions Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Trades API Calls\r\nexport const fetchTrades = async (skip = 0, limit = 100) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/trades/?skip=${skip}&limit=${limit}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Error fetching trades\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Trades Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createTrade = async (tradeData, userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/trades/?user_id=${userId}`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(tradeData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Error creating trade\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Create Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Daily PNL API Calls\r\nexport const fetchDailyPNLs = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/daily_pnls/`);\r\n    if (!response.ok) throw new Error(\"Error fetching daily PNLs\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Daily PNLs Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Analysis API Call\r\nexport const fetchAnalysis = async (userId, startDate, endDate) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/analysis/${userId}?start_date=${startDate}&end_date=${endDate}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Error performing analysis\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Analysis Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add more API calls for other endpoints (watchlists, summaries, rules, plans, etc.) following the same pattern\r\n\r\nexport default {\r\n  fetchUsers,\r\n  fetchUser,\r\n  updateUser,\r\n  deleteUser,\r\n  fetchCash,\r\n  fetchTransactions,\r\n  fetchTrades,\r\n  createTrade,\r\n  fetchDailyPNLs,\r\n  fetchAnalysis,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
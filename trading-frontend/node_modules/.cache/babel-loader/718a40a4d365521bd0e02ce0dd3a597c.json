{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"Error fetching Daily PNL data\");\n        console.error(\"Error fetching Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, error);\n  const formatMonthYear = dateStr => {\n    if (!dateStr) return \"\";\n    const [year, month] = dateStr.split(\"-\");\n    return `${month}/${year}`;\n  };\n  const aggregateData = (interval, numDaysPerInterval) => {\n    let aggregatedBalances = [];\n    let labels = [];\n    let intervalSum = 0;\n    let intervalStartDate = \"\";\n    dailyPNLData.forEach((day, index) => {\n      intervalSum += parseFloat(day.balance);\n      if (index % numDaysPerInterval === 0) {\n        intervalStartDate = day.entry_date;\n      }\n      const isEndOfInterval = (index + 1) % numDaysPerInterval === 0;\n      const isLastDataPoint = index === dailyPNLData.length - 1;\n      if (isEndOfInterval || isLastDataPoint) {\n        aggregatedBalances.push(intervalSum);\n        labels.push(interval === \"monthly\" ? formatMonthYear(intervalStartDate) : formatDate(intervalStartDate));\n        intervalSum = 0;\n      }\n    });\n    return {\n      balances: aggregatedBalances,\n      labels\n    };\n  };\n  const calculateBars = () => {\n    switch (view) {\n      case \"daily\":\n        return aggregateData(\"daily\", 1);\n      case \"weekly\":\n        return aggregateData(\"weekly\", 5);\n      case \"monthly\":\n        return aggregateData(\"monthly\", 20);\n      // Approximate 20 trading days in a month\n      default:\n        return {\n          balances: [],\n          labels: []\n        };\n    }\n  };\n  const {\n    balances,\n    labels\n  } = calculateBars();\n  const maxBalance = Math.max(...balances);\n  const threshold = maxBalance * 1.2;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Weekly\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Monthly\"))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, balances.map((balance, index) => {\n    const percentage = Math.abs(balance) / threshold * 100;\n    const isPositive = balance >= 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      className: `bar ${isPositive ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `${percentage}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n\n//   useEffect(() => {\n//     const fetchDailyPNLData = async () => {\n//       try {\n//         const data = await fetchDailyPnls();\n//         setDailyPNLData(data);\n//       } catch (error) {\n//         setError(\"Error fetching Daily PNL data\");\n//         console.error(\"Error fetching Daily PNL data:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDailyPNLData();\n//   }, []);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   // Helper function to format date as MM/YYYY\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       balances = dailyPNLData.map((day) => parseFloat(day.balance));\n//       labels = dailyPNLData.map((day) => formatDate(day.entry_date));\n//       console.log(\"Daily view - Labels:\", labels);\n//     } else if (view === \"weekly\") {\n//       let weekSum = 0;\n//       let weekStartDate = \"\";\n//       dailyPNLData.forEach((day, index) => {\n//         weekSum += parseFloat(day.balance);\n\n//         if (index % 5 === 0) {\n//           weekStartDate = day.entry_date;\n//         }\n\n//         if ((index + 1) % 5 === 0 || index === dailyPNLData.length - 1) {\n//           balances.push(weekSum);\n//           labels.push(formatDate(weekStartDate));\n//           weekSum = 0;\n//         }\n//       });\n//       console.log(\"Weekly view - Final Labels:\", labels);\n//     } else if (view === \"monthly\") {\n//       let monthSum = 0;\n//       let monthLabel = \"\";\n//       dailyPNLData.forEach((day, index) => {\n//         monthSum += parseFloat(day.balance);\n//         if ((index + 1) % 20 === 0 || index === dailyPNLData.length - 1) {\n//           balances.push(monthSum);\n//           labels.push(\n//             monthLabel\n//               ? formatMonthYear(monthLabel)\n//               : formatMonthYear(day.entry_date)\n//           );\n//           console.log(\"Monthly view - Labels after push:\", labels);\n//           monthSum = 0;\n//           monthLabel = \"\";\n//         }\n//         if (!monthLabel) monthLabel = day.entry_date;\n//       });\n//       console.log(\"Monthly view - Final Labels:\", labels);\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const { balances, labels } = calculateBars();\n//   const maxBalance = Math.max(...balances);\n//   const threshold = maxBalance * 1.2;\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//       </div>\n\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const percentage = (Math.abs(balance) / threshold) * 100;\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `${percentage}%`,\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","fetchDailyPNLData","data","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatMonthYear","dateStr","year","month","split","aggregateData","interval","numDaysPerInterval","aggregatedBalances","labels","intervalSum","intervalStartDate","forEach","day","index","parseFloat","balance","entry_date","isEndOfInterval","isLastDataPoint","length","push","balances","calculateBars","maxBalance","Math","max","threshold","className","onClick","map","percentage","abs","isPositive","key","style","width"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"Error fetching Daily PNL data\");\r\n        console.error(\"Error fetching Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  const formatMonthYear = (dateStr) => {\r\n    if (!dateStr) return \"\";\r\n    const [year, month] = dateStr.split(\"-\");\r\n    return `${month}/${year}`;\r\n  };\r\n\r\n  const aggregateData = (interval, numDaysPerInterval) => {\r\n    let aggregatedBalances = [];\r\n    let labels = [];\r\n    let intervalSum = 0;\r\n    let intervalStartDate = \"\";\r\n\r\n    dailyPNLData.forEach((day, index) => {\r\n      intervalSum += parseFloat(day.balance);\r\n\r\n      if (index % numDaysPerInterval === 0) {\r\n        intervalStartDate = day.entry_date;\r\n      }\r\n\r\n      const isEndOfInterval = (index + 1) % numDaysPerInterval === 0;\r\n      const isLastDataPoint = index === dailyPNLData.length - 1;\r\n\r\n      if (isEndOfInterval || isLastDataPoint) {\r\n        aggregatedBalances.push(intervalSum);\r\n        labels.push(\r\n          interval === \"monthly\"\r\n            ? formatMonthYear(intervalStartDate)\r\n            : formatDate(intervalStartDate)\r\n        );\r\n        intervalSum = 0;\r\n      }\r\n    });\r\n\r\n    return { balances: aggregatedBalances, labels };\r\n  };\r\n\r\n  const calculateBars = () => {\r\n    switch (view) {\r\n      case \"daily\":\r\n        return aggregateData(\"daily\", 1);\r\n      case \"weekly\":\r\n        return aggregateData(\"weekly\", 5);\r\n      case \"monthly\":\r\n        return aggregateData(\"monthly\", 20); // Approximate 20 trading days in a month\r\n      default:\r\n        return { balances: [], labels: [] };\r\n    }\r\n  };\r\n\r\n  const { balances, labels } = calculateBars();\r\n  const maxBalance = Math.max(...balances);\r\n  const threshold = maxBalance * 1.2;\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            Daily\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            Weekly\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            Monthly\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"bars-container\">\r\n        {balances.map((balance, index) => {\r\n          const percentage = (Math.abs(balance) / threshold) * 100;\r\n          const isPositive = balance >= 0;\r\n          return (\r\n            <div key={index} className=\"bar-wrapper\">\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n                style={{\r\n                  width: `${percentage}%`,\r\n                }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchDailyPNLData = async () => {\r\n//       try {\r\n//         const data = await fetchDailyPnls();\r\n//         setDailyPNLData(data);\r\n//       } catch (error) {\r\n//         setError(\"Error fetching Daily PNL data\");\r\n//         console.error(\"Error fetching Daily PNL data:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   // Helper function to format date as MM/YYYY\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       balances = dailyPNLData.map((day) => parseFloat(day.balance));\r\n//       labels = dailyPNLData.map((day) => formatDate(day.entry_date));\r\n//       console.log(\"Daily view - Labels:\", labels);\r\n//     } else if (view === \"weekly\") {\r\n//       let weekSum = 0;\r\n//       let weekStartDate = \"\";\r\n//       dailyPNLData.forEach((day, index) => {\r\n//         weekSum += parseFloat(day.balance);\r\n\r\n//         if (index % 5 === 0) {\r\n//           weekStartDate = day.entry_date;\r\n//         }\r\n\r\n//         if ((index + 1) % 5 === 0 || index === dailyPNLData.length - 1) {\r\n//           balances.push(weekSum);\r\n//           labels.push(formatDate(weekStartDate));\r\n//           weekSum = 0;\r\n//         }\r\n//       });\r\n//       console.log(\"Weekly view - Final Labels:\", labels);\r\n//     } else if (view === \"monthly\") {\r\n//       let monthSum = 0;\r\n//       let monthLabel = \"\";\r\n//       dailyPNLData.forEach((day, index) => {\r\n//         monthSum += parseFloat(day.balance);\r\n//         if ((index + 1) % 20 === 0 || index === dailyPNLData.length - 1) {\r\n//           balances.push(monthSum);\r\n//           labels.push(\r\n//             monthLabel\r\n//               ? formatMonthYear(monthLabel)\r\n//               : formatMonthYear(day.entry_date)\r\n//           );\r\n//           console.log(\"Monthly view - Labels after push:\", labels);\r\n//           monthSum = 0;\r\n//           monthLabel = \"\";\r\n//         }\r\n//         if (!monthLabel) monthLabel = day.entry_date;\r\n//       });\r\n//       console.log(\"Monthly view - Final Labels:\", labels);\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const { balances, labels } = calculateBars();\r\n//   const maxBalance = Math.max(...balances);\r\n//   const threshold = maxBalance * 1.2;\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const percentage = (Math.abs(balance) / threshold) * 100;\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `${percentage}%`,\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,UAAU,EAAEC,UAAU,QAAQ,mBAAmB;AAE1D,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,OAAO,CAAC;EAEzCC,SAAS,CAAC,MAAM;IACd,MAAMa,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMb,cAAc,CAAC,CAAC;QACnCK,eAAe,CAACQ,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdC,QAAQ,CAAC,+BAA+B,CAAC;QACzCK,OAAO,CAACN,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD,CAAC,SAAS;QACRD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIN,OAAO,EAAE,oBAAOT,KAAA,CAAAkB,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,YAAe,CAAC;EACzC,IAAIb,KAAK,EAAE,oBAAOX,KAAA,CAAAkB,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAMb,KAAW,CAAC;EAEpC,MAAMc,eAAe,GAAIC,OAAO,IAAK;IACnC,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;IACvB,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC;IACxC,OAAQ,GAAED,KAAM,IAAGD,IAAK,EAAC;EAC3B,CAAC;EAED,MAAMG,aAAa,GAAGA,CAACC,QAAQ,EAAEC,kBAAkB,KAAK;IACtD,IAAIC,kBAAkB,GAAG,EAAE;IAC3B,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,iBAAiB,GAAG,EAAE;IAE1B7B,YAAY,CAAC8B,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MACnCJ,WAAW,IAAIK,UAAU,CAACF,GAAG,CAACG,OAAO,CAAC;MAEtC,IAAIF,KAAK,GAAGP,kBAAkB,KAAK,CAAC,EAAE;QACpCI,iBAAiB,GAAGE,GAAG,CAACI,UAAU;MACpC;MAEA,MAAMC,eAAe,GAAG,CAACJ,KAAK,GAAG,CAAC,IAAIP,kBAAkB,KAAK,CAAC;MAC9D,MAAMY,eAAe,GAAGL,KAAK,KAAKhC,YAAY,CAACsC,MAAM,GAAG,CAAC;MAEzD,IAAIF,eAAe,IAAIC,eAAe,EAAE;QACtCX,kBAAkB,CAACa,IAAI,CAACX,WAAW,CAAC;QACpCD,MAAM,CAACY,IAAI,CACTf,QAAQ,KAAK,SAAS,GAClBN,eAAe,CAACW,iBAAiB,CAAC,GAClC/B,UAAU,CAAC+B,iBAAiB,CAClC,CAAC;QACDD,WAAW,GAAG,CAAC;MACjB;IACF,CAAC,CAAC;IAEF,OAAO;MAAEY,QAAQ,EAAEd,kBAAkB;MAAEC;IAAO,CAAC;EACjD,CAAC;EAED,MAAMc,aAAa,GAAGA,CAAA,KAAM;IAC1B,QAAQnC,IAAI;MACV,KAAK,OAAO;QACV,OAAOiB,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;MAClC,KAAK,QAAQ;QACX,OAAOA,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;MACnC,KAAK,SAAS;QACZ,OAAOA,aAAa,CAAC,SAAS,EAAE,EAAE,CAAC;MAAE;MACvC;QACE,OAAO;UAAEiB,QAAQ,EAAE,EAAE;UAAEb,MAAM,EAAE;QAAG,CAAC;IACvC;EACF,CAAC;EAED,MAAM;IAAEa,QAAQ;IAAEb;EAAO,CAAC,GAAGc,aAAa,CAAC,CAAC;EAC5C,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGJ,QAAQ,CAAC;EACxC,MAAMK,SAAS,GAAGH,UAAU,GAAG,GAAG;EAElC,oBACEjD,KAAA,CAAAkB,aAAA;IAAKmC,SAAS,EAAC,qBAAqB;IAAAlC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClCxB,KAAA,CAAAkB,aAAA;IAAKmC,SAAS,EAAC,aAAa;IAAAlC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BxB,KAAA,CAAAkB,aAAA;IAAKmC,SAAS,EAAC,eAAe;IAAAlC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BxB,KAAA,CAAAkB,aAAA;IACEmC,SAAS,EAAG,cAAaxC,IAAI,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAG,EAAE;IAC5DyC,OAAO,EAAEA,CAAA,KAAMxC,OAAO,CAAC,OAAO,CAAE;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACjC,OAEO,CAAC,eACTxB,KAAA,CAAAkB,aAAA;IACEmC,SAAS,EAAG,cAAaxC,IAAI,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAG,EAAE;IAC7DyC,OAAO,EAAEA,CAAA,KAAMxC,OAAO,CAAC,QAAQ,CAAE;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClC,QAEO,CAAC,eACTxB,KAAA,CAAAkB,aAAA;IACEmC,SAAS,EAAG,cAAaxC,IAAI,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAG,EAAE;IAC9DyC,OAAO,EAAEA,CAAA,KAAMxC,OAAO,CAAC,SAAS,CAAE;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnC,SAEO,CACL,CACF,CAAC,eAENxB,KAAA,CAAAkB,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAK,CAAC,eAENxB,KAAA,CAAAkB,aAAA;IAAKmC,SAAS,EAAC,gBAAgB;IAAAlC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5BuB,QAAQ,CAACQ,GAAG,CAAC,CAACd,OAAO,EAAEF,KAAK,KAAK;IAChC,MAAMiB,UAAU,GAAIN,IAAI,CAACO,GAAG,CAAChB,OAAO,CAAC,GAAGW,SAAS,GAAI,GAAG;IACxD,MAAMM,UAAU,GAAGjB,OAAO,IAAI,CAAC;IAC/B,oBACEzC,KAAA,CAAAkB,aAAA;MAAKyC,GAAG,EAAEpB,KAAM;MAACc,SAAS,EAAC,aAAa;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACtCxB,KAAA,CAAAkB,aAAA;MAAMmC,SAAS,EAAC,WAAW;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEU,MAAM,CAACK,KAAK,CAAQ,CAAC,eAClDvC,KAAA,CAAAkB,aAAA;MACEmC,SAAS,EAAG,OAAMK,UAAU,GAAG,UAAU,GAAG,UAAW,EAAE;MACzDE,KAAK,EAAE;QACLC,KAAK,EAAG,GAAEL,UAAW;MACvB,CAAE;MAAArC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAEFxB,KAAA,CAAAkB,aAAA;MAAMmC,SAAS,EAAC,WAAW;MAAAlC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEpB,UAAU,CAACqC,OAAO,CAAQ,CACpD,CACF,CAAC;EAEV,CAAC,CACE,CACF,CAAC;AAEV,CAAC;AAED,eAAenC,IAAI;;AAEnignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  const barRefs = useRef([]);\n  const fetchDailyPNLData = async () => {\n    try {\n      const data = await fetchDailyPnls();\n      setDailyPNLData(data);\n    } catch (error) {\n      setError(\"Error fetching Daily PNL data\");\n      console.error(\"Error fetching Daily PNL data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const calculateBars = () => {\n    let balances = [];\n    let labels = [];\n    if (view === \"daily\") {\n      const currentWeek = getCurrentWeek(dailyPNLData);\n      balances = currentWeek.map(day => parseFloat(day.balance));\n      labels = currentWeek.map(day => formatDate(day.entry_date));\n    } else if (view === \"weekly\") {\n      const currentMonth = getCurrentMonth(dailyPNLData);\n      currentMonth.forEach(week => {\n        const weekSum = week.reduce((sum, day) => sum + parseFloat(day.balance), 0);\n        balances.push(weekSum);\n        labels.push(`${formatDate(week[0].entry_date)} - ${formatDate(week[week.length - 1].entry_date)}`);\n      });\n    } else if (view === \"monthly\") {\n      const months = getMonthsData(dailyPNLData);\n      months.forEach(month => {\n        const monthSum = month.reduce((sum, day) => sum + parseFloat(day.balance), 0);\n        balances.push(monthSum);\n        labels.push(formatMonthYear(month[0].entry_date));\n      });\n    }\n    return {\n      balances,\n      labels\n    };\n  };\n  const getCurrentWeek = data => {\n    const weekData = [];\n    const today = new Date();\n    const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));\n    const endOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + 6));\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n        weekData.push(entry);\n      }\n    });\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n    return weekData;\n  };\n  const getCurrentMonth = data => {\n    const weeks = [];\n    let week = [];\n    const today = new Date();\n    const month = today.getMonth();\n    data.forEach((entry, index) => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate.getMonth() === month) {\n        week.push(entry);\n        if ((index + 1) % 5 === 0) {\n          week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          weeks.push(week);\n          week = [];\n        }\n      }\n    });\n    if (week.length) {\n      week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n      weeks.push(week);\n    }\n    return weeks;\n  };\n  const getMonthsData = data => {\n    const months = Array.from({\n      length: 12\n    }, () => []);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      months[entryDate.getMonth()].push(entry);\n    });\n    return months.filter(month => month.length > 0); // Filter out any empty month arrays\n  };\n  const formatMonthYear = dateStr => {\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n    const dateParts = dateStr.split(\"-\");\n    const month = dateParts[1];\n    const year = dateParts[0];\n    return `${month}/${year}`;\n  };\n  const animateBars = balances => {\n    balances.forEach((balance, index) => {\n      const barElem = barRefs.current[index].current;\n      if (barElem) {\n        let width = 0;\n        const threshold = Math.max(...balances) * 5; // Adjust as per your scaling logic\n        const percentage = Math.abs(balance) / threshold * 100;\n        const interval = setInterval(() => {\n          if (width >= percentage) {\n            clearInterval(interval);\n          } else {\n            width++;\n            barElem.style.width = width + \"%\";\n            barElem.innerHTML = width + \"%\"; // Update the label if desired\n          }\n        }, 10);\n      }\n    });\n  };\n  useEffect(() => {\n    fetchDailyPNLData();\n  }, []);\n  useEffect(() => {\n    const {\n      balances\n    } = calculateBars();\n    barRefs.current = balances.map(() => React.createRef());\n    animateBars(balances);\n  }, [dailyPNLData, view]);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, error);\n  const {\n    balances,\n    labels\n  } = calculateBars();\n  const maxBalance = Math.max(...balances);\n  const threshold = maxBalance * 5;\n  const headerDate = view === \"daily\" ? new Date(dailyPNLData[0].entry_date).toLocaleDateString() : view === \"weekly\" ? formatMonthYear(dailyPNLData[0].entry_date) : dailyPNLData[0].entry_date.split(\"-\")[0];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, \"Weekly\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"Monthly\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, headerDate)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, balances.map((balance, index) => {\n    const percentage = Math.abs(balance) / threshold * 100;\n    const isPositive = balance >= 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      ref: barRefs.current[index],\n      className: `bar ${isPositive ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `${percentage}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","barRefs","fetchDailyPNLData","data","console","calculateBars","balances","labels","currentWeek","getCurrentWeek","map","day","parseFloat","balance","entry_date","currentMonth","getCurrentMonth","forEach","week","weekSum","reduce","sum","push","length","months","getMonthsData","month","monthSum","formatMonthYear","weekData","today","Date","startOfWeek","setDate","getDate","getDay","endOfWeek","entry","entryDate","sort","a","b","weeks","getMonth","index","Array","from","filter","dateStr","includes","dateParts","split","year","animateBars","barElem","current","width","threshold","Math","max","percentage","abs","interval","setInterval","clearInterval","style","innerHTML","createRef","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","maxBalance","headerDate","toLocaleDateString","className","onClick","isPositive","key","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n  const barRefs = useRef([]);\r\n\r\n  const fetchDailyPNLData = async () => {\r\n    try {\r\n      const data = await fetchDailyPnls();\r\n      setDailyPNLData(data);\r\n    } catch (error) {\r\n      setError(\"Error fetching Daily PNL data\");\r\n      console.error(\"Error fetching Daily PNL data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateBars = () => {\r\n    let balances = [];\r\n    let labels = [];\r\n\r\n    if (view === \"daily\") {\r\n      const currentWeek = getCurrentWeek(dailyPNLData);\r\n      balances = currentWeek.map((day) => parseFloat(day.balance));\r\n      labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n    } else if (view === \"weekly\") {\r\n      const currentMonth = getCurrentMonth(dailyPNLData);\r\n      currentMonth.forEach((week) => {\r\n        const weekSum = week.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance),\r\n          0\r\n        );\r\n        balances.push(weekSum);\r\n        labels.push(\r\n          `${formatDate(week[0].entry_date)} - ${formatDate(\r\n            week[week.length - 1].entry_date\r\n          )}`\r\n        );\r\n      });\r\n    } else if (view === \"monthly\") {\r\n      const months = getMonthsData(dailyPNLData);\r\n      months.forEach((month) => {\r\n        const monthSum = month.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance),\r\n          0\r\n        );\r\n        balances.push(monthSum);\r\n        labels.push(formatMonthYear(month[0].entry_date));\r\n      });\r\n    }\r\n\r\n    return { balances, labels };\r\n  };\r\n\r\n  const getCurrentWeek = (data) => {\r\n    const weekData = [];\r\n    const today = new Date();\r\n    const startOfWeek = new Date(\r\n      today.setDate(today.getDate() - today.getDay())\r\n    );\r\n    const endOfWeek = new Date(\r\n      today.setDate(today.getDate() - today.getDay() + 6)\r\n    );\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n        weekData.push(entry);\r\n      }\r\n    });\r\n\r\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n    return weekData;\r\n  };\r\n\r\n  const getCurrentMonth = (data) => {\r\n    const weeks = [];\r\n    let week = [];\r\n    const today = new Date();\r\n    const month = today.getMonth();\r\n\r\n    data.forEach((entry, index) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate.getMonth() === month) {\r\n        week.push(entry);\r\n        if ((index + 1) % 5 === 0) {\r\n          week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n          weeks.push(week);\r\n          week = [];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (week.length) {\r\n      week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n      weeks.push(week);\r\n    }\r\n    return weeks;\r\n  };\r\n\r\n  const getMonthsData = (data) => {\r\n    const months = Array.from({ length: 12 }, () => []);\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      months[entryDate.getMonth()].push(entry);\r\n    });\r\n    return months.filter((month) => month.length > 0); // Filter out any empty month arrays\r\n  };\r\n\r\n  const formatMonthYear = (dateStr) => {\r\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n    const dateParts = dateStr.split(\"-\");\r\n    const month = dateParts[1];\r\n    const year = dateParts[0];\r\n    return `${month}/${year}`;\r\n  };\r\n\r\n  const animateBars = (balances) => {\r\n    balances.forEach((balance, index) => {\r\n      const barElem = barRefs.current[index].current;\r\n      if (barElem) {\r\n        let width = 0;\r\n        const threshold = Math.max(...balances) * 5; // Adjust as per your scaling logic\r\n        const percentage = (Math.abs(balance) / threshold) * 100;\r\n\r\n        const interval = setInterval(() => {\r\n          if (width >= percentage) {\r\n            clearInterval(interval);\r\n          } else {\r\n            width++;\r\n            barElem.style.width = width + \"%\";\r\n            barElem.innerHTML = width + \"%\"; // Update the label if desired\r\n          }\r\n        }, 10);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { balances } = calculateBars();\r\n    barRefs.current = balances.map(() => React.createRef());\r\n    animateBars(balances);\r\n  }, [dailyPNLData, view]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  const { balances, labels } = calculateBars();\r\n  const maxBalance = Math.max(...balances);\r\n  const threshold = maxBalance * 5;\r\n\r\n  const headerDate =\r\n    view === \"daily\"\r\n      ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n      : view === \"weekly\"\r\n      ? formatMonthYear(dailyPNLData[0].entry_date)\r\n      : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            Daily\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            Weekly\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            Monthly\r\n          </button>\r\n        </div>\r\n        <div className=\"header-date\">{headerDate}</div>\r\n      </div>\r\n      <hr />\r\n      <div className=\"bars-container\">\r\n        {balances.map((balance, index) => {\r\n          const percentage = (Math.abs(balance) / threshold) * 100;\r\n          const isPositive = balance >= 0;\r\n          return (\r\n            <div key={index} className=\"bar-wrapper\">\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                ref={barRefs.current[index]}\r\n                className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n                style={{\r\n                  width: `${percentage}%`,\r\n                }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
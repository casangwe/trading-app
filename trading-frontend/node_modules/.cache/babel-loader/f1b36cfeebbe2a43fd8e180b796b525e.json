{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"chart.js\";\nconst Graph = () => {\n  const chartRef = useRef(null);\n  const [graphData, setGraphData] = useState({});\n  useEffect(() => {\n    console.log(\"Fetching data...\");\n    fetchData(); // Fetch data initially\n    const intervalId = setInterval(fetchData, 60000); // Fetch data every 1 minute (adjust as needed)\n\n    return () => {\n      clearInterval(intervalId); // Clear interval on component unmount\n    };\n  }, []);\n  const fetchData = () => {\n    // Mocking the provided data for demonstration purposes\n    const data = {\n      \"1D\": 800,\n      \"1M\": 600,\n      \"1W\": 600,\n      \"1Y\": 600,\n      \"3M\": 600,\n      Max: 600,\n      YTD: 600\n    };\n\n    // Transform data into arrays of labels and values\n    const labels = Object.keys(data);\n    const values = Object.values(data);\n\n    // Set the graphData state with the labels and values\n    setGraphData({\n      labels: labels,\n      values: values\n    });\n  };\n  useEffect(() => {\n    if (Object.keys(graphData).length > 0) {\n      console.log(\"Rendering chart...\");\n      renderChart();\n    }\n  }, [graphData]);\n  const renderChart = () => {\n    const {\n      labels,\n      values\n    } = graphData;\n    const ctx = chartRef.current.getContext(\"2d\");\n    new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"Value\",\n          data: values,\n          backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n          // Adjust color as needed\n          borderColor: \"rgba(54, 162, 235, 1)\",\n          // Adjust color as needed\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            display: false // Hides the y-axis\n          }\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Graph;","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","Graph","chartRef","graphData","setGraphData","console","log","fetchData","intervalId","setInterval","clearInterval","data","Max","YTD","labels","Object","keys","values","length","renderChart","ctx","current","getContext","type","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","display","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nconst Graph = () => {\r\n  const chartRef = useRef(null);\r\n  const [graphData, setGraphData] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching data...\");\r\n    fetchData(); // Fetch data initially\r\n    const intervalId = setInterval(fetchData, 60000); // Fetch data every 1 minute (adjust as needed)\r\n\r\n    return () => {\r\n      clearInterval(intervalId); // Clear interval on component unmount\r\n    };\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    // Mocking the provided data for demonstration purposes\r\n    const data = {\r\n      \"1D\": 800,\r\n      \"1M\": 600,\r\n      \"1W\": 600,\r\n      \"1Y\": 600,\r\n      \"3M\": 600,\r\n      Max: 600,\r\n      YTD: 600,\r\n    };\r\n\r\n    // Transform data into arrays of labels and values\r\n    const labels = Object.keys(data);\r\n    const values = Object.values(data);\r\n\r\n    // Set the graphData state with the labels and values\r\n    setGraphData({ labels: labels, values: values });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(graphData).length > 0) {\r\n      console.log(\"Rendering chart...\");\r\n      renderChart();\r\n    }\r\n  }, [graphData]);\r\n\r\n  const renderChart = () => {\r\n    const { labels, values } = graphData;\r\n\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    new Chart(ctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: \"Value\",\r\n            data: values,\r\n            backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Adjust color as needed\r\n            borderColor: \"rgba(54, 162, 235, 1)\", // Adjust color as needed\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          y: {\r\n            display: false, // Hides the y-axis\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,UAAU;AAE5B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CF,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/BC,SAAS,CAAC,CAAC,CAAC,CAAC;IACb,MAAMC,UAAU,GAAGC,WAAW,CAACF,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;;IAElD,OAAO,MAAM;MACXG,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,SAAS,GAAGA,CAAA,KAAM;IACtB;IACA,MAAMI,IAAI,GAAG;MACX,IAAI,EAAE,GAAG;MACT,IAAI,EAAE,GAAG;MACT,IAAI,EAAE,GAAG;MACT,IAAI,EAAE,GAAG;MACT,IAAI,EAAE,GAAG;MACTC,GAAG,EAAE,GAAG;MACRC,GAAG,EAAE;IACP,CAAC;;IAED;IACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC;IAChC,MAAMM,MAAM,GAAGF,MAAM,CAACE,MAAM,CAACN,IAAI,CAAC;;IAElC;IACAP,YAAY,CAAC;MAAEU,MAAM,EAAEA,MAAM;MAAEG,MAAM,EAAEA;IAAO,CAAC,CAAC;EAClD,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd,IAAIkB,MAAM,CAACC,IAAI,CAACb,SAAS,CAAC,CAACe,MAAM,GAAG,CAAC,EAAE;MACrCb,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjCa,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAAChB,SAAS,CAAC,CAAC;EAEf,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAM;MAAEL,MAAM;MAAEG;IAAO,CAAC,GAAGd,SAAS;IAEpC,MAAMiB,GAAG,GAAGlB,QAAQ,CAACmB,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC7C,IAAItB,KAAK,CAACoB,GAAG,EAAE;MACbG,IAAI,EAAE,KAAK;MACXZ,IAAI,EAAE;QACJG,MAAM,EAAEA,MAAM;QACdU,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,OAAO;UACdd,IAAI,EAAEM,MAAM;UACZS,eAAe,EAAE,yBAAyB;UAAE;UAC5CC,WAAW,EAAE,uBAAuB;UAAE;UACtCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,OAAO,EAAE,KAAK,CAAE;UAClB;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEpC,KAAA,CAAAqC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACE3C,KAAA,CAAAqC,aAAA;IAAQO,GAAG,EAAEtC,QAAS;IAAAgC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACrB,CAAC;AAEV,CAAC;AAED,eAAetC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}
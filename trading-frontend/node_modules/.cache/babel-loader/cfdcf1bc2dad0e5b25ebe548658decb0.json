{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange,\n  periodPL\n}) => {\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n    script.async = true;\n    script.onload = () => {\n      const ctx = chartRef.current.getContext(\"2d\");\n      const myChart = new window.Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: [],\n          // Labels will be dynamically set based on the selected time period\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: [],\n            // Data will be dynamically set based on the selected time period\n            borderColor: \"green\",\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            borderWidth: 2\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                display: false\n              },\n              min: 0,\n              max: 1000,\n              position: \"center\"\n            },\n            y: {\n              display: false\n            }\n          }\n        }\n      });\n      return () => {\n        myChart.destroy();\n      };\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, [trades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => onTimePeriodChange(\"Max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"MAX\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"period-pl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, `${timePeriod} P/L`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, periodPL.toFixed(2))));\n};\nexport default AccountGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = ({ trades, onTimePeriodChange, periodPL }) => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n\n//       // Calculate profits for the selected time period\n//       const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\n\n//       // Data for the chart based on profitsData\n//       const myChart = new window.Chart(ctx, {\n//         type: \"bar\",\n//         data: {\n//           labels: profitsData.labels,\n//           datasets: [\n//             {\n//               label: \"Profit/Loss\",\n//               data: profitsData.profits,\n//               backgroundColor: \"lightgreen\",\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: true,\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//             },\n//             y: {\n//               display: true,\n//               title: {\n//                 display: true,\n//                 text: \"Profit/Loss\",\n//               },\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [trades, timePeriod]);\n\n//   // Function to calculate profits for the selected time period\n//   const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\n//     // Add logic here to calculate profits/losses based on the selected time period\n//     // You can use trades array and selectedTimePeriod to calculate profits for that period\n//     // Return an object with labels and profits data to display on the chart\n\n//     // For demonstration, let's assume profitsData is an array with sample data\n//     const profitsData = {\n//       labels: [\"Day 1\", \"Day 2\", \"Day 3\"], // Example labels\n//       profits: [100, -50, 75], // Example profits/losses for each label\n//     };\n\n//     return profitsData;\n//   };\n//   // useEffect(() => {\n//   //   // Load Chart.js from the CDN dynamically\n//   //   const script = document.createElement(\"script\");\n//   //   script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//   //   script.async = true;\n//   //   script.onload = () => {\n//   //     // Initialize Chart.js instance after the script has loaded\n//   //     const ctx = chartRef.current.getContext(\"2d\");\n//   //     const myChart = new window.Chart(ctx, {\n//   //       type: \"line\",\n//   //       data: {\n//   //         labels: getLabels(timePeriod), // Get labels based on the selected time period\n//   //         datasets: [\n//   //           {\n//   //             data: getData(trades, timePeriod), // Get data based on the selected time period and trades\n//   //             borderColor: \"green\", // Green color for stock price line\n//   //             backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//   //             borderWidth: 2, // Width of the line\n//   //           },\n//   //         ],\n//   //       },\n//   //       options: {\n//   //         plugins: {\n//   //           legend: {\n//   //             display: false, // Hide legend\n//   //           },\n//   //         },\n//   //         scales: {\n//   //           x: {\n//   //             grid: {\n//   //               display: false, // Hide grid lines\n//   //             },\n//   //             ticks: {\n//   //               display: false, // Hide ticks\n//   //             },\n//   //             min: 0, // Start y-axis from 0\n//   //             max: 1000, // Set max value of y-axis\n//   //             position: \"center\",\n//   //           },\n//   //           y: {\n//   //             display: false, // Hide y-axis\n//   //           },\n//   //         },\n//   //       },\n//   //     });\n\n//   //     return () => {\n//   //       myChart.destroy(); // Clean up chart on unmount\n//   //     };\n//   //   };\n\n//   //   document.body.appendChild(script);\n\n//   //   return () => {\n//   //     document.body.removeChild(script); // Clean up script tag on unmount\n//   //   };\n//   // }, [trades, timePeriod]);\n\n//   // // Function to get labels based on the selected time period\n//   // const getLabels = (period) => {\n//   //   // Implement logic to return labels based on the selected time period\n//   //   // For example,\n//   //   return [];\n//   // };\n\n//   // // Function to get data based on the selected time period and trades\n//   // const getData = (trades, period) => {\n//   //   // Implement logic to return data based on the selected time period and trades\n//   //   // For example, if period is \"weeks\", return data for weeks\n//   //   return [];\n//   // };\n\n//   // Function to handle time period change\n//   const handleTimePeriodClick = (period) => {\n//     setTimePeriod(period); // Update timePeriod state\n//     onTimePeriodChange(period); // Call the onTimePeriodChange function from props\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"1D\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"1W\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"1M\")}\n//         >\n//           1M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"3M\")}\n//         >\n//           3M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"YTD\")}\n//         >\n//           YTD\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"1Y\")}\n//         >\n//           1Y\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodClick(\"Max\")}\n//         >\n//           MAX\n//         </button>\n//       </div>\n//       {/* <div className=\"period-pl\">\n//         <p>{`${timePeriod} P/L`}</p>\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\n//       </div> */}\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;\n\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import \"./styles/accountGraph.css\";\n\n// // const AccountGraph = () => {\n// //   const chartRef = useRef(null); // Reference to the canvas element\n// //   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n\n// //   useEffect(() => {\n// //     // Load Chart.js from the CDN dynamically\n// //     const script = document.createElement(\"script\");\n// //     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n// //     script.async = true;\n// //     script.onload = () => {\n// //       // Initialize Chart.js instance after the script has loaded\n// //       const ctx = chartRef.current.getContext(\"2d\");\n// //       const myChart = new window.Chart(ctx, {\n// //         type: \"line\",\n// //         data: {\n// //           labels: getLabels(timePeriod), // Get labels based on the selected time period\n// //           datasets: [\n// //             {\n// //               data: getData(timePeriod), // Get data based on the selected time period\n// //               borderColor: \"green\", // Green color for stock price line\n// //               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n// //               borderWidth: 2, // Width of the line\n// //             },\n// //           ],\n// //         },\n// //         options: {\n// //           plugins: {\n// //             legend: {\n// //               display: false, // Hide legend\n// //             },\n// //           },\n// //           scales: {\n// //             x: {\n// //               grid: {\n// //                 display: false, // Hide grid lines\n// //               },\n// //               ticks: {\n// //                 display: false, // Hide ticks\n// //               },\n// //               min: 0, // Start y-axis from 0\n// //               max: 1000, // Set max value of y-axis\n// //               position: \"center\",\n// //             },\n// //             y: {\n// //               display: false, // Hide y-axis\n// //             },\n// //           },\n// //         },\n// //       });\n\n// //       return () => {\n// //         myChart.destroy(); // Clean up chart on unmount\n// //       };\n// //     };\n\n// //     document.body.appendChild(script);\n\n// //     return () => {\n// //       document.body.removeChild(script); // Clean up script tag on unmount\n// //     };\n// //   }); // Re-render the chart when the time period changes\n\n// //   // Function to get labels based on the selected time period\n// //   const getLabels = (period) => {\n// //     // Implement logic to return labels based on the selected time period\n// //     // For example,\n// //   };\n\n// //   // Function to get data based on the selected time period\n// //   const getData = (period) => {\n// //     // Implement logic to return data based on the selected time period\n// //     // For example, if period is \"weeks\", return data for weeks\n// //   };\n\n// //   // Function to handle time period change\n// //   const handleTimePeriodChange = (period) => {\n// //     setTimePeriod(period);\n// //   };\n\n// //   return (\n// //     <div className=\"account-graph\">\n// //       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n// //       <div className=\"time-period-selector\">\n// //         <button\n// //           className=\"time-period-button\"\n// //           onClick={() => handleTimePeriodChange(\"days\")}\n// //         >\n// //           1D\n// //         </button>\n// //         <button\n// //           className=\"time-period-button\"\n// //           onClick={() => handleTimePeriodChange(\"weeks\")}\n// //         >\n// //           1W\n// //         </button>\n// //         <button\n// //           className=\"time-period-button\"\n// //           onClick={() => handleTimePeriodChange(\"months\")}\n// //         >\n// //           1M\n// //         </button>\n// // <button\n// //   className=\"time-period-button\"\n// //   onClick={() => handleTimePeriodChange(\"3-months\")}\n// // >\n// //   3M\n// // </button>\n// // <button\n// //   className=\"time-period-button\"\n// //   onClick={() => handleTimePeriodChange(\"YTD\")}\n// // >\n// //   YTD\n// // </button>\n// // <button\n// //   className=\"time-period-button\"\n// //   onClick={() => handleTimePeriodChange(\"1-year\")}\n// // >\n// //   1Y\n// // </button>\n// // <button\n// //   className=\"time-period-button\"\n// //   onClick={() => handleTimePeriodChange(\"max\")}\n// // >\n// //   MAX\n// // </button>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AccountGraph;\n// // // import React, { useEffect, useRef, useState } from \"react\";\n// // // import \"./styles/accountGraph.css\";\n\n// // // const AccountGraph = () => {\n// // //   const chartRef = useRef(null); // Reference to the canvas element\n// // //   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n// // //   useEffect(() => {\n// // //     // Fetch top profitable trades from API\n// // //     const fetchTopProfitableTrades = () => {\n// // //       fetch(\"http://localhost:8000/trades/top-profitable/\")\n// // //         .then((response) => response.json())\n// // //         .then((data) => setTopProfitableTrades(data))\n// // //         .catch((error) =>\n// // //           console.error(\"Error fetching top profitable trades:\", error)\n// // //         );\n// // //     };\n\n// // //     fetchTopProfitableTrades();\n// // //   }, []); // Fetch data only once on component mount\n\n// // //   useEffect(() => {\n// // //     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n// // //     // Load Chart.js from the CDN dynamically\n// // //     const script = document.createElement(\"script\");\n// // //     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n// // //     script.async = true;\n// // //     script.onload = () => {\n// // //       // Initialize Chart.js instance after the script has loaded\n// // //       const ctx = chartRef.current.getContext(\"2d\");\n// // //       const myChart = new window.Chart(ctx, {\n// // //         type: \"bar\", // Change chart type to \"bar\"\n// // //         data: {\n// // //           labels: topProfitableTrades.map((trade) => trade.trade_date), // Labels as trade dates\n// // //           datasets: [\n// // //             {\n// // //               label: \"Profit/Loss\",\n// // //               data: getData(), // Call getData function to get profit data\n// // //               backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Blue color with transparency\n// // //               borderColor: \"rgba(54, 162, 235, 1)\", // Solid blue border color\n// // //               borderWidth: 1, // Width of the border\n// // //             },\n// // //           ],\n// // //         },\n// // //         options: {\n// // //           scales: {\n// // //             y: {\n// // //               beginAtZero: true, // Start y-axis from zero\n// // //               title: {\n// // //                 display: true,\n// // //                 text: \"Profit/Loss\", // Y-axis title\n// // //               },\n// // //             },\n// // //             x: {\n// // //               title: {\n// // //                 display: true,\n// // //                 text: \"Trade Date\", // X-axis title\n// // //               },\n// // //             },\n// // //           },\n// // //         },\n// // //       });\n\n// // //       return () => {\n// // //         myChart.destroy(); // Clean up chart on unmount\n// // //       };\n// // //     };\n\n// // //     document.body.appendChild(script);\n\n// // //     return () => {\n// // //       document.body.removeChild(script); // Clean up script tag on unmount\n// // //     };\n// // //   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\n\n// // //   // Function to get profit data from topProfitableTrades\n// // //   const getData = () => {\n// // //     return topProfitableTrades.map((trade) => parseFloat(trade.profit)); // Convert profit to float\n// // //   };\n\n// // //   return (\n// // //     <div className=\"account-graph\">\n// // //       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","trades","onTimePeriodChange","periodPL","chartRef","script","document","createElement","src","async","onload","ctx","current","getContext","myChart","window","Chart","type","data","labels","datasets","label","borderColor","backgroundColor","borderWidth","options","plugins","legend","display","scales","x","grid","ticks","min","max","position","y","destroy","body","appendChild","removeChild","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","timePeriod","toFixed"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange, periodPL }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"line\",\r\n        data: {\r\n          labels: [], // Labels will be dynamically set based on the selected time period\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: [], // Data will be dynamically set based on the selected time period\r\n              borderColor: \"green\",\r\n              backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n              borderWidth: 2,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                display: false,\r\n              },\r\n              min: 0,\r\n              max: 1000,\r\n              position: \"center\",\r\n            },\r\n            y: {\r\n              display: false,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy();\r\n      };\r\n    };\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, [trades]);\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} />\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => onTimePeriodChange(\"Max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n      <div className=\"period-pl\">\r\n        <p>{`${timePeriod} P/L`}</p>\r\n        <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = ({ trades, onTimePeriodChange, periodPL }) => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n//       // Calculate profits for the selected time period\r\n//       const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\r\n\r\n//       // Data for the chart based on profitsData\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"bar\",\r\n//         data: {\r\n//           labels: profitsData.labels,\r\n//           datasets: [\r\n//             {\r\n//               label: \"Profit/Loss\",\r\n//               data: profitsData.profits,\r\n//               backgroundColor: \"lightgreen\",\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: true,\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//             },\r\n//             y: {\r\n//               display: true,\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Profit/Loss\",\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [trades, timePeriod]);\r\n\r\n//   // Function to calculate profits for the selected time period\r\n//   const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\r\n//     // Add logic here to calculate profits/losses based on the selected time period\r\n//     // You can use trades array and selectedTimePeriod to calculate profits for that period\r\n//     // Return an object with labels and profits data to display on the chart\r\n\r\n//     // For demonstration, let's assume profitsData is an array with sample data\r\n//     const profitsData = {\r\n//       labels: [\"Day 1\", \"Day 2\", \"Day 3\"], // Example labels\r\n//       profits: [100, -50, 75], // Example profits/losses for each label\r\n//     };\r\n\r\n//     return profitsData;\r\n//   };\r\n//   // useEffect(() => {\r\n//   //   // Load Chart.js from the CDN dynamically\r\n//   //   const script = document.createElement(\"script\");\r\n//   //   script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//   //   script.async = true;\r\n//   //   script.onload = () => {\r\n//   //     // Initialize Chart.js instance after the script has loaded\r\n//   //     const ctx = chartRef.current.getContext(\"2d\");\r\n//   //     const myChart = new window.Chart(ctx, {\r\n//   //       type: \"line\",\r\n//   //       data: {\r\n//   //         labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//   //         datasets: [\r\n//   //           {\r\n//   //             data: getData(trades, timePeriod), // Get data based on the selected time period and trades\r\n//   //             borderColor: \"green\", // Green color for stock price line\r\n//   //             backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//   //             borderWidth: 2, // Width of the line\r\n//   //           },\r\n//   //         ],\r\n//   //       },\r\n//   //       options: {\r\n//   //         plugins: {\r\n//   //           legend: {\r\n//   //             display: false, // Hide legend\r\n//   //           },\r\n//   //         },\r\n//   //         scales: {\r\n//   //           x: {\r\n//   //             grid: {\r\n//   //               display: false, // Hide grid lines\r\n//   //             },\r\n//   //             ticks: {\r\n//   //               display: false, // Hide ticks\r\n//   //             },\r\n//   //             min: 0, // Start y-axis from 0\r\n//   //             max: 1000, // Set max value of y-axis\r\n//   //             position: \"center\",\r\n//   //           },\r\n//   //           y: {\r\n//   //             display: false, // Hide y-axis\r\n//   //           },\r\n//   //         },\r\n//   //       },\r\n//   //     });\r\n\r\n//   //     return () => {\r\n//   //       myChart.destroy(); // Clean up chart on unmount\r\n//   //     };\r\n//   //   };\r\n\r\n//   //   document.body.appendChild(script);\r\n\r\n//   //   return () => {\r\n//   //     document.body.removeChild(script); // Clean up script tag on unmount\r\n//   //   };\r\n//   // }, [trades, timePeriod]);\r\n\r\n//   // // Function to get labels based on the selected time period\r\n//   // const getLabels = (period) => {\r\n//   //   // Implement logic to return labels based on the selected time period\r\n//   //   // For example,\r\n//   //   return [];\r\n//   // };\r\n\r\n//   // // Function to get data based on the selected time period and trades\r\n//   // const getData = (trades, period) => {\r\n//   //   // Implement logic to return data based on the selected time period and trades\r\n//   //   // For example, if period is \"weeks\", return data for weeks\r\n//   //   return [];\r\n//   // };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodClick = (period) => {\r\n//     setTimePeriod(period); // Update timePeriod state\r\n//     onTimePeriodChange(period); // Call the onTimePeriodChange function from props\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"1D\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"1W\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"1M\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"3M\")}\r\n//         >\r\n//           3M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"YTD\")}\r\n//         >\r\n//           YTD\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"1Y\")}\r\n//         >\r\n//           1Y\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodClick(\"Max\")}\r\n//         >\r\n//           MAX\r\n//         </button>\r\n//       </div>\r\n//       {/* <div className=\"period-pl\">\r\n//         <p>{`${timePeriod} P/L`}</p>\r\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n//       </div> */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n\r\n// // import React, { useEffect, useRef, useState } from \"react\";\r\n// // import \"./styles/accountGraph.css\";\r\n\r\n// // const AccountGraph = () => {\r\n// //   const chartRef = useRef(null); // Reference to the canvas element\r\n// //   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n\r\n// //   useEffect(() => {\r\n// //     // Load Chart.js from the CDN dynamically\r\n// //     const script = document.createElement(\"script\");\r\n// //     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n// //     script.async = true;\r\n// //     script.onload = () => {\r\n// //       // Initialize Chart.js instance after the script has loaded\r\n// //       const ctx = chartRef.current.getContext(\"2d\");\r\n// //       const myChart = new window.Chart(ctx, {\r\n// //         type: \"line\",\r\n// //         data: {\r\n// //           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n// //           datasets: [\r\n// //             {\r\n// //               data: getData(timePeriod), // Get data based on the selected time period\r\n// //               borderColor: \"green\", // Green color for stock price line\r\n// //               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n// //               borderWidth: 2, // Width of the line\r\n// //             },\r\n// //           ],\r\n// //         },\r\n// //         options: {\r\n// //           plugins: {\r\n// //             legend: {\r\n// //               display: false, // Hide legend\r\n// //             },\r\n// //           },\r\n// //           scales: {\r\n// //             x: {\r\n// //               grid: {\r\n// //                 display: false, // Hide grid lines\r\n// //               },\r\n// //               ticks: {\r\n// //                 display: false, // Hide ticks\r\n// //               },\r\n// //               min: 0, // Start y-axis from 0\r\n// //               max: 1000, // Set max value of y-axis\r\n// //               position: \"center\",\r\n// //             },\r\n// //             y: {\r\n// //               display: false, // Hide y-axis\r\n// //             },\r\n// //           },\r\n// //         },\r\n// //       });\r\n\r\n// //       return () => {\r\n// //         myChart.destroy(); // Clean up chart on unmount\r\n// //       };\r\n// //     };\r\n\r\n// //     document.body.appendChild(script);\r\n\r\n// //     return () => {\r\n// //       document.body.removeChild(script); // Clean up script tag on unmount\r\n// //     };\r\n// //   }); // Re-render the chart when the time period changes\r\n\r\n// //   // Function to get labels based on the selected time period\r\n// //   const getLabels = (period) => {\r\n// //     // Implement logic to return labels based on the selected time period\r\n// //     // For example,\r\n// //   };\r\n\r\n// //   // Function to get data based on the selected time period\r\n// //   const getData = (period) => {\r\n// //     // Implement logic to return data based on the selected time period\r\n// //     // For example, if period is \"weeks\", return data for weeks\r\n// //   };\r\n\r\n// //   // Function to handle time period change\r\n// //   const handleTimePeriodChange = (period) => {\r\n// //     setTimePeriod(period);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"account-graph\">\r\n// //       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n// //       <div className=\"time-period-selector\">\r\n// //         <button\r\n// //           className=\"time-period-button\"\r\n// //           onClick={() => handleTimePeriodChange(\"days\")}\r\n// //         >\r\n// //           1D\r\n// //         </button>\r\n// //         <button\r\n// //           className=\"time-period-button\"\r\n// //           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n// //         >\r\n// //           1W\r\n// //         </button>\r\n// //         <button\r\n// //           className=\"time-period-button\"\r\n// //           onClick={() => handleTimePeriodChange(\"months\")}\r\n// //         >\r\n// //           1M\r\n// //         </button>\r\n// // <button\r\n// //   className=\"time-period-button\"\r\n// //   onClick={() => handleTimePeriodChange(\"3-months\")}\r\n// // >\r\n// //   3M\r\n// // </button>\r\n// // <button\r\n// //   className=\"time-period-button\"\r\n// //   onClick={() => handleTimePeriodChange(\"YTD\")}\r\n// // >\r\n// //   YTD\r\n// // </button>\r\n// // <button\r\n// //   className=\"time-period-button\"\r\n// //   onClick={() => handleTimePeriodChange(\"1-year\")}\r\n// // >\r\n// //   1Y\r\n// // </button>\r\n// // <button\r\n// //   className=\"time-period-button\"\r\n// //   onClick={() => handleTimePeriodChange(\"max\")}\r\n// // >\r\n// //   MAX\r\n// // </button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default AccountGraph;\r\n// // // import React, { useEffect, useRef, useState } from \"react\";\r\n// // // import \"./styles/accountGraph.css\";\r\n\r\n// // // const AccountGraph = () => {\r\n// // //   const chartRef = useRef(null); // Reference to the canvas element\r\n// // //   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n// // //   useEffect(() => {\r\n// // //     // Fetch top profitable trades from API\r\n// // //     const fetchTopProfitableTrades = () => {\r\n// // //       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n// // //         .then((response) => response.json())\r\n// // //         .then((data) => setTopProfitableTrades(data))\r\n// // //         .catch((error) =>\r\n// // //           console.error(\"Error fetching top profitable trades:\", error)\r\n// // //         );\r\n// // //     };\r\n\r\n// // //     fetchTopProfitableTrades();\r\n// // //   }, []); // Fetch data only once on component mount\r\n\r\n// // //   useEffect(() => {\r\n// // //     if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n// // //     // Load Chart.js from the CDN dynamically\r\n// // //     const script = document.createElement(\"script\");\r\n// // //     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n// // //     script.async = true;\r\n// // //     script.onload = () => {\r\n// // //       // Initialize Chart.js instance after the script has loaded\r\n// // //       const ctx = chartRef.current.getContext(\"2d\");\r\n// // //       const myChart = new window.Chart(ctx, {\r\n// // //         type: \"bar\", // Change chart type to \"bar\"\r\n// // //         data: {\r\n// // //           labels: topProfitableTrades.map((trade) => trade.trade_date), // Labels as trade dates\r\n// // //           datasets: [\r\n// // //             {\r\n// // //               label: \"Profit/Loss\",\r\n// // //               data: getData(), // Call getData function to get profit data\r\n// // //               backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Blue color with transparency\r\n// // //               borderColor: \"rgba(54, 162, 235, 1)\", // Solid blue border color\r\n// // //               borderWidth: 1, // Width of the border\r\n// // //             },\r\n// // //           ],\r\n// // //         },\r\n// // //         options: {\r\n// // //           scales: {\r\n// // //             y: {\r\n// // //               beginAtZero: true, // Start y-axis from zero\r\n// // //               title: {\r\n// // //                 display: true,\r\n// // //                 text: \"Profit/Loss\", // Y-axis title\r\n// // //               },\r\n// // //             },\r\n// // //             x: {\r\n// // //               title: {\r\n// // //                 display: true,\r\n// // //                 text: \"Trade Date\", // X-axis title\r\n// // //               },\r\n// // //             },\r\n// // //           },\r\n// // //         },\r\n// // //       });\r\n\r\n// // //       return () => {\r\n// // //         myChart.destroy(); // Clean up chart on unmount\r\n// // //       };\r\n// // //     };\r\n\r\n// // //     document.body.appendChild(script);\r\n\r\n// // //     return () => {\r\n// // //       document.body.removeChild(script); // Clean up script tag on unmount\r\n// // //     };\r\n// // //   }, [topProfitableTrades]); // Re-render the chart when topProfitableTrades changes\r\n\r\n// // //   // Function to get profit data from topProfitableTrades\r\n// // //   const getData = () => {\r\n// // //     return topProfitableTrades.map((trade) => parseFloat(trade.profit)); // Convert profit to float\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"account-graph\">\r\n// // //       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default AccountGraph;\r\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
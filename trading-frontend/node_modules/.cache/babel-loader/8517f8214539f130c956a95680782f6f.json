{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\analysis\\\\AnalysisDisplay.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport { performAnalysis } from \"./AnalysisGet\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nconst AnalysisDisplay = () => {\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const results = await performAnalysis();\n        setAnalysisResults(results);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    fetchData();\n  }, []);\n  const {\n    averageWin = 0,\n    averageLoss = 0\n  } = analysisResults || {};\n  const total = averageWin + averageLoss;\n  const winPercent = total > 0 ? averageWin / total * 100 : 0;\n\n  // Set up animation for winPercent using react-spring\n  const {\n    animatedWinPercent\n  } = useSpring({\n    from: {\n      animatedWinPercent: 0\n    },\n    to: {\n      animatedWinPercent: winPercent\n    },\n    config: {\n      duration: 800\n    }\n  });\n  if (error) {\n    console.error(\"Error fetching analysis data:\", error);\n  }\n  if (!analysisResults && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-display-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100px\",\n      height: \"100px\",\n      margin: \"0 auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(animated.div, {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: animatedWinPercent,\n    text: `${winPercent.toFixed(2)}%`,\n    styles: buildStyles({\n      pathColor: \"#4a90e2\",\n      trailColor: \"#f44336\",\n      textColor: \"#4a90e2\",\n      textSize: \"11px\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-metrics-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-average-win\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Avg Win: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }\n  }, \"$\", averageWin.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-average-loss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Avg Loss: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, \"$\", averageLoss.toFixed(2)))));\n};\nexport default AnalysisDisplay;\n\n// import React, { useState, useEffect } from \"react\";\n// import { performAnalysis } from \"./AnalysisGet\";\n// import { Line } from \"rc-progress\";\n\n// const AnalysisDisplay = () => {\n//   const [analysisResults, setAnalysisResults] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await performAnalysis();\n//         setAnalysisResults(results);\n//       } catch (err) {\n//         setError(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatValue = (value, isCurrency = false) => {\n//     if (isNaN(value) || value === undefined) {\n//       return isCurrency ? \"$0.00\" : \"N/A\";\n//     }\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\n//   };\n\n//   if (error) {\n//     console.error(\"Error fetching analysis data:\", error);\n//   }\n\n//   if (!analysisResults && !error) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const {\n//     absoluteReturn = 0,\n//     sharpeRatio = 0,\n//     winRate = 0,\n//     numberOfTrades = 0,\n//     winningTrades = 0,\n//     losingTrades = 0,\n//     averageWin = 0,\n//     averageLoss = 0,\n//     riskRewardRatio = 0,\n//   } = analysisResults || {};\n\n//   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\n\n//   return (\n//     <div className=\"analysis-container\">\n//       <div className=\"analysis-metrics-row\">\n//         {/* Absolute Return Metric */}\n//         <div className=\"analysis-metric-top\">\n//           <h3>Absolute Return</h3>\n//           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\n//           <Line\n//             percent={absoluteReturnPercentage}\n//             strokeWidth=\"2\"\n//             trailWidth=\"2\"\n//             strokeColor={\"#4a90e2\"}\n//             trailColor=\"#d8e3ef\"\n//           />\n//         </div>\n\n//         {/* Sharpe Ratio Metric */}\n//         <div className=\"analysis-metric-top\">\n//           <h3>Sharpe Ratio</h3>\n//           <p>{formatValue(sharpeRatio)}</p>\n//           <Line\n//             percent={sharpeRatioPercentage}\n//             strokeWidth=\"2\"\n//             trailWidth=\"2\"\n//             strokeColor={\"#4a90e2\"}\n//             trailColor=\"#d8e3ef\"\n//           />\n//         </div>\n//       </div>\n\n//       {/* Trades, Wins, and Losses Row */}\n//       <div className=\"analysis-row\">\n//         <div className=\"analysis-circle\">\n//           <h3>Trades</h3>\n//           <p>{numberOfTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Wins</h3>\n//           <p>{winningTrades}</p>\n//         </div>\n//         <div className=\"analysis-circle\">\n//           <h3>Losses</h3>\n//           <p>{losingTrades}</p>\n//         </div>\n//       </div>\n\n//       {/* Additional Metrics Row */}\n//       <div className=\"analysis-metrics-row\">\n//         <div className=\"analysis-metric\">\n//           <h3>Win Rate</h3>\n//           <p>{formatValue(winRate)}%</p>\n//         </div>\n//         <div className=\"analysis-metric\">\n//           <h3>Avg. Win</h3>\n//           <p>{formatValue(averageWin, true)}</p>\n//         </div>\n//         <div className=\"analysis-metric\">\n//           <h3>Avg. Loss</h3>\n//           <p>{formatValue(averageLoss, true)}</p>\n//         </div>\n//         <div className=\"analysis-metric\">\n//           <h3>Risk Reward</h3>\n//           <p>{formatValue(riskRewardRatio)}</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AnalysisDisplay;","map":{"version":3,"names":["React","useState","useEffect","useSpring","animated","performAnalysis","CircularProgressbar","buildStyles","AnalysisDisplay","analysisResults","setAnalysisResults","error","setError","fetchData","results","err","averageWin","averageLoss","total","winPercent","animatedWinPercent","from","to","config","duration","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","style","width","height","margin","div","value","text","toFixed","styles","pathColor","trailColor","textColor","textSize"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"@react-spring/web\";\r\nimport { performAnalysis } from \"./AnalysisGet\";\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nconst AnalysisDisplay = () => {\r\n  const [analysisResults, setAnalysisResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const results = await performAnalysis();\r\n        setAnalysisResults(results);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const { averageWin = 0, averageLoss = 0 } = analysisResults || {};\r\n  const total = averageWin + averageLoss;\r\n  const winPercent = total > 0 ? (averageWin / total) * 100 : 0;\r\n\r\n  // Set up animation for winPercent using react-spring\r\n  const { animatedWinPercent } = useSpring({\r\n    from: { animatedWinPercent: 0 },\r\n    to: { animatedWinPercent: winPercent },\r\n    config: { duration: 800 },\r\n  });\r\n\r\n  if (error) {\r\n    console.error(\"Error fetching analysis data:\", error);\r\n  }\r\n\r\n  if (!analysisResults && !error) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"analysis-display-container\">\r\n      <div style={{ width: \"100px\", height: \"100px\", margin: \"0 auto\" }}>\r\n        <animated.div style={{ width: \"100%\", height: \"100%\" }}>\r\n          <CircularProgressbar\r\n            value={animatedWinPercent}\r\n            text={`${winPercent.toFixed(2)}%`}\r\n            styles={buildStyles({\r\n              pathColor: \"#4a90e2\",\r\n              trailColor: \"#f44336\",\r\n              textColor: \"#4a90e2\",\r\n              textSize: \"11px\",\r\n            })}\r\n          />\r\n        </animated.div>\r\n      </div>\r\n      <div className=\"analysis-metrics-summary\">\r\n        <div className=\"analysis-average-win\">\r\n          Avg Win: <span className=\"amount\">${averageWin.toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"analysis-average-loss\">\r\n          Avg Loss: <span className=\"amount\">${averageLoss.toFixed(2)}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisDisplay;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { performAnalysis } from \"./AnalysisGet\";\r\n// import { Line } from \"rc-progress\";\r\n\r\n// const AnalysisDisplay = () => {\r\n//   const [analysisResults, setAnalysisResults] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const results = await performAnalysis();\r\n//         setAnalysisResults(results);\r\n//       } catch (err) {\r\n//         setError(err);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const formatValue = (value, isCurrency = false) => {\r\n//     if (isNaN(value) || value === undefined) {\r\n//       return isCurrency ? \"$0.00\" : \"N/A\";\r\n//     }\r\n//     return isCurrency ? `$${value.toFixed(2)}` : `${value.toFixed(2)}`;\r\n//   };\r\n\r\n//   if (error) {\r\n//     console.error(\"Error fetching analysis data:\", error);\r\n//   }\r\n\r\n//   if (!analysisResults && !error) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const {\r\n//     absoluteReturn = 0,\r\n//     sharpeRatio = 0,\r\n//     winRate = 0,\r\n//     numberOfTrades = 0,\r\n//     winningTrades = 0,\r\n//     losingTrades = 0,\r\n//     averageWin = 0,\r\n//     averageLoss = 0,\r\n//     riskRewardRatio = 0,\r\n//   } = analysisResults || {};\r\n\r\n//   const absoluteReturnPercentage = (absoluteReturn / 80) * 100;\r\n//   const sharpeRatioPercentage = (sharpeRatio / 3) * 100;\r\n\r\n//   return (\r\n//     <div className=\"analysis-container\">\r\n//       <div className=\"analysis-metrics-row\">\r\n//         {/* Absolute Return Metric */}\r\n//         <div className=\"analysis-metric-top\">\r\n//           <h3>Absolute Return</h3>\r\n//           <p>{`${absoluteReturn.toFixed(2)}%`}</p>\r\n//           <Line\r\n//             percent={absoluteReturnPercentage}\r\n//             strokeWidth=\"2\"\r\n//             trailWidth=\"2\"\r\n//             strokeColor={\"#4a90e2\"}\r\n//             trailColor=\"#d8e3ef\"\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Sharpe Ratio Metric */}\r\n//         <div className=\"analysis-metric-top\">\r\n//           <h3>Sharpe Ratio</h3>\r\n//           <p>{formatValue(sharpeRatio)}</p>\r\n//           <Line\r\n//             percent={sharpeRatioPercentage}\r\n//             strokeWidth=\"2\"\r\n//             trailWidth=\"2\"\r\n//             strokeColor={\"#4a90e2\"}\r\n//             trailColor=\"#d8e3ef\"\r\n//           />\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Trades, Wins, and Losses Row */}\r\n//       <div className=\"analysis-row\">\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Trades</h3>\r\n//           <p>{numberOfTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Wins</h3>\r\n//           <p>{winningTrades}</p>\r\n//         </div>\r\n//         <div className=\"analysis-circle\">\r\n//           <h3>Losses</h3>\r\n//           <p>{losingTrades}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Additional Metrics Row */}\r\n//       <div className=\"analysis-metrics-row\">\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Win Rate</h3>\r\n//           <p>{formatValue(winRate)}%</p>\r\n//         </div>\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Avg. Win</h3>\r\n//           <p>{formatValue(averageWin, true)}</p>\r\n//         </div>\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Avg. Loss</h3>\r\n//           <p>{formatValue(averageLoss, true)}</p>\r\n//         </div>\r\n//         <div className=\"analysis-metric\">\r\n//           <h3>Risk Reward</h3>\r\n//           <p>{formatValue(riskRewardRatio)}</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AnalysisDisplay;\r\n"],"mappings":"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AC,QAAQ;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,GAAC,EAAChB,UAAU,CAACyB,OAAO,CAAC,CAAC,CAAQ,CAC7D,CAAC,eACNzC,KAAA,CAAA0B,aAAA;IAAKO,SAAS,EAAC,uBAAuB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,YAC3B,eAAAhC,KAAA,CAAA0B,aAAA;IAAMO,SAAS,EAAC,QAAQ;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,GAAC,EAACf,WAAW,CAACwB,OAAO,CAAC,CAAC,CAAQ,CAC/D,CACF,CACF,CAAC;AAEV,CAAC;AAED,eAAejC,eAAe;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}
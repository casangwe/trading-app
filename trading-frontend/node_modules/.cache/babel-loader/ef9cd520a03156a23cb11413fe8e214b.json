{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\transactions\\\\TransactionTable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTransactions } from \"../api/TransactionsAPI\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { getCash } from \"../api/CashApi\";\nimport { formatDate, formatCash } from \"../func/functions\";\nimport NewTransaction from \"./NewTransaction\";\nconst TransactionTable = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Fetch transactions, trades, and initial cash on component mount\n  useEffect(() => {\n    const getTransactionsTradesAndCash = async () => {\n      try {\n        const transactionsData = await fetchTransactions();\n        const tradesData = await fetchTrades();\n        const cashData = await getCash();\n        console.log(\"Fetched trades:\", tradesData);\n        console.log(\"Fetched cash:\", cashData);\n\n        // Format initial cash as a transaction entry without multiplying by 100\n        const initialCashEntry = {\n          id: `cash-${cashData.id}`,\n          transaction_date: cashData.entry_date,\n          transaction_type: \"Initial Cash\",\n          amount: parseFloat(cashData.initial_cash),\n          transaction_summary: `Initial cash of ${formatCash(parseFloat(cashData.initial_cash))}`,\n          isInitialCash: true // Add a flag to identify initial cash entry\n        };\n\n        // Format trades to match transaction format\n        const formattedTrades = tradesData.map(trade => {\n          const profitLossAmount = parseFloat(trade.profit_loss || 0) * 100;\n          const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\n          return {\n            id: trade.id,\n            transaction_date: trade.close_date,\n            transaction_type: \"Trade\",\n            amount: profitLossAmount,\n            transaction_summary: `${trade.symbol} trade with ${formatCash(Math.abs(profitLossAmount))} ${profitOrLoss}`,\n            isInitialCash: false // Not initial cash\n          };\n        });\n\n        // Combine all entries and sort them\n        const allData = [...transactionsData, ...formattedTrades, initialCashEntry].sort((a, b) => {\n          const dateComparison = new Date(b.transaction_date) - new Date(a.transaction_date);\n          if (dateComparison !== 0) return dateComparison;\n\n          // Ensure initial cash is last if on the same date as other transactions\n          return a.isInitialCash ? 1 : -1;\n        });\n        setTransactions(allData);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    getTransactionsTradesAndCash();\n  }, []);\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 12\n      }\n    }, \"Error fetching transactions: \", error);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"transaction-table-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Transactions\"), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"btn btn-primary fa-solid fa-plus\",\n    id: \"transaction-new-btn\",\n    onClick: handleOpenModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"transaction-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Summary\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, transactions.map(transaction => /*#__PURE__*/React.createElement(\"tr\", {\n    key: transaction.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, formatDate(transaction.transaction_date)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, transaction.transaction_type), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, formatCash(transaction.amount)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, transaction.transaction_summary))))), showModal && /*#__PURE__*/React.createElement(NewTransaction, {\n    onClose: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }));\n};\nexport default TransactionTable;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\n// import { fetchTrades } from \"../api/TradesAPI\";\n// import { getCash } from \"../api/CashApi\"; // Adjusted casing\n// import { formatDate, formatCash } from \"../func/functions\";\n// import NewTransaction from \"./NewTransaction\";\n\n// const TransactionTable = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n\n//   // Fetch transactions, trades, and initial cash on component mount\n//   useEffect(() => {\n//     const getTransactionsTradesAndCash = async () => {\n//       try {\n//         const transactionsData = await fetchTransactions();\n//         const tradesData = await fetchTrades();\n//         const cashData = await getCash();\n\n//         console.log(\"Fetched trades:\", tradesData);\n//         console.log(\"Fetched cash:\", cashData);\n\n//         // Format initial cash as a transaction entry without multiplying by 100\n//         const initialCashEntry = {\n//           id: `cash-${cashData.id}`,\n//           transaction_date: cashData.entry_date,\n//           transaction_type: \"Initial Cash\",\n//           amount: parseFloat(cashData.initial_cash), // Use the original dollar value\n//           transaction_summary: `Initial cash of ${formatCash(\n//             parseFloat(cashData.initial_cash)\n//           )}`,\n//         };\n\n//         // Format trades to match transaction format\n//         const formattedTrades = tradesData.map((trade) => {\n//           const profitLossAmount = parseFloat(trade.profit_loss || 0) * 100;\n//           const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\n\n//           return {\n//             id: trade.id,\n//             transaction_date: trade.close_date,\n//             transaction_type: \"Trade\",\n//             amount: profitLossAmount,\n//             transaction_summary: `${trade.symbol} trade with ${formatCash(\n//               Math.abs(profitLossAmount)\n//             )} ${profitOrLoss}`,\n//           };\n//         });\n\n//         // Force initial cash to appear as the first item\n//         const allData = [\n//           initialCashEntry,\n//           ...transactionsData,\n//           ...formattedTrades,\n//         ].sort(\n//           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n//         );\n\n//         setTransactions(allData);\n//         setLoading(false);\n//       } catch (error) {\n//         setError(error.message);\n//         setLoading(false);\n//       }\n//     };\n\n//     getTransactionsTradesAndCash();\n//   }, []);\n\n//   const handleOpenModal = () => {\n//     setShowModal(true);\n//   };\n\n//   const handleCloseModal = () => {\n//     setShowModal(false);\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>Error fetching transactions: {error}</div>;\n//   }\n\n//   return (\n//     <div className=\"transaction-table-container\">\n//       <div className=\"header-card\">\n//         <p className=\"title\">Transactions</p>\n//         <i\n//           className=\"btn btn-primary fa-solid fa-plus\"\n//           id=\"transaction-new-btn\"\n//           onClick={handleOpenModal}\n//         ></i>\n//       </div>\n//       <hr />\n//       <table className=\"transaction-table\">\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Type</th>\n//             <th>Amount</th>\n//             <th>Summary</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {transactions.map((transaction) => (\n//             <tr key={transaction.id}>\n//               <td>{formatDate(transaction.transaction_date)}</td>\n//               <td>{transaction.transaction_type}</td>\n//               <td>{formatCash(transaction.amount)}</td>\n//               <td>{transaction.transaction_summary}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {showModal && <NewTransaction onClose={handleCloseModal} />}\n//     </div>\n//   );\n// };\n\n// export default TransactionTable;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { fetchTrades } from \"../api/TradesAPI\";\n// // import { getCash } from \"../api/CashApi\"; // Import the cash fetching function\n// // import { formatDate, formatCash } from \"../func/functions\";\n// // import NewTransaction from \"./NewTransaction\";\n\n// // const TransactionTable = () => {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showModal, setShowModal] = useState(false);\n\n// //   // Fetch transactions, trades, and initial cash on component mount\n// //   useEffect(() => {\n// //     const getTransactionsTradesAndCash = async () => {\n// //       try {\n// //         const transactionsData = await fetchTransactions();\n// //         const tradesData = await fetchTrades();\n// //         const cashData = await getCash();\n\n// //         console.log(\"Fetched trades:\", tradesData);\n// //         console.log(\"Fetched cash:\", cashData);\n\n// //         // Format initial cash as a transaction entry\n// //         const initialCashEntry = {\n// //           id: `cash-${cashData.id}`, // Unique ID format for cash entry\n// //           transaction_date: cashData.entry_date,\n// //           transaction_type: \"Initial Cash\",\n// //           amount: parseFloat(cashData.initial_cash) * 100, // Convert to cents if needed\n// //           transaction_summary: `Initial cash of ${formatCash(\n// //             parseFloat(cashData.initial_cash) * 100\n// //           )}`,\n// //         };\n\n// //         // Format trades to match transaction format\n// //         const formattedTrades = tradesData.map((trade) => {\n// //           const profitLossAmount = parseFloat(trade.profit_loss || 0) * 100;\n// //           const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\n\n// //           return {\n// //             id: trade.id,\n// //             transaction_date: trade.close_date,\n// //             transaction_type: \"Trade\",\n// //             amount: profitLossAmount,\n// //             transaction_summary: `${trade.symbol} trade with ${formatCash(\n// //               Math.abs(profitLossAmount)\n// //             )} ${profitOrLoss}`,\n// //           };\n// //         });\n\n// //         // Combine all entries with initial cash as the first entry\n// //         const allData = [\n// //           initialCashEntry,\n// //           ...transactionsData,\n// //           ...formattedTrades,\n// //         ].sort(\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n// //         );\n\n// //         setTransactions(allData);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         setError(error.message);\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     getTransactionsTradesAndCash();\n// //   }, []);\n\n// //   const handleOpenModal = () => {\n// //     setShowModal(true);\n// //   };\n\n// //   const handleCloseModal = () => {\n// //     setShowModal(false);\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>Error fetching transactions: {error}</div>;\n// //   }\n\n// //   return (\n// //     <div className=\"transaction-table-container\">\n// //       <div className=\"header-card\">\n// //         <p className=\"title\">Transactions</p>\n// //         <i\n// //           className=\"btn btn-primary fa-solid fa-plus\"\n// //           id=\"transaction-new-btn\"\n// //           onClick={handleOpenModal}\n// //         ></i>\n// //       </div>\n// //       <hr />\n// //       <table className=\"transaction-table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Date</th>\n// //             <th>Type</th>\n// //             <th>Amount</th>\n// //             <th>Summary</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {transactions.map((transaction) => (\n// //             <tr key={transaction.id}>\n// //               <td>{formatDate(transaction.transaction_date)}</td>\n// //               <td>{transaction.transaction_type}</td>\n// //               <td>{formatCash(transaction.amount)}</td>\n// //               <td>{transaction.transaction_summary}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\n// //     </div>\n// //   );\n// // };\n\n// // export default TransactionTable;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { fetchTrades } from \"../api/TradesAPI\";\n// // import { formatDate, formatCash } from \"../func/functions\";\n// // import NewTransaction from \"./NewTransaction\";\n\n// // const TransactionTable = () => {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showModal, setShowModal] = useState(false);\n\n// //   // Fetch transactions and trades on component mount\n// //   useEffect(() => {\n// //     const getTransactionsAndTrades = async () => {\n// //       try {\n// //         const transactionsData = await fetchTransactions();\n// //         const tradesData = await fetchTrades();\n// //         console.log(\"Fetched trades:\", tradesData);\n\n// //         const formattedTrades = tradesData.map((trade) => {\n// //           const profitLossAmount = (trade.profit_loss || 0) * 100;\n// //           const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\n\n// //           return {\n// //             id: trade.id,\n// //             transaction_date: trade.close_date,\n// //             transaction_type: \"Trade\",\n// //             amount: profitLossAmount,\n// //             transaction_summary: `${trade.symbol} trade with ${formatCash(\n// //               Math.abs(profitLossAmount)\n// //             )} ${profitOrLoss}`,\n// //           };\n// //         });\n\n// //         const allData = [...transactionsData, ...formattedTrades].sort(\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n// //         );\n\n// //         setTransactions(allData);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         setError(error.message);\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     getTransactionsAndTrades();\n// //   }, []);\n\n// //   const handleOpenModal = () => {\n// //     setShowModal(true);\n// //   };\n\n// //   const handleCloseModal = () => {\n// //     setShowModal(false);\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>Error fetching transactions: {error}</div>;\n// //   }\n\n// //   return (\n// //     <div className=\"transaction-table-container\">\n// //       <div className=\"header-card\">\n// //         <p className=\"title\">Transactions</p>\n// //         <i\n// //           className=\"btn btn-primary fa-solid fa-plus\"\n// //           id=\"transaction-new-btn\"\n// //           onClick={handleOpenModal}\n// //         ></i>\n// //       </div>\n// //       <hr />\n// //       <table className=\"transaction-table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Date</th>\n// //             <th>Type</th>\n// //             <th>Amount</th>\n// //             <th>Summary</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {transactions.map((transaction) => (\n// //             <tr key={transaction.id}>\n// //               <td>{formatDate(transaction.transaction_date)}</td>\n// //               <td>{transaction.transaction_type}</td>\n// //               <td>{formatCash(transaction.amount)}</td>\n// //               <td>{transaction.transaction_summary}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\n// //     </div>\n// //   );\n// // };\n\n// // export default TransactionTable;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { fetchTrades } from \"../api/TradesAPI\";\n// // import { formatDate, formatCash } from \"../func/functions\";\n// // import NewTransaction from \"./NewTransaction\";\n\n// // const TransactionTable = () => {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showModal, setShowModal] = useState(false);\n\n// //   // Fetch transactions and trades on component mount\n// //   useEffect(() => {\n// //     const getTransactionsAndTrades = async () => {\n// //       try {\n// //         // Fetch transactions\n// //         const transactionsData = await fetchTransactions();\n\n// //         const tradesData = await fetchTrades();\n// //         console.log(\"Fetched trades:\", tradesData);\n\n// //         const formattedTrades = tradesData.map((trade) => ({\n// //           id: trade.id,\n// //           transaction_date: trade.close_date,\n// //           transaction_type: \"Trade\",\n// //           amount: trade.profit_loss ? trade.profit_loss : 0,\n// //           transaction_summary: `${trade.symbol} trade with ${formatCash(\n// //             trade.profit_loss || 0\n// //           )} PnL`,\n// //         }));\n\n// //         // Combine transactions and trades\n// //         const allData = [...transactionsData, ...formattedTrades].sort(\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n// //         );\n\n// //         setTransactions(allData);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         setError(error.message);\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     getTransactionsAndTrades();\n// //   }, []);\n\n// //   const handleOpenModal = () => {\n// //     setShowModal(true);\n// //   };\n\n// //   const handleCloseModal = () => {\n// //     setShowModal(false);\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>Error fetching transactions: {error}</div>;\n// //   }\n\n// //   return (\n// //     <div className=\"transaction-table-container\">\n// //       <div className=\"header-card\">\n// //         <p className=\"title\">Transactions</p>\n// //         <i\n// //           className=\"btn btn-primary fa-solid fa-plus\"\n// //           id=\"transaction-new-btn\"\n// //           onClick={handleOpenModal}\n// //         ></i>\n// //       </div>\n// //       <hr />\n// //       <table className=\"transaction-table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Date</th>\n// //             <th>Type</th>\n// //             <th>Amount</th>\n// //             <th>Summary</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {transactions.map((transaction) => (\n// //             <tr key={transaction.id}>\n// //               <td>{formatDate(transaction.transaction_date)}</td>\n// //               <td>{transaction.transaction_type}</td>\n// //               <td>{formatCash(transaction.amount)}</td>\n// //               <td>{transaction.transaction_summary}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\n// //     </div>\n// //   );\n// // };\n\n// // export default TransactionTable;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { fetchTrades } from \"../api/TradesAPI\"; // Import the trades fetching function\n// // import { formatDate, formatCash } from \"../func/functions\";\n// // import NewTransaction from \"./NewTransaction\";\n\n// // const TransactionTable = () => {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showModal, setShowModal] = useState(false);\n\n// //   // Fetch transactions and trades on component mount\n// //   useEffect(() => {\n// //     const getTransactionsAndTrades = async () => {\n// //       try {\n// //         // Fetch transactions\n// //         const transactionsData = await fetchTransactions();\n\n// //         // Fetch trades and map them to transaction-like format\n// //         const tradesData = await fetchTrades();\n// //         const formattedTrades = tradesData.map((trade) => ({\n// //           id: trade.id,\n// //           transaction_date: trade.close_date,\n// //           transaction_type: \"Trade\",\n// //           amount: trade.net_pnl,\n// //           transaction_summary: `${trade.symbol}trade with ${formatCash(\n// //             trade.net_pnl\n// //           )} pnl `,\n// //         }));\n\n// //         // Combine transactions and trades\n// //         const allData = [...transactionsData, ...formattedTrades].sort(\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n// //         );\n\n// //         setTransactions(allData);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         setError(error.message);\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     getTransactionsAndTrades();\n// //   }, []);\n\n// //   const handleOpenModal = () => {\n// //     setShowModal(true);\n// //   };\n\n// //   const handleCloseModal = () => {\n// //     setShowModal(false);\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>Error fetching transactions: {error}</div>;\n// //   }\n\n// //   return (\n// //     <div className=\"transaction-table-container\">\n// //       <div className=\"header-card\">\n// //         <p className=\"title\">Transactions</p>\n// //         <i\n// //           className=\"btn btn-primary fa-solid fa-plus\"\n// //           id=\"transaction-new-btn\"\n// //           onClick={handleOpenModal}\n// //         ></i>\n// //       </div>\n// //       <hr />\n// //       <table className=\"transaction-table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Date</th>\n// //             <th>Type</th>\n// //             <th>Amount</th>\n// //             <th>Summary</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {transactions.map((transaction) => (\n// //             <tr key={transaction.id}>\n// //               <td>{formatDate(transaction.transaction_date)}</td>\n// //               <td>{transaction.transaction_type}</td>\n// //               <td>{formatCash(transaction.amount)}</td>\n// //               <td>{transaction.transaction_summary}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\n// //     </div>\n// //   );\n// // };\n\n// // export default TransactionTable;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\n// // import { formatDate, formatCash } from \"../func/functions\";\n// // import NewTransaction from \"./NewTransaction\";\n\n// // const TransactionTable = () => {\n// //   const [transactions, setTransactions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showModal, setShowModal] = useState(false);\n\n// //   // Fetch transactions on component mount\n// //   useEffect(() => {\n// //     const getTransactions = async () => {\n// //       try {\n// //         const data = await fetchTransactions();\n// //         setTransactions(data);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         setError(error.message);\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     getTransactions();\n// //   }, []);\n\n// //   const handleOpenModal = () => {\n// //     setShowModal(true);\n// //   };\n\n// //   const handleCloseModal = () => {\n// //     setShowModal(false);\n// //   };\n\n// //   if (loading) {\n// //     return <div>Loading...</div>;\n// //   }\n\n// //   if (error) {\n// //     return <div>Error fetching transactions: {error}</div>;\n// //   }\n\n// //   return (\n// //     <div className=\"transaction-table-container\">\n// //       <div className=\"header-card\">\n// //         <p className=\"title\">Transactions</p>\n// //         <i\n// //           className=\"btn btn-primary fa-solid fa-plus\"\n// //           id=\"transaction-new-btn\"\n// //           onClick={handleOpenModal}\n// //         ></i>\n// //       </div>\n// //       <hr />\n// //       <table className=\"transaction-table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Date</th>\n// //             <th>Type</th>\n// //             <th>Amount</th>\n// //             <th>Summary</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {transactions.map((transaction) => (\n// //             <tr key={transaction.id}>\n// //               <td>{formatDate(transaction.transaction_date)}</td>\n// //               <td>{transaction.transaction_type}</td>\n// //               <td>{formatCash(transaction.amount)}</td>\n// //               <td>{transaction.transaction_summary}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\n// //     </div>\n// //   );\n// // };\n\n// // export default TransactionTable;","map":{"version":3,"names":["React","useState","useEffect","fetchTransactions","fetchTrades","getCash","formatDate","formatCash","NewTransaction","TransactionTable","transactions","setTransactions","loading","setLoading","error","setError","showModal","setShowModal","getTransactionsTradesAndCash","transactionsData","tradesData","cashData","console","log","initialCashEntry","id","transaction_date","entry_date","transaction_type","amount","parseFloat","initial_cash","transaction_summary","isInitialCash","formattedTrades","map","trade","profitLossAmount","profit_loss","profitOrLoss","close_date","symbol","Math","abs","allData","sort","a","b","dateComparison","Date","message","handleOpenModal","handleCloseModal","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","transaction","key","onClose"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/transactions/TransactionTable.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTransactions } from \"../api/TransactionsAPI\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport { getCash } from \"../api/CashApi\";\r\nimport { formatDate, formatCash } from \"../func/functions\";\r\nimport NewTransaction from \"./NewTransaction\";\r\n\r\nconst TransactionTable = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  // Fetch transactions, trades, and initial cash on component mount\r\n  useEffect(() => {\r\n    const getTransactionsTradesAndCash = async () => {\r\n      try {\r\n        const transactionsData = await fetchTransactions();\r\n        const tradesData = await fetchTrades();\r\n        const cashData = await getCash();\r\n\r\n        console.log(\"Fetched trades:\", tradesData);\r\n        console.log(\"Fetched cash:\", cashData);\r\n\r\n        // Format initial cash as a transaction entry without multiplying by 100\r\n        const initialCashEntry = {\r\n          id: `cash-${cashData.id}`,\r\n          transaction_date: cashData.entry_date,\r\n          transaction_type: \"Initial Cash\",\r\n          amount: parseFloat(cashData.initial_cash),\r\n          transaction_summary: `Initial cash of ${formatCash(\r\n            parseFloat(cashData.initial_cash)\r\n          )}`,\r\n          isInitialCash: true, // Add a flag to identify initial cash entry\r\n        };\r\n\r\n        // Format trades to match transaction format\r\n        const formattedTrades = tradesData.map((trade) => {\r\n          const profitLossAmount = parseFloat(trade.profit_loss || 0) * 100;\r\n          const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\r\n\r\n          return {\r\n            id: trade.id,\r\n            transaction_date: trade.close_date,\r\n            transaction_type: \"Trade\",\r\n            amount: profitLossAmount,\r\n            transaction_summary: `${trade.symbol} trade with ${formatCash(\r\n              Math.abs(profitLossAmount)\r\n            )} ${profitOrLoss}`,\r\n            isInitialCash: false, // Not initial cash\r\n          };\r\n        });\r\n\r\n        // Combine all entries and sort them\r\n        const allData = [\r\n          ...transactionsData,\r\n          ...formattedTrades,\r\n          initialCashEntry,\r\n        ].sort((a, b) => {\r\n          const dateComparison =\r\n            new Date(b.transaction_date) - new Date(a.transaction_date);\r\n          if (dateComparison !== 0) return dateComparison;\r\n\r\n          // Ensure initial cash is last if on the same date as other transactions\r\n          return a.isInitialCash ? 1 : -1;\r\n        });\r\n\r\n        setTransactions(allData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getTransactionsTradesAndCash();\r\n  }, []);\r\n\r\n  const handleOpenModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error fetching transactions: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"transaction-table-container\">\r\n      <div className=\"header-card\">\r\n        <p className=\"title\">Transactions</p>\r\n        <i\r\n          className=\"btn btn-primary fa-solid fa-plus\"\r\n          id=\"transaction-new-btn\"\r\n          onClick={handleOpenModal}\r\n        ></i>\r\n      </div>\r\n      <hr />\r\n      <table className=\"transaction-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Type</th>\r\n            <th>Amount</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.map((transaction) => (\r\n            <tr key={transaction.id}>\r\n              <td>{formatDate(transaction.transaction_date)}</td>\r\n              <td>{transaction.transaction_type}</td>\r\n              <td>{formatCash(transaction.amount)}</td>\r\n              <td>{transaction.transaction_summary}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionTable;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// import { fetchTrades } from \"../api/TradesAPI\";\r\n// import { getCash } from \"../api/CashApi\"; // Adjusted casing\r\n// import { formatDate, formatCash } from \"../func/functions\";\r\n// import NewTransaction from \"./NewTransaction\";\r\n\r\n// const TransactionTable = () => {\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [showModal, setShowModal] = useState(false);\r\n\r\n//   // Fetch transactions, trades, and initial cash on component mount\r\n//   useEffect(() => {\r\n//     const getTransactionsTradesAndCash = async () => {\r\n//       try {\r\n//         const transactionsData = await fetchTransactions();\r\n//         const tradesData = await fetchTrades();\r\n//         const cashData = await getCash();\r\n\r\n//         console.log(\"Fetched trades:\", tradesData);\r\n//         console.log(\"Fetched cash:\", cashData);\r\n\r\n//         // Format initial cash as a transaction entry without multiplying by 100\r\n//         const initialCashEntry = {\r\n//           id: `cash-${cashData.id}`,\r\n//           transaction_date: cashData.entry_date,\r\n//           transaction_type: \"Initial Cash\",\r\n//           amount: parseFloat(cashData.initial_cash), // Use the original dollar value\r\n//           transaction_summary: `Initial cash of ${formatCash(\r\n//             parseFloat(cashData.initial_cash)\r\n//           )}`,\r\n//         };\r\n\r\n//         // Format trades to match transaction format\r\n//         const formattedTrades = tradesData.map((trade) => {\r\n//           const profitLossAmount = parseFloat(trade.profit_loss || 0) * 100;\r\n//           const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\r\n\r\n//           return {\r\n//             id: trade.id,\r\n//             transaction_date: trade.close_date,\r\n//             transaction_type: \"Trade\",\r\n//             amount: profitLossAmount,\r\n//             transaction_summary: `${trade.symbol} trade with ${formatCash(\r\n//               Math.abs(profitLossAmount)\r\n//             )} ${profitOrLoss}`,\r\n//           };\r\n//         });\r\n\r\n//         // Force initial cash to appear as the first item\r\n//         const allData = [\r\n//           initialCashEntry,\r\n//           ...transactionsData,\r\n//           ...formattedTrades,\r\n//         ].sort(\r\n//           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n//         );\r\n\r\n//         setTransactions(allData);\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setError(error.message);\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     getTransactionsTradesAndCash();\r\n//   }, []);\r\n\r\n//   const handleOpenModal = () => {\r\n//     setShowModal(true);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setShowModal(false);\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>Error fetching transactions: {error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"transaction-table-container\">\r\n//       <div className=\"header-card\">\r\n//         <p className=\"title\">Transactions</p>\r\n//         <i\r\n//           className=\"btn btn-primary fa-solid fa-plus\"\r\n//           id=\"transaction-new-btn\"\r\n//           onClick={handleOpenModal}\r\n//         ></i>\r\n//       </div>\r\n//       <hr />\r\n//       <table className=\"transaction-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Date</th>\r\n//             <th>Type</th>\r\n//             <th>Amount</th>\r\n//             <th>Summary</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {transactions.map((transaction) => (\r\n//             <tr key={transaction.id}>\r\n//               <td>{formatDate(transaction.transaction_date)}</td>\r\n//               <td>{transaction.transaction_type}</td>\r\n//               <td>{formatCash(transaction.amount)}</td>\r\n//               <td>{transaction.transaction_summary}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TransactionTable;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // import { getCash } from \"../api/CashApi\"; // Import the cash fetching function\r\n// // import { formatDate, formatCash } from \"../func/functions\";\r\n// // import NewTransaction from \"./NewTransaction\";\r\n\r\n// // const TransactionTable = () => {\r\n// //   const [transactions, setTransactions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [showModal, setShowModal] = useState(false);\r\n\r\n// //   // Fetch transactions, trades, and initial cash on component mount\r\n// //   useEffect(() => {\r\n// //     const getTransactionsTradesAndCash = async () => {\r\n// //       try {\r\n// //         const transactionsData = await fetchTransactions();\r\n// //         const tradesData = await fetchTrades();\r\n// //         const cashData = await getCash();\r\n\r\n// //         console.log(\"Fetched trades:\", tradesData);\r\n// //         console.log(\"Fetched cash:\", cashData);\r\n\r\n// //         // Format initial cash as a transaction entry\r\n// //         const initialCashEntry = {\r\n// //           id: `cash-${cashData.id}`, // Unique ID format for cash entry\r\n// //           transaction_date: cashData.entry_date,\r\n// //           transaction_type: \"Initial Cash\",\r\n// //           amount: parseFloat(cashData.initial_cash) * 100, // Convert to cents if needed\r\n// //           transaction_summary: `Initial cash of ${formatCash(\r\n// //             parseFloat(cashData.initial_cash) * 100\r\n// //           )}`,\r\n// //         };\r\n\r\n// //         // Format trades to match transaction format\r\n// //         const formattedTrades = tradesData.map((trade) => {\r\n// //           const profitLossAmount = parseFloat(trade.profit_loss || 0) * 100;\r\n// //           const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\r\n\r\n// //           return {\r\n// //             id: trade.id,\r\n// //             transaction_date: trade.close_date,\r\n// //             transaction_type: \"Trade\",\r\n// //             amount: profitLossAmount,\r\n// //             transaction_summary: `${trade.symbol} trade with ${formatCash(\r\n// //               Math.abs(profitLossAmount)\r\n// //             )} ${profitOrLoss}`,\r\n// //           };\r\n// //         });\r\n\r\n// //         // Combine all entries with initial cash as the first entry\r\n// //         const allData = [\r\n// //           initialCashEntry,\r\n// //           ...transactionsData,\r\n// //           ...formattedTrades,\r\n// //         ].sort(\r\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n// //         );\r\n\r\n// //         setTransactions(allData);\r\n// //         setLoading(false);\r\n// //       } catch (error) {\r\n// //         setError(error.message);\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     getTransactionsTradesAndCash();\r\n// //   }, []);\r\n\r\n// //   const handleOpenModal = () => {\r\n// //     setShowModal(true);\r\n// //   };\r\n\r\n// //   const handleCloseModal = () => {\r\n// //     setShowModal(false);\r\n// //   };\r\n\r\n// //   if (loading) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   if (error) {\r\n// //     return <div>Error fetching transactions: {error}</div>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"transaction-table-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p className=\"title\">Transactions</p>\r\n// //         <i\r\n// //           className=\"btn btn-primary fa-solid fa-plus\"\r\n// //           id=\"transaction-new-btn\"\r\n// //           onClick={handleOpenModal}\r\n// //         ></i>\r\n// //       </div>\r\n// //       <hr />\r\n// //       <table className=\"transaction-table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Date</th>\r\n// //             <th>Type</th>\r\n// //             <th>Amount</th>\r\n// //             <th>Summary</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {transactions.map((transaction) => (\r\n// //             <tr key={transaction.id}>\r\n// //               <td>{formatDate(transaction.transaction_date)}</td>\r\n// //               <td>{transaction.transaction_type}</td>\r\n// //               <td>{formatCash(transaction.amount)}</td>\r\n// //               <td>{transaction.transaction_summary}</td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default TransactionTable;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // import { formatDate, formatCash } from \"../func/functions\";\r\n// // import NewTransaction from \"./NewTransaction\";\r\n\r\n// // const TransactionTable = () => {\r\n// //   const [transactions, setTransactions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [showModal, setShowModal] = useState(false);\r\n\r\n// //   // Fetch transactions and trades on component mount\r\n// //   useEffect(() => {\r\n// //     const getTransactionsAndTrades = async () => {\r\n// //       try {\r\n// //         const transactionsData = await fetchTransactions();\r\n// //         const tradesData = await fetchTrades();\r\n// //         console.log(\"Fetched trades:\", tradesData);\r\n\r\n// //         const formattedTrades = tradesData.map((trade) => {\r\n// //           const profitLossAmount = (trade.profit_loss || 0) * 100;\r\n// //           const profitOrLoss = profitLossAmount >= 0 ? \"profit\" : \"loss\";\r\n\r\n// //           return {\r\n// //             id: trade.id,\r\n// //             transaction_date: trade.close_date,\r\n// //             transaction_type: \"Trade\",\r\n// //             amount: profitLossAmount,\r\n// //             transaction_summary: `${trade.symbol} trade with ${formatCash(\r\n// //               Math.abs(profitLossAmount)\r\n// //             )} ${profitOrLoss}`,\r\n// //           };\r\n// //         });\r\n\r\n// //         const allData = [...transactionsData, ...formattedTrades].sort(\r\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n// //         );\r\n\r\n// //         setTransactions(allData);\r\n// //         setLoading(false);\r\n// //       } catch (error) {\r\n// //         setError(error.message);\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     getTransactionsAndTrades();\r\n// //   }, []);\r\n\r\n// //   const handleOpenModal = () => {\r\n// //     setShowModal(true);\r\n// //   };\r\n\r\n// //   const handleCloseModal = () => {\r\n// //     setShowModal(false);\r\n// //   };\r\n\r\n// //   if (loading) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   if (error) {\r\n// //     return <div>Error fetching transactions: {error}</div>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"transaction-table-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p className=\"title\">Transactions</p>\r\n// //         <i\r\n// //           className=\"btn btn-primary fa-solid fa-plus\"\r\n// //           id=\"transaction-new-btn\"\r\n// //           onClick={handleOpenModal}\r\n// //         ></i>\r\n// //       </div>\r\n// //       <hr />\r\n// //       <table className=\"transaction-table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Date</th>\r\n// //             <th>Type</th>\r\n// //             <th>Amount</th>\r\n// //             <th>Summary</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {transactions.map((transaction) => (\r\n// //             <tr key={transaction.id}>\r\n// //               <td>{formatDate(transaction.transaction_date)}</td>\r\n// //               <td>{transaction.transaction_type}</td>\r\n// //               <td>{formatCash(transaction.amount)}</td>\r\n// //               <td>{transaction.transaction_summary}</td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default TransactionTable;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // import { formatDate, formatCash } from \"../func/functions\";\r\n// // import NewTransaction from \"./NewTransaction\";\r\n\r\n// // const TransactionTable = () => {\r\n// //   const [transactions, setTransactions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [showModal, setShowModal] = useState(false);\r\n\r\n// //   // Fetch transactions and trades on component mount\r\n// //   useEffect(() => {\r\n// //     const getTransactionsAndTrades = async () => {\r\n// //       try {\r\n// //         // Fetch transactions\r\n// //         const transactionsData = await fetchTransactions();\r\n\r\n// //         const tradesData = await fetchTrades();\r\n// //         console.log(\"Fetched trades:\", tradesData);\r\n\r\n// //         const formattedTrades = tradesData.map((trade) => ({\r\n// //           id: trade.id,\r\n// //           transaction_date: trade.close_date,\r\n// //           transaction_type: \"Trade\",\r\n// //           amount: trade.profit_loss ? trade.profit_loss : 0,\r\n// //           transaction_summary: `${trade.symbol} trade with ${formatCash(\r\n// //             trade.profit_loss || 0\r\n// //           )} PnL`,\r\n// //         }));\r\n\r\n// //         // Combine transactions and trades\r\n// //         const allData = [...transactionsData, ...formattedTrades].sort(\r\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n// //         );\r\n\r\n// //         setTransactions(allData);\r\n// //         setLoading(false);\r\n// //       } catch (error) {\r\n// //         setError(error.message);\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     getTransactionsAndTrades();\r\n// //   }, []);\r\n\r\n// //   const handleOpenModal = () => {\r\n// //     setShowModal(true);\r\n// //   };\r\n\r\n// //   const handleCloseModal = () => {\r\n// //     setShowModal(false);\r\n// //   };\r\n\r\n// //   if (loading) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   if (error) {\r\n// //     return <div>Error fetching transactions: {error}</div>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"transaction-table-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p className=\"title\">Transactions</p>\r\n// //         <i\r\n// //           className=\"btn btn-primary fa-solid fa-plus\"\r\n// //           id=\"transaction-new-btn\"\r\n// //           onClick={handleOpenModal}\r\n// //         ></i>\r\n// //       </div>\r\n// //       <hr />\r\n// //       <table className=\"transaction-table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Date</th>\r\n// //             <th>Type</th>\r\n// //             <th>Amount</th>\r\n// //             <th>Summary</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {transactions.map((transaction) => (\r\n// //             <tr key={transaction.id}>\r\n// //               <td>{formatDate(transaction.transaction_date)}</td>\r\n// //               <td>{transaction.transaction_type}</td>\r\n// //               <td>{formatCash(transaction.amount)}</td>\r\n// //               <td>{transaction.transaction_summary}</td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default TransactionTable;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\"; // Import the trades fetching function\r\n// // import { formatDate, formatCash } from \"../func/functions\";\r\n// // import NewTransaction from \"./NewTransaction\";\r\n\r\n// // const TransactionTable = () => {\r\n// //   const [transactions, setTransactions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [showModal, setShowModal] = useState(false);\r\n\r\n// //   // Fetch transactions and trades on component mount\r\n// //   useEffect(() => {\r\n// //     const getTransactionsAndTrades = async () => {\r\n// //       try {\r\n// //         // Fetch transactions\r\n// //         const transactionsData = await fetchTransactions();\r\n\r\n// //         // Fetch trades and map them to transaction-like format\r\n// //         const tradesData = await fetchTrades();\r\n// //         const formattedTrades = tradesData.map((trade) => ({\r\n// //           id: trade.id,\r\n// //           transaction_date: trade.close_date,\r\n// //           transaction_type: \"Trade\",\r\n// //           amount: trade.net_pnl,\r\n// //           transaction_summary: `${trade.symbol}trade with ${formatCash(\r\n// //             trade.net_pnl\r\n// //           )} pnl `,\r\n// //         }));\r\n\r\n// //         // Combine transactions and trades\r\n// //         const allData = [...transactionsData, ...formattedTrades].sort(\r\n// //           (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\r\n// //         );\r\n\r\n// //         setTransactions(allData);\r\n// //         setLoading(false);\r\n// //       } catch (error) {\r\n// //         setError(error.message);\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     getTransactionsAndTrades();\r\n// //   }, []);\r\n\r\n// //   const handleOpenModal = () => {\r\n// //     setShowModal(true);\r\n// //   };\r\n\r\n// //   const handleCloseModal = () => {\r\n// //     setShowModal(false);\r\n// //   };\r\n\r\n// //   if (loading) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   if (error) {\r\n// //     return <div>Error fetching transactions: {error}</div>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"transaction-table-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p className=\"title\">Transactions</p>\r\n// //         <i\r\n// //           className=\"btn btn-primary fa-solid fa-plus\"\r\n// //           id=\"transaction-new-btn\"\r\n// //           onClick={handleOpenModal}\r\n// //         ></i>\r\n// //       </div>\r\n// //       <hr />\r\n// //       <table className=\"transaction-table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Date</th>\r\n// //             <th>Type</th>\r\n// //             <th>Amount</th>\r\n// //             <th>Summary</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {transactions.map((transaction) => (\r\n// //             <tr key={transaction.id}>\r\n// //               <td>{formatDate(transaction.transaction_date)}</td>\r\n// //               <td>{transaction.transaction_type}</td>\r\n// //               <td>{formatCash(transaction.amount)}</td>\r\n// //               <td>{transaction.transaction_summary}</td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default TransactionTable;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTransactions } from \"../api/TransactionsAPI\";\r\n// // import { formatDate, formatCash } from \"../func/functions\";\r\n// // import NewTransaction from \"./NewTransaction\";\r\n\r\n// // const TransactionTable = () => {\r\n// //   const [transactions, setTransactions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n// //   const [showModal, setShowModal] = useState(false);\r\n\r\n// //   // Fetch transactions on component mount\r\n// //   useEffect(() => {\r\n// //     const getTransactions = async () => {\r\n// //       try {\r\n// //         const data = await fetchTransactions();\r\n// //         setTransactions(data);\r\n// //         setLoading(false);\r\n// //       } catch (error) {\r\n// //         setError(error.message);\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     getTransactions();\r\n// //   }, []);\r\n\r\n// //   const handleOpenModal = () => {\r\n// //     setShowModal(true);\r\n// //   };\r\n\r\n// //   const handleCloseModal = () => {\r\n// //     setShowModal(false);\r\n// //   };\r\n\r\n// //   if (loading) {\r\n// //     return <div>Loading...</div>;\r\n// //   }\r\n\r\n// //   if (error) {\r\n// //     return <div>Error fetching transactions: {error}</div>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"transaction-table-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p className=\"title\">Transactions</p>\r\n// //         <i\r\n// //           className=\"btn btn-primary fa-solid fa-plus\"\r\n// //           id=\"transaction-new-btn\"\r\n// //           onClick={handleOpenModal}\r\n// //         ></i>\r\n// //       </div>\r\n// //       <hr />\r\n// //       <table className=\"transaction-table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Date</th>\r\n// //             <th>Type</th>\r\n// //             <th>Amount</th>\r\n// //             <th>Summary</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {transactions.map((transaction) => (\r\n// //             <tr key={transaction.id}>\r\n// //               <td>{formatDate(transaction.transaction_date)}</td>\r\n// //               <td>{transaction.transaction_type}</td>\r\n// //               <td>{formatCash(transaction.amount)}</td>\r\n// //               <td>{transaction.transaction_summary}</td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {showModal && <NewTransaction onClose={handleCloseModal} />}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default TransactionTable;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = ({\n  trades,\n  onTimePeriodChange,\n  periodPL\n}) => {\n  const chartRef = useRef(null); // Reference to the canvas element\n  const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\n\n  useEffect(() => {\n    // Load Chart.js from the CDN dynamically\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n    script.async = true;\n    script.onload = () => {\n      // Initialize Chart.js instance after the script has loaded\n      const ctx = chartRef.current.getContext(\"2d\");\n\n      // Calculate profits for the selected time period\n      const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\n\n      // Data for the chart based on profitsData\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: profitsData.labels,\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitsData.profits,\n            backgroundColor: \"lightgreen\"\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false // Hide grid lines\n              }\n            },\n            y: {\n              display: false,\n              title: {\n                display: false,\n                text: \"Profit/Loss\"\n              }\n            }\n          }\n        }\n      });\n      return () => {\n        myChart.destroy(); // Clean up chart on unmount\n      };\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script); // Clean up script tag on unmount\n    };\n  }, [trades, timePeriod]);\n\n  // Function to calculate profits for the selected time period\n  const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\n    // Add logic here to calculate profits/losses based on the selected time period\n    // You can use trades array and selectedTimePeriod to calculate profits for that period\n    // Return an object with labels and profits data to display on the chart\n\n    // For demonstration, let's assume profitsData is an array with sample data\n    const profitsData = {\n      labels: [\"Day 1\", \"Day 2\", \"Day 3\"],\n      // Example labels\n      profits: [100, -50, 75] // Example profits/losses for each label\n    };\n\n    // Calculate total profit/loss for all trades\n    const totalProfitLoss = trades.reduce((total, trade) => {\n      const entryPrice = parseFloat(trade.entry_price);\n      const exitPrice = parseFloat(trade.exit_price);\n      const contracts = trade.contracts;\n      if (!isNaN(exitPrice)) {\n        const profit = (exitPrice - entryPrice) * contracts * 100;\n        return total + profit;\n      }\n      return total;\n    }, 0);\n\n    // Append the total profit/loss to the data\n    profitsData.labels.push(\"Total\");\n    profitsData.profits.push(totalProfitLoss);\n    return profitsData;\n  };\n\n  // Function to handle time period change\n  const handleTimePeriodClick = period => {\n    setTimePeriod(period); // Update timePeriod state\n    onTimePeriodChange(period); // Call the onTimePeriodChange function from props\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-period-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1D\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"1M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"3M\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"YTD\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"YTD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"1Y\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"1Y\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"time-period-button\",\n    onClick: () => handleTimePeriodClick(\"Max\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"MAX\")));\n};\nexport default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","trades","onTimePeriodChange","periodPL","chartRef","timePeriod","setTimePeriod","script","document","createElement","src","async","onload","ctx","current","getContext","profitsData","calculateProfitsForTimePeriod","myChart","window","Chart","type","data","labels","datasets","label","profits","backgroundColor","options","plugins","legend","display","scales","x","grid","y","title","text","destroy","body","appendChild","removeChild","selectedTimePeriod","totalProfitLoss","reduce","total","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","profit","push","handleTimePeriodClick","period","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = ({ trades, onTimePeriodChange, periodPL }) => {\r\n  const chartRef = useRef(null); // Reference to the canvas element\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\"); // State to track the selected time period\r\n\r\n  useEffect(() => {\r\n    // Load Chart.js from the CDN dynamically\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      // Initialize Chart.js instance after the script has loaded\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      // Calculate profits for the selected time period\r\n      const profitsData = calculateProfitsForTimePeriod(trades, timePeriod);\r\n\r\n      // Data for the chart based on profitsData\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: profitsData.labels,\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitsData.profits,\r\n              backgroundColor: \"lightgreen\",\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false, // Hide grid lines\r\n              },\r\n            },\r\n            y: {\r\n              display: false,\r\n              title: {\r\n                display: false,\r\n                text: \"Profit/Loss\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return () => {\r\n        myChart.destroy(); // Clean up chart on unmount\r\n      };\r\n    };\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script); // Clean up script tag on unmount\r\n    };\r\n  }, [trades, timePeriod]);\r\n\r\n  // Function to calculate profits for the selected time period\r\n  const calculateProfitsForTimePeriod = (trades, selectedTimePeriod) => {\r\n    // Add logic here to calculate profits/losses based on the selected time period\r\n    // You can use trades array and selectedTimePeriod to calculate profits for that period\r\n    // Return an object with labels and profits data to display on the chart\r\n\r\n    // For demonstration, let's assume profitsData is an array with sample data\r\n    const profitsData = {\r\n      labels: [\"Day 1\", \"Day 2\", \"Day 3\"], // Example labels\r\n      profits: [100, -50, 75], // Example profits/losses for each label\r\n    };\r\n\r\n    // Calculate total profit/loss for all trades\r\n    const totalProfitLoss = trades.reduce((total, trade) => {\r\n      const entryPrice = parseFloat(trade.entry_price);\r\n      const exitPrice = parseFloat(trade.exit_price);\r\n      const contracts = trade.contracts;\r\n\r\n      if (!isNaN(exitPrice)) {\r\n        const profit = (exitPrice - entryPrice) * contracts * 100;\r\n        return total + profit;\r\n      }\r\n      return total;\r\n    }, 0);\r\n\r\n    // Append the total profit/loss to the data\r\n    profitsData.labels.push(\"Total\");\r\n    profitsData.profits.push(totalProfitLoss);\r\n\r\n    return profitsData;\r\n  };\r\n\r\n  // Function to handle time period change\r\n  const handleTimePeriodClick = (period) => {\r\n    setTimePeriod(period); // Update timePeriod state\r\n    onTimePeriodChange(period); // Call the onTimePeriodChange function from props\r\n  };\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n      <div className=\"time-period-selector\">\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1D\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1W\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1M\")}\r\n        >\r\n          1M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"3M\")}\r\n        >\r\n          3M\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"YTD\")}\r\n        >\r\n          YTD\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"1Y\")}\r\n        >\r\n          1Y\r\n        </button>\r\n        <button\r\n          className=\"time-period-button\"\r\n          onClick={() => handleTimePeriodClick(\"Max\")}\r\n        >\r\n          MAX\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
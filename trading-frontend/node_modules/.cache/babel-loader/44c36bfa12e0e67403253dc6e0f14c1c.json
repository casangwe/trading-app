{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\InvestmentChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst InvestmentChart = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [investmentSummary, setInvestmentSummary] = useState(null);\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        if (data && data.length > 0) {\n          // Sort data by entry_date in ascending order for correct chronological display\n          const sortedData = data.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          setDailyPNLData(sortedData);\n          setChartData(formatChartData(sortedData));\n          setInvestmentSummary(calculateInvestmentSummary(sortedData));\n        } else {\n          setError(\"No data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  const calculateInvestmentSummary = data => {\n    var _data$, _data;\n    const initialBalance = parseFloat(((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.close_cash) || 0);\n    const finalBalance = parseFloat(((_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.close_cash) || 0);\n    const percentageChange = (finalBalance - initialBalance) / initialBalance * 100;\n    return {\n      balance: finalBalance,\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange\n    };\n  };\n  const formatChartData = data => {\n    return data.map(entry => ({\n      date: formatDate(entry.entry_date),\n      closingBalance: parseFloat(entry.close_cash || 0) // Plot each day with close_cash value\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Investing Summary\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Current Balance: \", formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Change:\", \" \", investmentSummary ? `${investmentSummary.percentageChange.toFixed(2)}% All time` : \"Loading...\")), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"closingBalance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => formatCash(value),\n    labelFormatter: label => `Date: ${label}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"closingBalance\",\n    stroke: \"#4a90e2\",\n    strokeWidth: 2,\n    dot: {\n      r: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default InvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","formatCash","formatDate","InvestmentChart","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","chartData","setChartData","investmentSummary","setInvestmentSummary","fetchDailyPNLData","data","length","sortedData","sort","a","b","Date","entry_date","formatChartData","calculateInvestmentSummary","console","_data$","_data","initialBalance","parseFloat","close_cash","finalBalance","percentageChange","balance","isNaN","map","entry","date","closingBalance","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","width","height","dataKey","formatter","value","labelFormatter","label","type","stroke","strokeWidth","dot","r"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/InvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst InvestmentChart = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        if (data && data.length > 0) {\r\n          // Sort data by entry_date in ascending order for correct chronological display\r\n          const sortedData = data.sort(\r\n            (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n          );\r\n          setDailyPNLData(sortedData);\r\n          setChartData(formatChartData(sortedData));\r\n          setInvestmentSummary(calculateInvestmentSummary(sortedData));\r\n        } else {\r\n          setError(\"No data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  const calculateInvestmentSummary = (data) => {\r\n    const initialBalance = parseFloat(data[0]?.close_cash || 0);\r\n    const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n    const percentageChange =\r\n      ((finalBalance - initialBalance) / initialBalance) * 100;\r\n\r\n    return {\r\n      balance: finalBalance,\r\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n    };\r\n  };\r\n\r\n  const formatChartData = (data) => {\r\n    return data.map((entry) => ({\r\n      date: formatDate(entry.entry_date),\r\n      closingBalance: parseFloat(entry.close_cash || 0), // Plot each day with close_cash value\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"investment-chart-container\">\r\n      <div className=\"summary-section\">\r\n        <h2>Investing Summary</h2>\r\n        <p>Current Balance: {formatCash(investmentSummary?.balance || 0)}</p>\r\n        <p>\r\n          Change:{\" \"}\r\n          {investmentSummary\r\n            ? `${investmentSummary.percentageChange.toFixed(2)}% All time`\r\n            : \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <LineChart data={chartData}>\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis dataKey=\"closingBalance\" />\r\n            <Tooltip\r\n              formatter={(value) => formatCash(value)}\r\n              labelFormatter={(label) => `Date: ${label}`}\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"closingBalance\"\r\n              stroke=\"#4a90e2\"\r\n              strokeWidth={2}\r\n              dot={{ r: 4 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
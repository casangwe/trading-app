{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000\"; // Ensure this is the correct URL for your API\n\n// Fetch all trades for a specific user\nexport const fetchTrades = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades?user_id=${userId}`);\n    if (!response.ok) throw new Error(\"Error fetching trades\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Trades Error:\", error);\n    throw error;\n  }\n};\n\n// Create a new trade for a specific user\nexport const createTrade = async (tradeData, userId) => {\n  const token = localStorage.getItem(\"access_token\");\n  if (!token) {\n    throw new Error(\"User is not authenticated\");\n  }\n  const response = await fetch(`${API_BASE_URL}/trades?user_id=${userId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(tradeData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || \"Error creating trade\");\n  }\n  return await response.json();\n};\n\n// Update an existing trade for a specific user\nexport const updateTrade = async (tradeId, tradeData, userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}?user_id=${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(tradeData)\n    });\n    if (!response.ok) throw new Error(\"Error updating trade\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update Trade Error:\", error);\n    throw error;\n  }\n};\n\n// Delete a trade for a specific user\nexport const deleteTrade = async (tradeId, userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}?user_id=${userId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Error deleting trade\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete Trade Error:\", error);\n    throw error;\n  }\n};\n\n// Fetch a single trade by ID for a specific user\nexport const fetchTradeById = async (tradeId, userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/trades/${tradeId}?user_id=${userId}`);\n    if (!response.ok) throw new Error(\"Trade not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Trade Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchTrades","userId","response","fetch","ok","Error","json","error","console","createTrade","tradeData","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","errorData","detail","updateTrade","tradeId","deleteTrade","fetchTradeById"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/TradesAPI.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000\"; // Ensure this is the correct URL for your API\r\n\r\n// Fetch all trades for a specific user\r\nexport const fetchTrades = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/trades?user_id=${userId}`);\r\n    if (!response.ok) throw new Error(\"Error fetching trades\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Trades Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new trade for a specific user\r\nexport const createTrade = async (tradeData, userId) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  if (!token) {\r\n    throw new Error(\"User is not authenticated\");\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/trades?user_id=${userId}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(tradeData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || \"Error creating trade\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\n// Update an existing trade for a specific user\r\nexport const updateTrade = async (tradeId, tradeData, userId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/trades/${tradeId}?user_id=${userId}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(tradeData),\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error updating trade\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a trade for a specific user\r\nexport const deleteTrade = async (tradeId, userId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/trades/${tradeId}?user_id=${userId}`,\r\n      {\r\n        method: \"DELETE\",\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error deleting trade\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a single trade by ID for a specific user\r\nexport const fetchTradeById = async (tradeId, userId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/trades/${tradeId}?user_id=${userId}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Trade not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Trade Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
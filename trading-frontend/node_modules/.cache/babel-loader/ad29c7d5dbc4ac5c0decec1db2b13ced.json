{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Details.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { fetchTrades, fetchCash } from \"./ApiCalls\";\nconst Details = () => {\n  const [tradeMetrics, setTradeMetrics] = useState(null);\n  const [cashEntries, setCashEntries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [roi, setRoi] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [trades, cash] = await Promise.all([fetchTrades(), fetchCash()]);\n        const metrics = calculateTradeMetrics(trades);\n        setTradeMetrics(metrics);\n        setCashEntries(cash);\n        calculateRoi(cash);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const calculateTradeMetrics = trades => {\n    let totalProfitLoss = 0;\n    let winCount = 0;\n    let lossCount = 0;\n    let biggestWin = null;\n    let biggestLoss = null;\n    let totalReturn = 0;\n    let totalTradeSize = 0;\n    let totalHoldingPeriod = 0;\n    trades.forEach(trade => {\n      const profitLoss = trade.profitLoss;\n      totalProfitLoss += profitLoss;\n      totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\n      totalTradeSize += trade.contracts;\n      const holdingPeriod = new Date(trade.closeDate) - new Date(trade.entryDate);\n      totalHoldingPeriod += holdingPeriod;\n      if (profitLoss > 0) {\n        winCount++;\n        if (!biggestWin || profitLoss > biggestWin) {\n          biggestWin = profitLoss;\n        }\n      } else {\n        lossCount++;\n        if (!biggestLoss || profitLoss < biggestLoss) {\n          biggestLoss = profitLoss;\n        }\n      }\n    });\n    const averageReturn = (totalReturn / trades.length).toFixed(2);\n    const winLossRatio = (winCount / (lossCount || 1)).toFixed(2);\n    const profitFactor = (totalProfitLoss / (lossCount || 1)).toFixed(2);\n    const averageTradeSize = (totalTradeSize / trades.length).toFixed(2);\n    const averageHoldingPeriod = totalHoldingPeriod / trades.length / (1000 * 60 * 60 * 24); // in days\n\n    return {\n      totalProfitLoss,\n      winLossRatio,\n      averageReturn,\n      biggestWin,\n      biggestLoss,\n      averageTradeSize,\n      averageHoldingPeriod,\n      numberOfTrades: trades.length,\n      profitFactor\n    };\n  };\n  const calculateRoi = cashEntries => {\n    if (cashEntries.length > 1) {\n      const initialCash = cashEntries[0].cash;\n      const finalCash = cashEntries[cashEntries.length - 1].cash;\n      const roi = (finalCash - initialCash) / initialCash * 100;\n      setRoi(roi);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \"Loading trade metrics...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, \"Error fetching trade metrics: \", error);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"detailss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Summary\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metrics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Trades:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, tradeMetrics.numberOfTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Net P/L:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.totalProfitLoss * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"Win Rate:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, (tradeMetrics.winLossRatio * 100).toFixed(2), \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Avg. Return:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.averageReturn * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Biggest Win:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.biggestWin * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Biggest Loss:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.biggestLoss * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, \"Position Sizing:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, tradeMetrics.averageTradeSize)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"Holding Period:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, tradeMetrics.averageHoldingPeriod, \" days\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"ROI:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, roi !== null ? `${roi.toFixed(2)}%` : \"N/A\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, cashEntries.map((entry, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \"Cash: $\", entry.cash))))));\n};\nexport default Details;","map":{"version":3,"names":["React","useEffect","useState","fetchTrades","fetchCash","Details","tradeMetrics","setTradeMetrics","cashEntries","setCashEntries","loading","setLoading","error","setError","roi","setRoi","fetchData","trades","cash","Promise","all","metrics","calculateTradeMetrics","calculateRoi","message","totalProfitLoss","winCount","lossCount","biggestWin","biggestLoss","totalReturn","totalTradeSize","totalHoldingPeriod","forEach","trade","profitLoss","exitPrice","entryPrice","contracts","holdingPeriod","Date","closeDate","entryDate","averageReturn","length","toFixed","winLossRatio","profitFactor","averageTradeSize","averageHoldingPeriod","numberOfTrades","initialCash","finalCash","createElement","style","fontSize","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","map","entry","index","key"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Details.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { fetchTrades, fetchCash } from \"./ApiCalls\";\r\n\r\nconst Details = () => {\r\n  const [tradeMetrics, setTradeMetrics] = useState(null);\r\n  const [cashEntries, setCashEntries] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [roi, setRoi] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [trades, cash] = await Promise.all([fetchTrades(), fetchCash()]);\r\n        const metrics = calculateTradeMetrics(trades);\r\n        setTradeMetrics(metrics);\r\n        setCashEntries(cash);\r\n        calculateRoi(cash);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const calculateTradeMetrics = (trades) => {\r\n    let totalProfitLoss = 0;\r\n    let winCount = 0;\r\n    let lossCount = 0;\r\n    let biggestWin = null;\r\n    let biggestLoss = null;\r\n    let totalReturn = 0;\r\n    let totalTradeSize = 0;\r\n    let totalHoldingPeriod = 0;\r\n\r\n    trades.forEach((trade) => {\r\n      const profitLoss = trade.profitLoss;\r\n      totalProfitLoss += profitLoss;\r\n      totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\r\n      totalTradeSize += trade.contracts;\r\n      const holdingPeriod =\r\n        new Date(trade.closeDate) - new Date(trade.entryDate);\r\n      totalHoldingPeriod += holdingPeriod;\r\n\r\n      if (profitLoss > 0) {\r\n        winCount++;\r\n        if (!biggestWin || profitLoss > biggestWin) {\r\n          biggestWin = profitLoss;\r\n        }\r\n      } else {\r\n        lossCount++;\r\n        if (!biggestLoss || profitLoss < biggestLoss) {\r\n          biggestLoss = profitLoss;\r\n        }\r\n      }\r\n    });\r\n\r\n    const averageReturn = (totalReturn / trades.length).toFixed(2);\r\n    const winLossRatio = (winCount / (lossCount || 1)).toFixed(2);\r\n    const profitFactor = (totalProfitLoss / (lossCount || 1)).toFixed(2);\r\n    const averageTradeSize = (totalTradeSize / trades.length).toFixed(2);\r\n    const averageHoldingPeriod =\r\n      totalHoldingPeriod / trades.length / (1000 * 60 * 60 * 24); // in days\r\n\r\n    return {\r\n      totalProfitLoss,\r\n      winLossRatio,\r\n      averageReturn,\r\n      biggestWin,\r\n      biggestLoss,\r\n      averageTradeSize,\r\n      averageHoldingPeriod,\r\n      numberOfTrades: trades.length,\r\n      profitFactor,\r\n    };\r\n  };\r\n\r\n  const calculateRoi = (cashEntries) => {\r\n    if (cashEntries.length > 1) {\r\n      const initialCash = cashEntries[0].cash;\r\n      const finalCash = cashEntries[cashEntries.length - 1].cash;\r\n      const roi = ((finalCash - initialCash) / initialCash) * 100;\r\n      setRoi(roi);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p style={{ fontSize: \"10px\" }}>Loading trade metrics...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <p style={{ fontSize: \"10px\" }}>Error fetching trade metrics: {error}</p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"detailss\">\r\n      <div className=\"header\">Summary</div>\r\n      <div className=\"metrics\">\r\n        <div className=\"metric\">\r\n          <span>Trades:</span>\r\n          <span>{tradeMetrics.numberOfTrades}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Net P/L:</span>\r\n          <span>${(tradeMetrics.totalProfitLoss * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Win Rate:</span>\r\n          <span>{(tradeMetrics.winLossRatio * 100).toFixed(2)}%</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Avg. Return:</span>\r\n          <span>${(tradeMetrics.averageReturn * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Biggest Win:</span>\r\n          <span>${(tradeMetrics.biggestWin * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Biggest Loss:</span>\r\n          <span>${(tradeMetrics.biggestLoss * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Position Sizing:</span>\r\n          <span>{tradeMetrics.averageTradeSize}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Holding Period:</span>\r\n          <span>{tradeMetrics.averageHoldingPeriod} days</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>ROI:</span>\r\n          <span>{roi !== null ? `${roi.toFixed(2)}%` : \"N/A\"}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          {cashEntries.map((entry, index) => (\r\n            <div key={index}>\r\n              <span>Cash: ${entry.cash}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
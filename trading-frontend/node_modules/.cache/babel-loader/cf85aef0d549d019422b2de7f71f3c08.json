{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\BiggestWinsLosses.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/biggestWinsLosses.css\";\nconst BiggestWinsLosses = ({\n  trades\n}) => {\n  const [biggestWins, setBiggestWins] = useState([]);\n  const [biggestLosses, setBiggestLosses] = useState([]);\n\n  // Calculate profits or losses for each trade\n  useEffect(() => {\n    if (trades && trades.length > 0) {\n      // Calculate profits for each trade\n      const tradesWithProfits = trades.map(trade => ({\n        ...trade,\n        profit: trade.exit_price - trade.entry_price\n      }));\n\n      // Sort trades by profits (positive) or losses (negative)\n      const sortedTrades = tradesWithProfits.slice().sort((a, b) => b.profit - a.profit);\n      const wins = sortedTrades.filter(trade => trade.profit > 0).slice(0, 5); // Get top 5 biggest wins\n      const losses = sortedTrades.filter(trade => trade.profit < 0).slice(0, 5); // Get top 5 biggest losses\n      setBiggestWins(wins);\n      setBiggestLosses(losses);\n    }\n  }, [trades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-lost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Biggest Wins\"), biggestWins.length > 0 ? biggestWins.map(trade => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    key: trade.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, trade.symbol), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"profit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, `+$${trade.profit}`))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"No data available\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"losses-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Biggest Losses\"), biggestLosses.length > 0 ? biggestLosses.map(trade => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    key: trade.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, trade.symbol), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, `-$${Math.abs(trade.profit)}`))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"No data available\")));\n};\nexport default BiggestWinsLosses;","map":{"version":3,"names":["React","useState","useEffect","BiggestWinsLosses","trades","biggestWins","setBiggestWins","biggestLosses","setBiggestLosses","length","tradesWithProfits","map","trade","profit","exit_price","entry_price","sortedTrades","slice","sort","a","b","wins","filter","losses","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","id","symbol","Math","abs"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ trades }) => {\r\n  const [biggestWins, setBiggestWins] = useState([]);\r\n  const [biggestLosses, setBiggestLosses] = useState([]);\r\n\r\n  // Calculate profits or losses for each trade\r\n  useEffect(() => {\r\n    if (trades && trades.length > 0) {\r\n      // Calculate profits for each trade\r\n      const tradesWithProfits = trades.map((trade) => ({\r\n        ...trade,\r\n        profit: trade.exit_price - trade.entry_price,\r\n      }));\r\n\r\n      // Sort trades by profits (positive) or losses (negative)\r\n      const sortedTrades = tradesWithProfits\r\n        .slice()\r\n        .sort((a, b) => b.profit - a.profit);\r\n      const wins = sortedTrades.filter((trade) => trade.profit > 0).slice(0, 5); // Get top 5 biggest wins\r\n      const losses = sortedTrades\r\n        .filter((trade) => trade.profit < 0)\r\n        .slice(0, 5); // Get top 5 biggest losses\r\n      setBiggestWins(wins);\r\n      setBiggestLosses(losses);\r\n    }\r\n  }, [trades]);\r\n\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"wins-container\">\r\n        <h2>Biggest Wins</h2>\r\n        {biggestWins.length > 0 ? (\r\n          biggestWins.map((trade) => (\r\n            <div className=\"card\" key={trade.id}>\r\n              <p>{trade.symbol}</p>\r\n              <p className=\"profit\">{`+$${trade.profit}`}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No data available</p>\r\n        )}\r\n      </div>\r\n      <div className=\"losses-container\">\r\n        <h2>Biggest Losses</h2>\r\n        {biggestLosses.length > 0 ? (\r\n          biggestLosses.map((trade) => (\r\n            <div className=\"card\" key={trade.id}>\r\n              <p>{trade.symbol}</p>\r\n              <p className=\"loss\">{`-$${Math.abs(trade.profit)}`}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No data available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
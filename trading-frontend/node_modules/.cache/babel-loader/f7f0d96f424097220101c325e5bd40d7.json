{"ast":null,"code":"// import React, { useState } from \"react\";\n// import \"./styles/biggestWinsLosses.css\";\n\n// const BiggestWinsLosses = ({ recentTrades }) => {\n//   const [showPositive, setShowPositive] = useState(true);\n\n//   const toggleProfitDisplay = () => {\n//     setShowPositive(!showPositive);\n//   };\n\n//   const filteredTrades = recentTrades.filter((trade) => {\n//     if (\n//       trade.profit_loss === undefined ||\n//       trade.profit_loss === \"\" ||\n//       isNaN(trade.profit_loss) ||\n//       isNaN(trade.contracts)\n//     ) {\n//       return false;\n//     }\n//     return showPositive ? trade.profit_loss > 0 : trade.profit_loss < 0;\n//   });\n\n//   // Sort trades in descending order based on profit_loss\n//   filteredTrades.sort((a, b) => {\n//     return showPositive\n//       ? b.profit_loss * b.contracts - a.profit_loss * a.contracts\n//       : a.profit_loss * a.contracts - b.profit_loss * b.contracts;\n//   });\n\n//   return (\n//     <div className=\"winslost-container\">\n//       <div className=\"header-card\">\n//         <p>P/L</p>\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\n//           ::\n//         </p>\n//       </div>\n//       <div className=\"card-list\">\n//         <ul className=\"listed-cards\">\n//           {filteredTrades.map((trade, index) => {\n//             const isPositive = trade.profit_loss > 0;\n//             const cardItemClasses = `card-item ${\n//               isPositive ? \"positive\" : \"negative\"\n//             }`;\n//             const profitLoss = trade.profit_loss * trade.contracts * 100;\n\n//             return (\n//               <li className={cardItemClasses} key={index}>\n//                 <div className=\"card-content\">\n//                   <p>{trade.symbol}</p>\n//                   <p>\n//                     {/* Calculate and display the percentage difference */}\n//                     {trade.entry_price && trade.exit_price\n//                       ? `${(\n//                           ((trade.exit_price - trade.entry_price) /\n//                             trade.entry_price) *\n//                           100\n//                         ).toFixed(2)}%`\n//                       : \"\"}\n//                   </p>\n//                   <p>${profitLoss.toFixed(2)}</p>\n//                 </div>\n//               </li>\n//             );\n//           })}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BiggestWinsLosses;\n\n// // import React, { useState } from \"react\";\n// // import \"./styles/biggestWinsLosses.css\";\n// // import flip from \"./assets/switch.png\";\n\n// // const BiggestWinsLosses = ({ recentTrades }) => {\n// //   const [showPositive, setShowPositive] = useState(true);\n\n// //   const toggleProfitDisplay = () => {\n// //     setShowPositive(!showPositive);\n// //   };\n\n// //   const filteredTrades = recentTrades.filter((trade) => {\n// //     if (\n// //       trade.profit_loss === undefined ||\n// //       trade.profit_loss === \"\" ||\n// //       isNaN(trade.profit_loss) ||\n// //       isNaN(trade.contracts)\n// //     ) {\n// //       return false;\n// //     }\n// //     return showPositive ? trade.profit_loss > 0 : trade.profit_loss < 0;\n// //   });\n\n// //   // Sort trades in descending order based on profit_loss\n// //   filteredTrades.sort((a, b) => {\n// //     return showPositive\n// //       ? b.profit_loss * b.contracts - a.profit_loss * a.contracts\n// //       : a.profit_loss * a.contracts - b.profit_loss * b.contracts;\n// //   });\n\n// //   return (\n// //     <div className=\"winslost-container\">\n// //       <div className=\"header-card\">\n// //         <p>P/L</p>\n// //         <p className=\"menu\" onClick={toggleProfitDisplay}>\n// //           ::\n// //         </p>\n// //       </div>\n// //       <div className=\"card-list\">\n// //         <ul className=\"listed-cards\">\n// //           {filteredTrades.map((trade, index) => {\n// //             const isPositive = trade.profit_loss > 0;\n// //             const cardItemClasses = `card-item ${\n// //               isPositive ? \"positive\" : \"negative\"\n// //             }`;\n// //             const profitLoss = trade.profit_loss * trade.contracts * 100;\n\n// //             return (\n// //               <li className={cardItemClasses} key={index}>\n// //                 <div className=\"card-content\">\n// //                   <p>{trade.symbol}</p>\n// //                   <p>\n// //                     {/* Calculate and display the percentage difference */}\n// //                     {trade.entry_price && trade.exit_price\n// //                       ? `${(\n// //                           ((trade.exit_price - trade.entry_price) /\n// //                             trade.entry_price) *\n// //                           100\n// //                         ).toFixed(2)}%`\n// //                       : \"\"}\n// //                   </p>\n// //                   <p>${profitLoss.toFixed(2)}</p>\n// //                 </div>\n// //               </li>\n// //             );\n// //           })}\n// //         </ul>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default BiggestWinsLosses;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./styles/biggestWinsLosses.css\";\r\n\r\n// const BiggestWinsLosses = ({ recentTrades }) => {\r\n//   const [showPositive, setShowPositive] = useState(true);\r\n\r\n//   const toggleProfitDisplay = () => {\r\n//     setShowPositive(!showPositive);\r\n//   };\r\n\r\n//   const filteredTrades = recentTrades.filter((trade) => {\r\n//     if (\r\n//       trade.profit_loss === undefined ||\r\n//       trade.profit_loss === \"\" ||\r\n//       isNaN(trade.profit_loss) ||\r\n//       isNaN(trade.contracts)\r\n//     ) {\r\n//       return false;\r\n//     }\r\n//     return showPositive ? trade.profit_loss > 0 : trade.profit_loss < 0;\r\n//   });\r\n\r\n//   // Sort trades in descending order based on profit_loss\r\n//   filteredTrades.sort((a, b) => {\r\n//     return showPositive\r\n//       ? b.profit_loss * b.contracts - a.profit_loss * a.contracts\r\n//       : a.profit_loss * a.contracts - b.profit_loss * b.contracts;\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"winslost-container\">\r\n//       <div className=\"header-card\">\r\n//         <p>P/L</p>\r\n//         <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n//           ::\r\n//         </p>\r\n//       </div>\r\n//       <div className=\"card-list\">\r\n//         <ul className=\"listed-cards\">\r\n//           {filteredTrades.map((trade, index) => {\r\n//             const isPositive = trade.profit_loss > 0;\r\n//             const cardItemClasses = `card-item ${\r\n//               isPositive ? \"positive\" : \"negative\"\r\n//             }`;\r\n//             const profitLoss = trade.profit_loss * trade.contracts * 100;\r\n\r\n//             return (\r\n//               <li className={cardItemClasses} key={index}>\r\n//                 <div className=\"card-content\">\r\n//                   <p>{trade.symbol}</p>\r\n//                   <p>\r\n//                     {/* Calculate and display the percentage difference */}\r\n//                     {trade.entry_price && trade.exit_price\r\n//                       ? `${(\r\n//                           ((trade.exit_price - trade.entry_price) /\r\n//                             trade.entry_price) *\r\n//                           100\r\n//                         ).toFixed(2)}%`\r\n//                       : \"\"}\r\n//                   </p>\r\n//                   <p>${profitLoss.toFixed(2)}</p>\r\n//                 </div>\r\n//               </li>\r\n//             );\r\n//           })}\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BiggestWinsLosses;\r\n\r\n// // import React, { useState } from \"react\";\r\n// // import \"./styles/biggestWinsLosses.css\";\r\n// // import flip from \"./assets/switch.png\";\r\n\r\n// // const BiggestWinsLosses = ({ recentTrades }) => {\r\n// //   const [showPositive, setShowPositive] = useState(true);\r\n\r\n// //   const toggleProfitDisplay = () => {\r\n// //     setShowPositive(!showPositive);\r\n// //   };\r\n\r\n// //   const filteredTrades = recentTrades.filter((trade) => {\r\n// //     if (\r\n// //       trade.profit_loss === undefined ||\r\n// //       trade.profit_loss === \"\" ||\r\n// //       isNaN(trade.profit_loss) ||\r\n// //       isNaN(trade.contracts)\r\n// //     ) {\r\n// //       return false;\r\n// //     }\r\n// //     return showPositive ? trade.profit_loss > 0 : trade.profit_loss < 0;\r\n// //   });\r\n\r\n// //   // Sort trades in descending order based on profit_loss\r\n// //   filteredTrades.sort((a, b) => {\r\n// //     return showPositive\r\n// //       ? b.profit_loss * b.contracts - a.profit_loss * a.contracts\r\n// //       : a.profit_loss * a.contracts - b.profit_loss * b.contracts;\r\n// //   });\r\n\r\n// //   return (\r\n// //     <div className=\"winslost-container\">\r\n// //       <div className=\"header-card\">\r\n// //         <p>P/L</p>\r\n// //         <p className=\"menu\" onClick={toggleProfitDisplay}>\r\n// //           ::\r\n// //         </p>\r\n// //       </div>\r\n// //       <div className=\"card-list\">\r\n// //         <ul className=\"listed-cards\">\r\n// //           {filteredTrades.map((trade, index) => {\r\n// //             const isPositive = trade.profit_loss > 0;\r\n// //             const cardItemClasses = `card-item ${\r\n// //               isPositive ? \"positive\" : \"negative\"\r\n// //             }`;\r\n// //             const profitLoss = trade.profit_loss * trade.contracts * 100;\r\n\r\n// //             return (\r\n// //               <li className={cardItemClasses} key={index}>\r\n// //                 <div className=\"card-content\">\r\n// //                   <p>{trade.symbol}</p>\r\n// //                   <p>\r\n// //                     {/* Calculate and display the percentage difference */}\r\n// //                     {trade.entry_price && trade.exit_price\r\n// //                       ? `${(\r\n// //                           ((trade.exit_price - trade.entry_price) /\r\n// //                             trade.entry_price) *\r\n// //                           100\r\n// //                         ).toFixed(2)}%`\r\n// //                       : \"\"}\r\n// //                   </p>\r\n// //                   <p>${profitLoss.toFixed(2)}</p>\r\n// //                 </div>\r\n// //               </li>\r\n// //             );\r\n// //           })}\r\n// //         </ul>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default BiggestWinsLosses;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
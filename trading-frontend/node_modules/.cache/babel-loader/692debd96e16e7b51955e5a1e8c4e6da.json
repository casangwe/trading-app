{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Details.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { fetchTrades, fetchCash } from \"./ApiCalls\";\nconst Details = () => {\n  const [tradeMetrics, setTradeMetrics] = useState(null);\n  const [initialCash, setInitialCash] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch trades from the API\n  useEffect(() => {\n    const fetchTradeMetrics = async () => {\n      try {\n        const trades = await fetchTrades();\n        const metrics = calculateTradeMetrics(trades);\n        setTradeMetrics(metrics);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    fetchTradeMetrics();\n  }, []);\n\n  // Fetch initial cash from the API\n  useEffect(() => {\n    const fetchInitialCash = async () => {\n      try {\n        const cashEntries = await fetchCash();\n        setInitialCash(cashEntries);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchInitialCash();\n  }, []);\n\n  //Metrics\n  const calculateTradeMetrics = trades => {\n    let totalProfitLoss = 0;\n    let totalReturn = 0;\n    let totalTradeSize = 0;\n    let totalHoldingPeriod = 0;\n    let biggestWin = null;\n    let biggestLoss = null;\n    trades.forEach(trade => {\n      const profitLoss = trade.profitLoss;\n      const tradePnl = profitLoss * trade.contracts;\n      totalProfitLoss += tradePnl;\n      totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\n      totalTradeSize += trade.contracts;\n      const holdingPeriod = new Date(trade.closeDate) - new Date(trade.entryDate);\n      totalHoldingPeriod += holdingPeriod;\n      if (biggestWin === null || tradePnl > biggestWin) {\n        biggestWin = tradePnl;\n      }\n      if (biggestLoss === null || tradePnl < biggestLoss) {\n        biggestLoss = tradePnl;\n      }\n    });\n    console.log(\"Total Profit/Loss:\", totalProfitLoss);\n    console.log(\"Total Return:\", totalReturn);\n    console.log(\"Total Trade Size:\", totalTradeSize);\n    console.log(\"Total Holding Period:\", totalHoldingPeriod);\n    console.log(\"Biggest Win:\", biggestWin);\n    console.log(\"Biggest Loss:\", biggestLoss);\n\n    // let totalProfitLoss = 0;\n    // let winCount = 0;\n    // let lossCount = 0;\n    // let biggestWin = null;\n    // let biggestLoss = null;\n    // let totalReturn = 0;\n    // let totalTradeSize = 0;\n    // let totalHoldingPeriod = 0;\n\n    // trades.forEach((trade) => {\n    //   const profitLoss = trade.profitLoss;\n    //   totalProfitLoss += profitLoss * trade.contracts;\n    //   totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\n    //   totalTradeSize += trade.contracts;\n    //   const holdingPeriod =\n    //     new Date(trade.closeDate) - new Date(trade.entryDate);\n    //   totalHoldingPeriod += holdingPeriod;\n    //   biggestWin = profitLoss * trade.contracts;\n    //   biggestLoss = profitLoss * trade.contracts;\n\n    // if (profitLoss > 0) {\n    //   winCount++;\n    //   if (!biggestWin || profitLoss > biggestWin) {\n    //     biggestWin = profitLoss * trade.contracts;\n    //   }\n    // } else {\n    //   lossCount++;\n    //   if (!biggestLoss || profitLoss < biggestLoss) {\n    //     biggestLoss = profitLoss * trade.contracts;\n    //     console.log(profitLoss, trade.contracts);\n    //   }\n    // }\n    // });\n\n    const averageReturn = (totalReturn / trades.length).toFixed(2);\n    const winLossRatio = (winCount / trades.length).toFixed(2);\n    const profitFactor = (totalProfitLoss / (lossCount || 1)).toFixed(2);\n    const averageTradeSize = Math.round(totalTradeSize / trades.length);\n    const averageHoldingPeriod = totalHoldingPeriod / trades.length / (1000 * 60 * 60 * 24); // in days\n\n    return {\n      totalProfitLoss,\n      winLossRatio,\n      averageReturn,\n      biggestWin,\n      biggestLoss,\n      averageTradeSize,\n      averageHoldingPeriod,\n      numberOfTrades: trades.length,\n      profitFactor\n    };\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 12\n      }\n    }, \"Error: \", error);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"detailss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, \"Analysis\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metrics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Initial:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, initialCash.map(entry => /*#__PURE__*/React.createElement(\"div\", {\n    key: entry.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"$\", entry.id.toFixed(2))))), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Cash:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, initialCash.length > 0 ? `$${(initialCash[0].id + tradeMetrics.totalProfitLoss * 100).toFixed(2)}\n                ` : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, \"Trades:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, tradeMetrics.numberOfTrades)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"P/L:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.totalProfitLoss * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \"Win Rate:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, (tradeMetrics.winLossRatio * 100).toFixed(2), \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, \"Avg. return:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.averageReturn * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"Top Win:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.biggestWin * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Top Loss:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"$\", (tradeMetrics.biggestLoss * 100).toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, \"Sizing:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, tradeMetrics.averageTradeSize)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, \"Days:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, Math.round(tradeMetrics.averageHoldingPeriod)))));\n};\nexport default Details;","map":{"version":3,"names":["React","useEffect","useState","fetchTrades","fetchCash","Details","tradeMetrics","setTradeMetrics","initialCash","setInitialCash","loading","setLoading","error","setError","fetchTradeMetrics","trades","metrics","calculateTradeMetrics","message","fetchInitialCash","cashEntries","totalProfitLoss","totalReturn","totalTradeSize","totalHoldingPeriod","biggestWin","biggestLoss","forEach","trade","profitLoss","tradePnl","contracts","exitPrice","entryPrice","holdingPeriod","Date","closeDate","entryDate","console","log","averageReturn","length","toFixed","winLossRatio","winCount","profitFactor","lossCount","averageTradeSize","Math","round","averageHoldingPeriod","numberOfTrades","createElement","style","fontSize","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","map","entry","key","id"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Details.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { fetchTrades, fetchCash } from \"./ApiCalls\";\r\n\r\nconst Details = () => {\r\n  const [tradeMetrics, setTradeMetrics] = useState(null);\r\n  const [initialCash, setInitialCash] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch trades from the API\r\n  useEffect(() => {\r\n    const fetchTradeMetrics = async () => {\r\n      try {\r\n        const trades = await fetchTrades();\r\n        const metrics = calculateTradeMetrics(trades);\r\n        setTradeMetrics(metrics);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTradeMetrics();\r\n  }, []);\r\n\r\n  // Fetch initial cash from the API\r\n  useEffect(() => {\r\n    const fetchInitialCash = async () => {\r\n      try {\r\n        const cashEntries = await fetchCash();\r\n        setInitialCash(cashEntries);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchInitialCash();\r\n  }, []);\r\n\r\n  //Metrics\r\n  const calculateTradeMetrics = (trades) => {\r\n    let totalProfitLoss = 0;\r\n    let totalReturn = 0;\r\n    let totalTradeSize = 0;\r\n    let totalHoldingPeriod = 0;\r\n    let biggestWin = null;\r\n    let biggestLoss = null;\r\n\r\n    trades.forEach((trade) => {\r\n      const profitLoss = trade.profitLoss;\r\n      const tradePnl = profitLoss * trade.contracts;\r\n\r\n      totalProfitLoss += tradePnl;\r\n      totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\r\n      totalTradeSize += trade.contracts;\r\n\r\n      const holdingPeriod =\r\n        new Date(trade.closeDate) - new Date(trade.entryDate);\r\n      totalHoldingPeriod += holdingPeriod;\r\n\r\n      if (biggestWin === null || tradePnl > biggestWin) {\r\n        biggestWin = tradePnl;\r\n      }\r\n      if (biggestLoss === null || tradePnl < biggestLoss) {\r\n        biggestLoss = tradePnl;\r\n      }\r\n    });\r\n\r\n    console.log(\"Total Profit/Loss:\", totalProfitLoss);\r\n    console.log(\"Total Return:\", totalReturn);\r\n    console.log(\"Total Trade Size:\", totalTradeSize);\r\n    console.log(\"Total Holding Period:\", totalHoldingPeriod);\r\n    console.log(\"Biggest Win:\", biggestWin);\r\n    console.log(\"Biggest Loss:\", biggestLoss);\r\n\r\n    // let totalProfitLoss = 0;\r\n    // let winCount = 0;\r\n    // let lossCount = 0;\r\n    // let biggestWin = null;\r\n    // let biggestLoss = null;\r\n    // let totalReturn = 0;\r\n    // let totalTradeSize = 0;\r\n    // let totalHoldingPeriod = 0;\r\n\r\n    // trades.forEach((trade) => {\r\n    //   const profitLoss = trade.profitLoss;\r\n    //   totalProfitLoss += profitLoss * trade.contracts;\r\n    //   totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\r\n    //   totalTradeSize += trade.contracts;\r\n    //   const holdingPeriod =\r\n    //     new Date(trade.closeDate) - new Date(trade.entryDate);\r\n    //   totalHoldingPeriod += holdingPeriod;\r\n    //   biggestWin = profitLoss * trade.contracts;\r\n    //   biggestLoss = profitLoss * trade.contracts;\r\n\r\n    // if (profitLoss > 0) {\r\n    //   winCount++;\r\n    //   if (!biggestWin || profitLoss > biggestWin) {\r\n    //     biggestWin = profitLoss * trade.contracts;\r\n    //   }\r\n    // } else {\r\n    //   lossCount++;\r\n    //   if (!biggestLoss || profitLoss < biggestLoss) {\r\n    //     biggestLoss = profitLoss * trade.contracts;\r\n    //     console.log(profitLoss, trade.contracts);\r\n    //   }\r\n    // }\r\n    // });\r\n\r\n    const averageReturn = (totalReturn / trades.length).toFixed(2);\r\n    const winLossRatio = (winCount / trades.length).toFixed(2);\r\n    const profitFactor = (totalProfitLoss / (lossCount || 1)).toFixed(2);\r\n    const averageTradeSize = Math.round(totalTradeSize / trades.length);\r\n    const averageHoldingPeriod =\r\n      totalHoldingPeriod / trades.length / (1000 * 60 * 60 * 24); // in days\r\n\r\n    return {\r\n      totalProfitLoss,\r\n      winLossRatio,\r\n      averageReturn,\r\n      biggestWin,\r\n      biggestLoss,\r\n      averageTradeSize,\r\n      averageHoldingPeriod,\r\n      numberOfTrades: trades.length,\r\n      profitFactor,\r\n    };\r\n  };\r\n\r\n  if (loading) {\r\n    return <p style={{ fontSize: \"10px\" }}>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p style={{ fontSize: \"10px\" }}>Error: {error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"detailss\">\r\n      <div className=\"header\">Analysis</div>\r\n      <div className=\"metrics\">\r\n        <div className=\"metric\">\r\n          <span>Initial:</span>\r\n          <span>\r\n            {initialCash.map((entry) => (\r\n              <div key={entry.id}>${entry.id.toFixed(2)}</div>\r\n            ))}\r\n          </span>\r\n        </div>{\" \"}\r\n        <div className=\"metric\">\r\n          <span>Cash:</span>\r\n          <span>\r\n            {initialCash.length > 0\r\n              ? `$${(\r\n                  initialCash[0].id +\r\n                  tradeMetrics.totalProfitLoss * 100\r\n                ).toFixed(2)}\r\n                `\r\n              : \"\"}\r\n          </span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Trades:</span>\r\n          <span>{tradeMetrics.numberOfTrades}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>P/L:</span>\r\n          <span>${(tradeMetrics.totalProfitLoss * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Win Rate:</span>\r\n          <span>{(tradeMetrics.winLossRatio * 100).toFixed(2)}%</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Avg. return:</span>\r\n          <span>${(tradeMetrics.averageReturn * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Top Win:</span>\r\n          <span>${(tradeMetrics.biggestWin * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Top Loss:</span>\r\n          <span>${(tradeMetrics.biggestLoss * 100).toFixed(2)}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Sizing:</span>\r\n          <span>{tradeMetrics.averageTradeSize}</span>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <span>Days:</span>\r\n          <span>{Math.round(tradeMetrics.averageHoldingPeriod)}</span>\r\n        </div>\r\n        {/* <div className=\"metric\">\r\n          <span>Profit Factor:</span>\r\n          <span>{tradeMetrics.profitFactor}</span>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\Bars.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst Bars = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"daily\");\n  const barRefs = useRef([]);\n  const animationRefs = useRef([]); // To keep track of animation frames\n\n  // Fetch Data\n  const fetchDailyPNLData = async () => {\n    try {\n      const data = await fetchDailyPnls();\n      setDailyPNLData(data);\n    } catch (error) {\n      setError(\"Error fetching Daily PNL data\");\n      console.error(\"Error fetching Daily PNL data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchDailyPNLData();\n  }, []);\n\n  // Data Processing Functions\n  const calculateBars = () => {\n    let balances = [];\n    let labels = [];\n    if (view === \"daily\") {\n      const currentWeek = getCurrentWeek(dailyPNLData);\n      balances = currentWeek.map(day => parseFloat(day.balance));\n      labels = currentWeek.map(day => formatDate(day.entry_date));\n    } else if (view === \"weekly\") {\n      const currentMonth = getCurrentMonth(dailyPNLData);\n      currentMonth.forEach(week => {\n        const weekSum = week.reduce((sum, day) => sum + parseFloat(day.balance), 0);\n        balances.push(weekSum);\n        labels.push(`${formatDate(week[0].entry_date)} - ${formatDate(week[week.length - 1].entry_date)}`);\n      });\n    } else if (view === \"monthly\") {\n      const months = getMonthsData(dailyPNLData);\n      months.forEach(month => {\n        const monthSum = month.reduce((sum, day) => sum + parseFloat(day.balance), 0);\n        balances.push(monthSum);\n        labels.push(formatMonthYear(month[0].entry_date));\n      });\n    }\n    return {\n      balances,\n      labels\n    };\n  };\n  const getCurrentWeek = data => {\n    const weekData = [];\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sun) to 6 (Sat)\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - dayOfWeek); // Start on Sunday\n    startOfWeek.setHours(0, 0, 0, 0);\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(startOfWeek.getDate() + 6); // End on Saturday\n    endOfWeek.setHours(23, 59, 59, 999);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n        weekData.push(entry);\n      }\n    });\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n    return weekData;\n  };\n  const getCurrentMonth = data => {\n    const weeks = [];\n    let week = [];\n    const today = new Date();\n    const month = today.getMonth();\n    data.forEach((entry, index) => {\n      const entryDate = new Date(entry.entry_date);\n      if (entryDate.getMonth() === month) {\n        week.push(entry);\n        // Assuming 5 entries per week, adjust as needed\n        if (week.length === 5) {\n          week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          weeks.push(week);\n          week = [];\n        }\n      }\n    });\n    if (week.length) {\n      week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n      weeks.push(week);\n    }\n    return weeks;\n  };\n  const getMonthsData = data => {\n    const months = Array.from({\n      length: 12\n    }, () => []);\n    data.forEach(entry => {\n      const entryDate = new Date(entry.entry_date);\n      months[entryDate.getMonth()].push(entry);\n    });\n    return months.filter(month => month.length > 0); // Filter out any empty month arrays\n  };\n  const formatMonthYear = dateStr => {\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n    const dateParts = dateStr.split(\"-\");\n    const month = dateParts[1];\n    const year = dateParts[0];\n    return `${month}/${year}`;\n  };\n\n  // Animation Function using requestAnimationFrame for smoother animations\n  const animateBars = balances => {\n    balances.forEach((balance, index) => {\n      var _barRefs$current$inde;\n      const barElem = (_barRefs$current$inde = barRefs.current[index]) === null || _barRefs$current$inde === void 0 ? void 0 : _barRefs$current$inde.current;\n      if (barElem) {\n        let width = 0;\n        const threshold = Math.max(...balances) * 5; // Adjust as per your scaling logic\n        const percentage = Math.abs(balance) / threshold * 100;\n        const interval = setInterval(() => {\n          if (width >= percentage) {\n            clearInterval(interval);\n          } else {\n            width++;\n            barElem.style.width = width + \"%\";\n            barElem.innerHTML = width + \"%\"; // Update the label if desired\n          }\n        }, 10);\n      } else {\n        console.warn(`Bar element at index ${index} is undefined`);\n      }\n    });\n  };\n\n  // Place the useEffect hook here\n  useEffect(() => {\n    if (dailyPNLData.length === 0) return;\n    const {\n      balances\n    } = calculateBars();\n\n    // Initialize refs\n    barRefs.current = balances.map((_, i) => barRefs.current[i] || React.createRef());\n\n    // Animate the bars\n    animateBars(balances);\n\n    // Cleanup function to cancel animations on unmount or data change\n    return () => {\n      animationRefs.current.forEach(anim => cancelAnimationFrame(anim));\n    };\n  }, [dailyPNLData, view]);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }, error);\n  const {\n    balances,\n    labels\n  } = calculateBars();\n\n  // Dynamic Threshold Calculation\n  const maxBalance = Math.max(...balances);\n  const minBalance = Math.min(...balances);\n  const threshold = Math.max(Math.abs(maxBalance), Math.abs(minBalance));\n  const headerDate = view === \"daily\" ? new Date(dailyPNLData[0].entry_date).toLocaleDateString() : view === \"weekly\" ? formatMonthYear(dailyPNLData[0].entry_date) : dailyPNLData[0].entry_date.split(\"-\")[0];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"daily\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"daily\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"weekly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"weekly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, \"Weekly\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `tab-button ${view === \"monthly\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"monthly\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, \"Monthly\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, headerDate)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bars-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, balances.map((balance, index) => {\n    const isPositive = balance >= 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"bar-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }\n    }, labels[index]), /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => barRefs.current[index] = el,\n      className: `bar ${isPositive ? \"positive\" : \"negative\"}`,\n      style: {\n        width: `0%` // Initial width for animation\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bar-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, formatCash(balance))));\n  })));\n};\nexport default Bars;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const Bars = () => {\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [view, setView] = useState(\"daily\");\n//   const barRefs = useRef([]);\n//   const animationRefs = useRef([]); // To keep track of animation frames\n\n//   // Fetch Data\n//   const fetchDailyPNLData = async () => {\n//     try {\n//       const data = await fetchDailyPnls();\n//       setDailyPNLData(data);\n//     } catch (error) {\n//       setError(\"Error fetching Daily PNL data\");\n//       console.error(\"Error fetching Daily PNL data:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchDailyPNLData();\n//   }, []);\n\n//   // Data Processing Functions\n//   const calculateBars = () => {\n//     let balances = [];\n//     let labels = [];\n\n//     if (view === \"daily\") {\n//       const currentWeek = getCurrentWeek(dailyPNLData);\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\n//     } else if (view === \"weekly\") {\n//       const currentMonth = getCurrentMonth(dailyPNLData);\n//       currentMonth.forEach((week) => {\n//         const weekSum = week.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(weekSum);\n//         labels.push(\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\n//             week[week.length - 1].entry_date\n//           )}`\n//         );\n//       });\n//     } else if (view === \"monthly\") {\n//       const months = getMonthsData(dailyPNLData);\n//       months.forEach((month) => {\n//         const monthSum = month.reduce(\n//           (sum, day) => sum + parseFloat(day.balance),\n//           0\n//         );\n//         balances.push(monthSum);\n//         labels.push(formatMonthYear(month[0].entry_date));\n//       });\n//     }\n\n//     return { balances, labels };\n//   };\n\n//   const getCurrentWeek = (data) => {\n//     const weekData = [];\n//     const today = new Date();\n//     const dayOfWeek = today.getDay(); // 0 (Sun) to 6 (Sat)\n//     const startOfWeek = new Date(today);\n//     startOfWeek.setDate(today.getDate() - dayOfWeek); // Start on Sunday\n//     startOfWeek.setHours(0, 0, 0, 0);\n\n//     const endOfWeek = new Date(startOfWeek);\n//     endOfWeek.setDate(startOfWeek.getDate() + 6); // End on Saturday\n//     endOfWeek.setHours(23, 59, 59, 999);\n\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\n//         weekData.push(entry);\n//       }\n//     });\n\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//     return weekData;\n//   };\n\n//   const getCurrentMonth = (data) => {\n//     const weeks = [];\n//     let week = [];\n//     const today = new Date();\n//     const month = today.getMonth();\n\n//     data.forEach((entry, index) => {\n//       const entryDate = new Date(entry.entry_date);\n//       if (entryDate.getMonth() === month) {\n//         week.push(entry);\n//         // Assuming 5 entries per week, adjust as needed\n//         if (week.length === 5) {\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//           weeks.push(week);\n//           week = [];\n//         }\n//       }\n//     });\n\n//     if (week.length) {\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n//       weeks.push(week);\n//     }\n\n//     return weeks;\n//   };\n\n//   const getMonthsData = (data) => {\n//     const months = Array.from({ length: 12 }, () => []);\n//     data.forEach((entry) => {\n//       const entryDate = new Date(entry.entry_date);\n//       months[entryDate.getMonth()].push(entry);\n//     });\n//     return months.filter((month) => month.length > 0); // Filter out any empty month arrays\n//   };\n\n//   const formatMonthYear = (dateStr) => {\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\n//     const dateParts = dateStr.split(\"-\");\n//     const month = dateParts[1];\n//     const year = dateParts[0];\n//     return `${month}/${year}`;\n//   };\n\n//   // Animation Function using requestAnimationFrame for smoother animations\n//   const animateBars = (balances) => {\n//     balances.forEach((balance, index) => {\n//       const barElem = barRefs.current[index];\n//       if (barElem) {\n//         let width = 0;\n//         const maxBalance = Math.max(...balances);\n//         const percentage = (Math.abs(balance) / maxBalance) * 100;\n//         const animate = () => {\n//           if (width < percentage) {\n//             width++;\n//             barElem.style.width = width + \"%\";\n//             barElem.innerHTML = width + \"%\"; // Update the label if desired\n//             animationRefs.current[index] = requestAnimationFrame(animate);\n//           } else {\n//             cancelAnimationFrame(animationRefs.current[index]);\n//           }\n//         };\n//         animate(); // Start the animation\n//       } else {\n//         console.warn(`Bar element at index ${index} is undefined`);\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     const { balances } = calculateBars();\n//     barRefs.current = balances.map(() => React.createRef());\n//     animateBars(balances);\n//   }, [dailyPNLData, view]);\n\n//   useEffect(() => {\n//     if (dailyPNLData.length === 0) return;\n\n//     const { balances, labels } = calculateBars();\n\n//     // Initialize refs\n//     barRefs.current = balances.map(\n//       (_, i) => barRefs.current[i] || React.createRef()\n//     );\n\n//     // Dynamic Threshold Calculation\n//     const maxBalance = Math.max(...balances);\n//     const minBalance = Math.min(...balances);\n//     const threshold = Math.max(Math.abs(maxBalance), Math.abs(minBalance));\n\n//     animateBars(balances, threshold);\n\n//     // Cleanup function to cancel animations on unmount or data change\n//     return () => {\n//       animationRefs.current.forEach((anim) => cancelAnimationFrame(anim));\n//     };\n//   }, [dailyPNLData, view]);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   const { balances, labels } = calculateBars();\n\n//   // Dynamic Threshold Calculation\n//   const maxBalance = Math.max(...balances);\n//   const minBalance = Math.min(...balances);\n//   const threshold = Math.max(Math.abs(maxBalance), Math.abs(minBalance));\n\n//   const headerDate =\n//     view === \"daily\"\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\n//       : view === \"weekly\"\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\n\n//   return (\n//     <div className=\"main-bars-container\">\n//       <div className=\"header-card\">\n//         <div className=\"tab-container\">\n//           <button\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"daily\")}\n//           >\n//             Daily\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"weekly\")}\n//           >\n//             Weekly\n//           </button>\n//           <button\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\n//             onClick={() => setView(\"monthly\")}\n//           >\n//             Monthly\n//           </button>\n//         </div>\n//         <div className=\"header-date\">{headerDate}</div>\n//       </div>\n//       <hr />\n//       <div className=\"bars-container\">\n//         {balances.map((balance, index) => {\n//           const isPositive = balance >= 0;\n//           return (\n//             <div key={index} className=\"bar-wrapper\">\n//               <span className=\"bar-label\">{labels[index]}</span>\n//               <div\n//                 ref={(el) => (barRefs.current[index] = el)}\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\n//                 style={{\n//                   width: `0%`, // Initial width for animation\n//                 }}\n//               >\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Bars;","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchDailyPnls","formatCash","formatDate","Bars","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","barRefs","animationRefs","fetchDailyPNLData","data","console","calculateBars","balances","labels","currentWeek","getCurrentWeek","map","day","parseFloat","balance","entry_date","currentMonth","getCurrentMonth","forEach","week","weekSum","reduce","sum","push","length","months","getMonthsData","month","monthSum","formatMonthYear","weekData","today","Date","dayOfWeek","getDay","startOfWeek","setDate","getDate","setHours","endOfWeek","entry","entryDate","sort","a","b","weeks","getMonth","index","Array","from","filter","dateStr","includes","dateParts","split","year","animateBars","_barRefs$current$inde","barElem","current","width","threshold","Math","max","percentage","abs","interval","setInterval","clearInterval","style","innerHTML","warn","_","i","createRef","anim","cancelAnimationFrame","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","maxBalance","minBalance","min","headerDate","toLocaleDateString","className","onClick","isPositive","key","ref","el"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/Bars.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst Bars = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"daily\");\r\n  const barRefs = useRef([]);\r\n  const animationRefs = useRef([]); // To keep track of animation frames\r\n\r\n  // Fetch Data\r\n  const fetchDailyPNLData = async () => {\r\n    try {\r\n      const data = await fetchDailyPnls();\r\n      setDailyPNLData(data);\r\n    } catch (error) {\r\n      setError(\"Error fetching Daily PNL data\");\r\n      console.error(\"Error fetching Daily PNL data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  // Data Processing Functions\r\n  const calculateBars = () => {\r\n    let balances = [];\r\n    let labels = [];\r\n\r\n    if (view === \"daily\") {\r\n      const currentWeek = getCurrentWeek(dailyPNLData);\r\n      balances = currentWeek.map((day) => parseFloat(day.balance));\r\n      labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n    } else if (view === \"weekly\") {\r\n      const currentMonth = getCurrentMonth(dailyPNLData);\r\n      currentMonth.forEach((week) => {\r\n        const weekSum = week.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance),\r\n          0\r\n        );\r\n        balances.push(weekSum);\r\n        labels.push(\r\n          `${formatDate(week[0].entry_date)} - ${formatDate(\r\n            week[week.length - 1].entry_date\r\n          )}`\r\n        );\r\n      });\r\n    } else if (view === \"monthly\") {\r\n      const months = getMonthsData(dailyPNLData);\r\n      months.forEach((month) => {\r\n        const monthSum = month.reduce(\r\n          (sum, day) => sum + parseFloat(day.balance),\r\n          0\r\n        );\r\n        balances.push(monthSum);\r\n        labels.push(formatMonthYear(month[0].entry_date));\r\n      });\r\n    }\r\n\r\n    return { balances, labels };\r\n  };\r\n\r\n  const getCurrentWeek = (data) => {\r\n    const weekData = [];\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 (Sun) to 6 (Sat)\r\n    const startOfWeek = new Date(today);\r\n    startOfWeek.setDate(today.getDate() - dayOfWeek); // Start on Sunday\r\n    startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n    const endOfWeek = new Date(startOfWeek);\r\n    endOfWeek.setDate(startOfWeek.getDate() + 6); // End on Saturday\r\n    endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n        weekData.push(entry);\r\n      }\r\n    });\r\n\r\n    weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n    return weekData;\r\n  };\r\n\r\n  const getCurrentMonth = (data) => {\r\n    const weeks = [];\r\n    let week = [];\r\n    const today = new Date();\r\n    const month = today.getMonth();\r\n\r\n    data.forEach((entry, index) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      if (entryDate.getMonth() === month) {\r\n        week.push(entry);\r\n        // Assuming 5 entries per week, adjust as needed\r\n        if (week.length === 5) {\r\n          week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n          weeks.push(week);\r\n          week = [];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (week.length) {\r\n      week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n      weeks.push(week);\r\n    }\r\n\r\n    return weeks;\r\n  };\r\n\r\n  const getMonthsData = (data) => {\r\n    const months = Array.from({ length: 12 }, () => []);\r\n    data.forEach((entry) => {\r\n      const entryDate = new Date(entry.entry_date);\r\n      months[entryDate.getMonth()].push(entry);\r\n    });\r\n    return months.filter((month) => month.length > 0); // Filter out any empty month arrays\r\n  };\r\n\r\n  const formatMonthYear = (dateStr) => {\r\n    if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n    const dateParts = dateStr.split(\"-\");\r\n    const month = dateParts[1];\r\n    const year = dateParts[0];\r\n    return `${month}/${year}`;\r\n  };\r\n\r\n  // Animation Function using requestAnimationFrame for smoother animations\r\n  const animateBars = (balances) => {\r\n    balances.forEach((balance, index) => {\r\n      const barElem = barRefs.current[index]?.current;\r\n      if (barElem) {\r\n        let width = 0;\r\n        const threshold = Math.max(...balances) * 5; // Adjust as per your scaling logic\r\n        const percentage = (Math.abs(balance) / threshold) * 100;\r\n\r\n        const interval = setInterval(() => {\r\n          if (width >= percentage) {\r\n            clearInterval(interval);\r\n          } else {\r\n            width++;\r\n            barElem.style.width = width + \"%\";\r\n            barElem.innerHTML = width + \"%\"; // Update the label if desired\r\n          }\r\n        }, 10);\r\n      } else {\r\n        console.warn(`Bar element at index ${index} is undefined`);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Place the useEffect hook here\r\n  useEffect(() => {\r\n    if (dailyPNLData.length === 0) return;\r\n\r\n    const { balances } = calculateBars();\r\n\r\n    // Initialize refs\r\n    barRefs.current = balances.map(\r\n      (_, i) => barRefs.current[i] || React.createRef()\r\n    );\r\n\r\n    // Animate the bars\r\n    animateBars(balances);\r\n\r\n    // Cleanup function to cancel animations on unmount or data change\r\n    return () => {\r\n      animationRefs.current.forEach((anim) => cancelAnimationFrame(anim));\r\n    };\r\n  }, [dailyPNLData, view]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  const { balances, labels } = calculateBars();\r\n\r\n  // Dynamic Threshold Calculation\r\n  const maxBalance = Math.max(...balances);\r\n  const minBalance = Math.min(...balances);\r\n  const threshold = Math.max(Math.abs(maxBalance), Math.abs(minBalance));\r\n\r\n  const headerDate =\r\n    view === \"daily\"\r\n      ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n      : view === \"weekly\"\r\n      ? formatMonthYear(dailyPNLData[0].entry_date)\r\n      : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n  return (\r\n    <div className=\"main-bars-container\">\r\n      <div className=\"header-card\">\r\n        <div className=\"tab-container\">\r\n          <button\r\n            className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"daily\")}\r\n          >\r\n            Daily\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"weekly\")}\r\n          >\r\n            Weekly\r\n          </button>\r\n          <button\r\n            className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n            onClick={() => setView(\"monthly\")}\r\n          >\r\n            Monthly\r\n          </button>\r\n        </div>\r\n        <div className=\"header-date\">{headerDate}</div>\r\n      </div>\r\n      <hr />\r\n      <div className=\"bars-container\">\r\n        {balances.map((balance, index) => {\r\n          const isPositive = balance >= 0;\r\n          return (\r\n            <div key={index} className=\"bar-wrapper\">\r\n              <span className=\"bar-label\">{labels[index]}</span>\r\n              <div\r\n                ref={(el) => (barRefs.current[index] = el)}\r\n                className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n                style={{\r\n                  width: `0%`, // Initial width for animation\r\n                }}\r\n              >\r\n                <span className=\"bar-value\">{formatCash(balance)}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bars;\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const Bars = () => {\r\n//   const [dailyPNLData, setDailyPNLData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [view, setView] = useState(\"daily\");\r\n//   const barRefs = useRef([]);\r\n//   const animationRefs = useRef([]); // To keep track of animation frames\r\n\r\n//   // Fetch Data\r\n//   const fetchDailyPNLData = async () => {\r\n//     try {\r\n//       const data = await fetchDailyPnls();\r\n//       setDailyPNLData(data);\r\n//     } catch (error) {\r\n//       setError(\"Error fetching Daily PNL data\");\r\n//       console.error(\"Error fetching Daily PNL data:\", error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchDailyPNLData();\r\n//   }, []);\r\n\r\n//   // Data Processing Functions\r\n//   const calculateBars = () => {\r\n//     let balances = [];\r\n//     let labels = [];\r\n\r\n//     if (view === \"daily\") {\r\n//       const currentWeek = getCurrentWeek(dailyPNLData);\r\n//       balances = currentWeek.map((day) => parseFloat(day.balance));\r\n//       labels = currentWeek.map((day) => formatDate(day.entry_date));\r\n//     } else if (view === \"weekly\") {\r\n//       const currentMonth = getCurrentMonth(dailyPNLData);\r\n//       currentMonth.forEach((week) => {\r\n//         const weekSum = week.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(weekSum);\r\n//         labels.push(\r\n//           `${formatDate(week[0].entry_date)} - ${formatDate(\r\n//             week[week.length - 1].entry_date\r\n//           )}`\r\n//         );\r\n//       });\r\n//     } else if (view === \"monthly\") {\r\n//       const months = getMonthsData(dailyPNLData);\r\n//       months.forEach((month) => {\r\n//         const monthSum = month.reduce(\r\n//           (sum, day) => sum + parseFloat(day.balance),\r\n//           0\r\n//         );\r\n//         balances.push(monthSum);\r\n//         labels.push(formatMonthYear(month[0].entry_date));\r\n//       });\r\n//     }\r\n\r\n//     return { balances, labels };\r\n//   };\r\n\r\n//   const getCurrentWeek = (data) => {\r\n//     const weekData = [];\r\n//     const today = new Date();\r\n//     const dayOfWeek = today.getDay(); // 0 (Sun) to 6 (Sat)\r\n//     const startOfWeek = new Date(today);\r\n//     startOfWeek.setDate(today.getDate() - dayOfWeek); // Start on Sunday\r\n//     startOfWeek.setHours(0, 0, 0, 0);\r\n\r\n//     const endOfWeek = new Date(startOfWeek);\r\n//     endOfWeek.setDate(startOfWeek.getDate() + 6); // End on Saturday\r\n//     endOfWeek.setHours(23, 59, 59, 999);\r\n\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate >= startOfWeek && entryDate <= endOfWeek) {\r\n//         weekData.push(entry);\r\n//       }\r\n//     });\r\n\r\n//     weekData.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//     return weekData;\r\n//   };\r\n\r\n//   const getCurrentMonth = (data) => {\r\n//     const weeks = [];\r\n//     let week = [];\r\n//     const today = new Date();\r\n//     const month = today.getMonth();\r\n\r\n//     data.forEach((entry, index) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       if (entryDate.getMonth() === month) {\r\n//         week.push(entry);\r\n//         // Assuming 5 entries per week, adjust as needed\r\n//         if (week.length === 5) {\r\n//           week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//           weeks.push(week);\r\n//           week = [];\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     if (week.length) {\r\n//       week.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\r\n//       weeks.push(week);\r\n//     }\r\n\r\n//     return weeks;\r\n//   };\r\n\r\n//   const getMonthsData = (data) => {\r\n//     const months = Array.from({ length: 12 }, () => []);\r\n//     data.forEach((entry) => {\r\n//       const entryDate = new Date(entry.entry_date);\r\n//       months[entryDate.getMonth()].push(entry);\r\n//     });\r\n//     return months.filter((month) => month.length > 0); // Filter out any empty month arrays\r\n//   };\r\n\r\n//   const formatMonthYear = (dateStr) => {\r\n//     if (!dateStr || !dateStr.includes(\"-\")) return \"\";\r\n//     const dateParts = dateStr.split(\"-\");\r\n//     const month = dateParts[1];\r\n//     const year = dateParts[0];\r\n//     return `${month}/${year}`;\r\n//   };\r\n\r\n//   // Animation Function using requestAnimationFrame for smoother animations\r\n//   const animateBars = (balances) => {\r\n//     balances.forEach((balance, index) => {\r\n//       const barElem = barRefs.current[index];\r\n//       if (barElem) {\r\n//         let width = 0;\r\n//         const maxBalance = Math.max(...balances);\r\n//         const percentage = (Math.abs(balance) / maxBalance) * 100;\r\n//         const animate = () => {\r\n//           if (width < percentage) {\r\n//             width++;\r\n//             barElem.style.width = width + \"%\";\r\n//             barElem.innerHTML = width + \"%\"; // Update the label if desired\r\n//             animationRefs.current[index] = requestAnimationFrame(animate);\r\n//           } else {\r\n//             cancelAnimationFrame(animationRefs.current[index]);\r\n//           }\r\n//         };\r\n//         animate(); // Start the animation\r\n//       } else {\r\n//         console.warn(`Bar element at index ${index} is undefined`);\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const { balances } = calculateBars();\r\n//     barRefs.current = balances.map(() => React.createRef());\r\n//     animateBars(balances);\r\n//   }, [dailyPNLData, view]);\r\n\r\n//   useEffect(() => {\r\n//     if (dailyPNLData.length === 0) return;\r\n\r\n//     const { balances, labels } = calculateBars();\r\n\r\n//     // Initialize refs\r\n//     barRefs.current = balances.map(\r\n//       (_, i) => barRefs.current[i] || React.createRef()\r\n//     );\r\n\r\n//     // Dynamic Threshold Calculation\r\n//     const maxBalance = Math.max(...balances);\r\n//     const minBalance = Math.min(...balances);\r\n//     const threshold = Math.max(Math.abs(maxBalance), Math.abs(minBalance));\r\n\r\n//     animateBars(balances, threshold);\r\n\r\n//     // Cleanup function to cancel animations on unmount or data change\r\n//     return () => {\r\n//       animationRefs.current.forEach((anim) => cancelAnimationFrame(anim));\r\n//     };\r\n//   }, [dailyPNLData, view]);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>{error}</div>;\r\n\r\n//   const { balances, labels } = calculateBars();\r\n\r\n//   // Dynamic Threshold Calculation\r\n//   const maxBalance = Math.max(...balances);\r\n//   const minBalance = Math.min(...balances);\r\n//   const threshold = Math.max(Math.abs(maxBalance), Math.abs(minBalance));\r\n\r\n//   const headerDate =\r\n//     view === \"daily\"\r\n//       ? new Date(dailyPNLData[0].entry_date).toLocaleDateString()\r\n//       : view === \"weekly\"\r\n//       ? formatMonthYear(dailyPNLData[0].entry_date)\r\n//       : dailyPNLData[0].entry_date.split(\"-\")[0];\r\n\r\n//   return (\r\n//     <div className=\"main-bars-container\">\r\n//       <div className=\"header-card\">\r\n//         <div className=\"tab-container\">\r\n//           <button\r\n//             className={`tab-button ${view === \"daily\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"daily\")}\r\n//           >\r\n//             Daily\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"weekly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"weekly\")}\r\n//           >\r\n//             Weekly\r\n//           </button>\r\n//           <button\r\n//             className={`tab-button ${view === \"monthly\" ? \"active\" : \"\"}`}\r\n//             onClick={() => setView(\"monthly\")}\r\n//           >\r\n//             Monthly\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"header-date\">{headerDate}</div>\r\n//       </div>\r\n//       <hr />\r\n//       <div className=\"bars-container\">\r\n//         {balances.map((balance, index) => {\r\n//           const isPositive = balance >= 0;\r\n//           return (\r\n//             <div key={index} className=\"bar-wrapper\">\r\n//               <span className=\"bar-label\">{labels[index]}</span>\r\n//               <div\r\n//                 ref={(el) => (barRefs.current[index] = el)}\r\n//                 className={`bar ${isPositive ? \"positive\" : \"negative\"}`}\r\n//                 style={{\r\n//                   width: `0%`, // Initial width for animation\r\n//                 }}\r\n//               >\r\n//                 <span className=\"bar-value\">{formatCash(balance)}</span>\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Bars;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
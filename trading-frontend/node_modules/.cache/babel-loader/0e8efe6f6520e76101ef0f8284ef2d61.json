{"ast":null,"code":"// Calculate Initial Cash (from API response)\nexport const calculateInitialCash = cashData => {\n  return (cashData === null || cashData === void 0 ? void 0 : cashData.initial_cash) ? Number(cashData.initial_cash) : 0;\n};\n\n// // Calculate Total Deposits\n// export const calculateTotalDeposits = (transactions) => {\n//   return transactions\n//     .filter((transaction) => transaction.transaction_type === \"deposit\")\n//     .reduce((total, transaction) => total + Number(transaction.amount), 0);\n// };\n\n// // Calculate Total Withdrawals\n// export const calculateTotalWithdrawals = (transactions) => {\n//   return transactions\n//     .filter((transaction) => transaction.transaction_type === \"withdrawal\")\n//     .reduce((total, transaction) => total + Number(transaction.amount), 0);\n// };\n\n// Calculate Total Deposits\nexport const calculateTotalDeposits = transactions => {\n  if (!Array.isArray(transactions)) {\n    console.error(\"Expected an array of transactions, but got:\", transactions);\n    return 0;\n  }\n  return transactions.filter(transaction => transaction.transaction_type === \"deposit\").reduce((total, transaction) => total + Number(transaction.amount), 0);\n};\n\n// Calculate Total Withdrawals\nexport const calculateTotalWithdrawals = transactions => {\n  if (!Array.isArray(transactions)) {\n    console.error(\"Expected an array of transactions, but got:\", transactions);\n    return 0;\n  }\n  return transactions.filter(transaction => transaction.transaction_type === \"withdrawal\").reduce((total, transaction) => total + Number(transaction.amount), 0);\n};\n\n// Calculate Net Profit/Loss (from daily PNL data)\nexport const calculateNetPL = dailyPnls => {\n  return dailyPnls.reduce((totalPL, pnl) => {\n    return totalPL + Number(pnl.balance);\n  }, 0);\n};\n\n// Calculate Available Cash (Initial Cash + Net P/L + Deposits - Withdrawals)\nexport const calculateAvailableCash = (initialCash, netPL, transactions) => {\n  const totalDeposits = calculateTotalDeposits(transactions);\n  const totalWithdrawals = calculateTotalWithdrawals(transactions);\n  return initialCash + totalDeposits - totalWithdrawals + netPL;\n};\n\n// Calculate Cash Balance (same as available cash)\nexport const calculateCashBalance = (initialCash, netPL, transactions) => {\n  return calculateAvailableCash(initialCash, netPL, transactions);\n};\n\n// Calculate Return on Investment (RoI) based on Initial Cash and Net P/L\nexport const calculateROI = (initialCash, netPL) => {\n  if (initialCash === 0) return 0;\n  return netPL / initialCash * 100;\n};","map":{"version":3,"names":["calculateInitialCash","cashData","initial_cash","Number","calculateTotalDeposits","transactions","Array","isArray","console","error","filter","transaction","transaction_type","reduce","total","amount","calculateTotalWithdrawals","calculateNetPL","dailyPnls","totalPL","pnl","balance","calculateAvailableCash","initialCash","netPL","totalDeposits","totalWithdrawals","calculateCashBalance","calculateROI"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/cash/CashCalc.js"],"sourcesContent":["// Calculate Initial Cash (from API response)\r\nexport const calculateInitialCash = (cashData) => {\r\n  return cashData?.initial_cash ? Number(cashData.initial_cash) : 0;\r\n};\r\n\r\n// // Calculate Total Deposits\r\n// export const calculateTotalDeposits = (transactions) => {\r\n//   return transactions\r\n//     .filter((transaction) => transaction.transaction_type === \"deposit\")\r\n//     .reduce((total, transaction) => total + Number(transaction.amount), 0);\r\n// };\r\n\r\n// // Calculate Total Withdrawals\r\n// export const calculateTotalWithdrawals = (transactions) => {\r\n//   return transactions\r\n//     .filter((transaction) => transaction.transaction_type === \"withdrawal\")\r\n//     .reduce((total, transaction) => total + Number(transaction.amount), 0);\r\n// };\r\n\r\n// Calculate Total Deposits\r\nexport const calculateTotalDeposits = (transactions) => {\r\n  if (!Array.isArray(transactions)) {\r\n    console.error(\"Expected an array of transactions, but got:\", transactions);\r\n    return 0;\r\n  }\r\n\r\n  return transactions\r\n    .filter((transaction) => transaction.transaction_type === \"deposit\")\r\n    .reduce((total, transaction) => total + Number(transaction.amount), 0);\r\n};\r\n\r\n// Calculate Total Withdrawals\r\nexport const calculateTotalWithdrawals = (transactions) => {\r\n  if (!Array.isArray(transactions)) {\r\n    console.error(\"Expected an array of transactions, but got:\", transactions);\r\n    return 0;\r\n  }\r\n\r\n  return transactions\r\n    .filter((transaction) => transaction.transaction_type === \"withdrawal\")\r\n    .reduce((total, transaction) => total + Number(transaction.amount), 0);\r\n};\r\n\r\n// Calculate Net Profit/Loss (from daily PNL data)\r\nexport const calculateNetPL = (dailyPnls) => {\r\n  return dailyPnls.reduce((totalPL, pnl) => {\r\n    return totalPL + Number(pnl.balance);\r\n  }, 0);\r\n};\r\n\r\n// Calculate Available Cash (Initial Cash + Net P/L + Deposits - Withdrawals)\r\nexport const calculateAvailableCash = (initialCash, netPL, transactions) => {\r\n  const totalDeposits = calculateTotalDeposits(transactions);\r\n  const totalWithdrawals = calculateTotalWithdrawals(transactions);\r\n\r\n  return initialCash + totalDeposits - totalWithdrawals + netPL;\r\n};\r\n\r\n// Calculate Cash Balance (same as available cash)\r\nexport const calculateCashBalance = (initialCash, netPL, transactions) => {\r\n  return calculateAvailableCash(initialCash, netPL, transactions);\r\n};\r\n\r\n// Calculate Return on Investment (RoI) based on Initial Cash and Net P/L\r\nexport const calculateROI = (initialCash, netPL) => {\r\n  if (initialCash === 0) return 0;\r\n  return (netPL / initialCash) * 100;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAIC,QAAQ,IAAK;EAChD,OAAO,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,YAAY,IAAGC,MAAM,CAACF,QAAQ,CAACC,YAAY,CAAC,GAAG,CAAC;AACnE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAME,sBAAsB,GAAIC,YAAY,IAAK;EACtD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;IAChCG,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEJ,YAAY,CAAC;IAC1E,OAAO,CAAC;EACV;EAEA,OAAOA,YAAY,CAChBK,MAAM,CAAEC,WAAW,IAAKA,WAAW,CAACC,gBAAgB,KAAK,SAAS,CAAC,CACnEC,MAAM,CAAC,CAACC,KAAK,EAAEH,WAAW,KAAKG,KAAK,GAAGX,MAAM,CAACQ,WAAW,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC;AAC1E,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAIX,YAAY,IAAK;EACzD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;IAChCG,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEJ,YAAY,CAAC;IAC1E,OAAO,CAAC;EACV;EAEA,OAAOA,YAAY,CAChBK,MAAM,CAAEC,WAAW,IAAKA,WAAW,CAACC,gBAAgB,KAAK,YAAY,CAAC,CACtEC,MAAM,CAAC,CAACC,KAAK,EAAEH,WAAW,KAAKG,KAAK,GAAGX,MAAM,CAACQ,WAAW,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC;AAC1E,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAIC,SAAS,IAAK;EAC3C,OAAOA,SAAS,CAACL,MAAM,CAAC,CAACM,OAAO,EAAEC,GAAG,KAAK;IACxC,OAAOD,OAAO,GAAGhB,MAAM,CAACiB,GAAG,CAACC,OAAO,CAAC;EACtC,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,WAAW,EAAEC,KAAK,EAAEnB,YAAY,KAAK;EAC1E,MAAMoB,aAAa,GAAGrB,sBAAsB,CAACC,YAAY,CAAC;EAC1D,MAAMqB,gBAAgB,GAAGV,yBAAyB,CAACX,YAAY,CAAC;EAEhE,OAAOkB,WAAW,GAAGE,aAAa,GAAGC,gBAAgB,GAAGF,KAAK;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMG,oBAAoB,GAAGA,CAACJ,WAAW,EAAEC,KAAK,EAAEnB,YAAY,KAAK;EACxE,OAAOiB,sBAAsB,CAACC,WAAW,EAAEC,KAAK,EAAEnB,YAAY,CAAC;AACjE,CAAC;;AAED;AACA,OAAO,MAAMuB,YAAY,GAAGA,CAACL,WAAW,EAAEC,KAAK,KAAK;EAClD,IAAID,WAAW,KAAK,CAAC,EAAE,OAAO,CAAC;EAC/B,OAAQC,KAAK,GAAGD,WAAW,GAAI,GAAG;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
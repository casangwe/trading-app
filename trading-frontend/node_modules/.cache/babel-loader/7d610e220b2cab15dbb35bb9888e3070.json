{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Home.js\";\n// Home.js\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/home.css\";\nimport Account from \"./Account\";\nimport NewTrade from \"./NewTrade\";\nimport RecentTrades from \"./RecentTrades\";\nimport BiggestWinsLosses from \"./BiggestWinsLosses\";\nconst Home = () => {\n  const [recentTrades, setRecentTrades] = useState([]);\n  useEffect(() => {\n    fetchRecentTrades(); //get trades from backend\n  }, []);\n  const fetchRecentTrades = () => {\n    fetch(\"http://localhost:8000/trades/\").then(response => response.json()).then(data => setRecentTrades(data)).catch(error => console.error(\"Error fetching recent trades:\", error));\n  };\n\n  // format date string to MM/DD/YYYY format\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = date.getDate().toString().padStart(2, \"0\");\n    const year = date.getFullYear();\n    return `${month}/${day}/${year}`;\n  };\n  // submit new trade\n  const handleNewTradeSubmit = formData => {\n    // POST request to backend to add new trade\n    fetch(\"http://localhost:8000/trades/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(() => {\n      alertMessages();\n    }).catch(error => console.error(\"Error adding new trade:\", error));\n  };\n\n  // Function to refresh the list of recent trades\n  const handleRefresh = () => {\n    fetchRecentTrades();\n    alert(\"Successfully updated the list.\"); // Show alert when list is repopulated\n  };\n  const alertMessages = (symbol, type) => {\n    const modal = document.createElement(\"div\");\n    modal.className = \"modal\";\n    const modalContent = document.createElement(\"div\");\n    modalContent.className = \"modal-content\";\n    const closeBtn = document.createElement(\"span\");\n    closeBtn.className = \"close\";\n    closeBtn.innerHTML = \"&times;\";\n    closeBtn.onclick = function () {\n      modal.style.display = \"none\";\n    };\n    modalContent.appendChild(closeBtn);\n    const message = document.createElement(\"p\");\n    message.textContent = `New ${type} option trade for ${symbol} has been successfully submitted!`;\n    modalContent.appendChild(message);\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n    modal.style.display = \"block\";\n    setTimeout(function () {\n      modal.style.display = \"none\";\n      document.body.removeChild(modal);\n    }, 5000); // Hide the popup after 5 seconds\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Account, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewTrade, {\n    onTradeSubmit: handleNewTradeSubmit,\n    alertMessages: alertMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(RecentTrades, {\n    recentTrades: recentTrades,\n    formatDate: formatDate,\n    onRefresh: handleRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BiggestWinsLosses, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Home;","map":{"version":3,"names":["React","useState","useEffect","Account","NewTrade","RecentTrades","BiggestWinsLosses","Home","recentTrades","setRecentTrades","fetchRecentTrades","fetch","then","response","json","data","catch","error","console","formatDate","dateString","date","Date","month","getMonth","toString","padStart","day","getDate","year","getFullYear","handleNewTradeSubmit","formData","method","headers","body","JSON","stringify","alertMessages","handleRefresh","alert","symbol","type","modal","document","createElement","className","modalContent","closeBtn","innerHTML","onclick","style","display","appendChild","message","textContent","setTimeout","removeChild","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onTradeSubmit","onRefresh"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Home.js"],"sourcesContent":["// Home.js\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./styles/home.css\";\r\nimport Account from \"./Account\";\r\nimport NewTrade from \"./NewTrade\";\r\nimport RecentTrades from \"./RecentTrades\";\r\nimport BiggestWinsLosses from \"./BiggestWinsLosses\";\r\n\r\nconst Home = () => {\r\n  const [recentTrades, setRecentTrades] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchRecentTrades(); //get trades from backend\r\n  }, []);\r\n\r\n  const fetchRecentTrades = () => {\r\n    fetch(\"http://localhost:8000/trades/\")\r\n      .then((response) => response.json())\r\n      .then((data) => setRecentTrades(data))\r\n      .catch((error) => console.error(\"Error fetching recent trades:\", error));\r\n  };\r\n\r\n  // format date string to MM/DD/YYYY format\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const day = date.getDate().toString().padStart(2, \"0\");\r\n    const year = date.getFullYear();\r\n    return `${month}/${day}/${year}`;\r\n  };\r\n  // submit new trade\r\n  const handleNewTradeSubmit = (formData) => {\r\n    // POST request to backend to add new trade\r\n    fetch(\"http://localhost:8000/trades/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then(() => {\r\n        alertMessages();\r\n      })\r\n      .catch((error) => console.error(\"Error adding new trade:\", error));\r\n  };\r\n\r\n  // Function to refresh the list of recent trades\r\n  const handleRefresh = () => {\r\n    fetchRecentTrades();\r\n    alert(\"Successfully updated the list.\"); // Show alert when list is repopulated\r\n  };\r\n  const alertMessages = (symbol, type) => {\r\n    const modal = document.createElement(\"div\");\r\n    modal.className = \"modal\";\r\n    const modalContent = document.createElement(\"div\");\r\n    modalContent.className = \"modal-content\";\r\n    const closeBtn = document.createElement(\"span\");\r\n    closeBtn.className = \"close\";\r\n    closeBtn.innerHTML = \"&times;\";\r\n    closeBtn.onclick = function () {\r\n      modal.style.display = \"none\";\r\n    };\r\n    modalContent.appendChild(closeBtn);\r\n    const message = document.createElement(\"p\");\r\n    message.textContent = `New ${type} option trade for ${symbol} has been successfully submitted!`;\r\n    modalContent.appendChild(message);\r\n    modal.appendChild(modalContent);\r\n    document.body.appendChild(modal);\r\n    modal.style.display = \"block\";\r\n    setTimeout(function () {\r\n      modal.style.display = \"none\";\r\n      document.body.removeChild(modal);\r\n    }, 5000); // Hide the popup after 5 seconds\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <Account />\r\n      <NewTrade\r\n        onTradeSubmit={handleNewTradeSubmit}\r\n        alertMessages={alertMessages}\r\n      />\r\n      <RecentTrades\r\n        recentTrades={recentTrades}\r\n        formatDate={formatDate}\r\n        onRefresh={handleRefresh}\r\n      />\r\n      <BiggestWinsLosses />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
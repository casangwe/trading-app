{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\InvestmentChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst InvestmentChart = () => {\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [view, setView] = useState(\"1D\");\n  const [chartData, setChartData] = useState([]);\n  const [investmentSummary, setInvestmentSummary] = useState(null);\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        if (data && data.length > 0) {\n          setDailyPNLData(data);\n          setInvestmentSummary(calculateInvestmentSummary(data));\n        } else {\n          setError(\"No data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  useEffect(() => {\n    if (dailyPNLData.length > 0) {\n      switch (view) {\n        case \"1D\":\n          setChartData(formatChartData(getCurrentWeek(dailyPNLData)));\n          break;\n        case \"1W\":\n          setChartData(formatChartData(getCurrentMonth(dailyPNLData)));\n          break;\n        case \"1M\":\n          setChartData(formatChartData(getLastThreeMonths(dailyPNLData)));\n          break;\n        default:\n          setChartData(formatChartData(dailyPNLData));\n          break;\n      }\n    }\n  }, [dailyPNLData, view]);\n  const calculateInvestmentSummary = data => {\n    var _sortedData$, _sortedData;\n    // Sort data by entry_date in ascending order to ensure the first and last entries are correct\n    const sortedData = [...data].sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n\n    // Calculate initial and final balances from sorted data\n    const initialBalance = parseFloat(((_sortedData$ = sortedData[0]) === null || _sortedData$ === void 0 ? void 0 : _sortedData$.close_cash) || 0);\n    const finalBalance = parseFloat(((_sortedData = sortedData[sortedData.length - 1]) === null || _sortedData === void 0 ? void 0 : _sortedData.close_cash) || 0);\n\n    // Calculate percentage change over time\n    const percentageChange = (finalBalance - initialBalance) / initialBalance * 100;\n    return {\n      balance: finalBalance,\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange\n    };\n  };\n  const formatChartData = data => {\n    // Sort data by entry_date in ascending order\n    const sortedData = [...data].sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n    return sortedData.map(entry => ({\n      date: formatDate(entry.entry_date),\n      cumulativeBalance: parseFloat(entry.close_cash || 0) // Use close_cash for cumulative balance\n    }));\n  };\n  const getCurrentWeek = data => {\n    const today = new Date();\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - today.getDay());\n    return data.filter(entry => new Date(entry.entry_date) >= startOfWeek && new Date(entry.entry_date) <= today);\n  };\n  const getCurrentMonth = data => {\n    const today = new Date();\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    return data.filter(entry => new Date(entry.entry_date) >= startOfMonth && new Date(entry.entry_date) <= today);\n  };\n  const getLastThreeMonths = data => {\n    const today = new Date();\n    const startOfThreeMonths = new Date(today);\n    startOfThreeMonths.setMonth(today.getMonth() - 2);\n    return data.filter(entry => new Date(entry.entry_date) >= startOfThreeMonths && new Date(entry.entry_date) <= today);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"Investing Summary\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"Current Balance: \", formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Change:\", \" \", investmentSummary ? `${investmentSummary.percentageChange.toFixed(2)}% All time` : \"Loading...\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"view-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `view-button ${view === \"1D\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"1W\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"1D\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `view-button ${view === \"1W\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"1M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"1W\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: `view-button ${view === \"1M\" ? \"active\" : \"\"}`,\n    onClick: () => setView(\"3M\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"1M\")), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"cumulativeBalance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => formatCash(value),\n    labelFormatter: label => `Date: ${label}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"cumulativeBalance\",\n    stroke: \"#4a90e2\",\n    strokeWidth: 2,\n    dot: {\n      r: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default InvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","formatCash","formatDate","InvestmentChart","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","view","setView","chartData","setChartData","investmentSummary","setInvestmentSummary","fetchDailyPNLData","data","length","calculateInvestmentSummary","console","formatChartData","getCurrentWeek","getCurrentMonth","getLastThreeMonths","_sortedData$","_sortedData","sortedData","sort","a","b","Date","entry_date","initialBalance","parseFloat","close_cash","finalBalance","percentageChange","balance","isNaN","map","entry","date","cumulativeBalance","today","startOfWeek","setDate","getDate","getDay","filter","startOfMonth","getFullYear","getMonth","startOfThreeMonths","setMonth","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onClick","width","height","dataKey","formatter","value","labelFormatter","label","type","stroke","strokeWidth","dot","r"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/InvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst InvestmentChart = () => {\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [view, setView] = useState(\"1D\");\r\n  const [chartData, setChartData] = useState([]);\r\n  const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        if (data && data.length > 0) {\r\n          setDailyPNLData(data);\r\n          setInvestmentSummary(calculateInvestmentSummary(data));\r\n        } else {\r\n          setError(\"No data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (dailyPNLData.length > 0) {\r\n      switch (view) {\r\n        case \"1D\":\r\n          setChartData(formatChartData(getCurrentWeek(dailyPNLData)));\r\n          break;\r\n        case \"1W\":\r\n          setChartData(formatChartData(getCurrentMonth(dailyPNLData)));\r\n          break;\r\n        case \"1M\":\r\n          setChartData(formatChartData(getLastThreeMonths(dailyPNLData)));\r\n          break;\r\n        default:\r\n          setChartData(formatChartData(dailyPNLData));\r\n          break;\r\n      }\r\n    }\r\n  }, [dailyPNLData, view]);\r\n\r\n  const calculateInvestmentSummary = (data) => {\r\n    // Sort data by entry_date in ascending order to ensure the first and last entries are correct\r\n    const sortedData = [...data].sort(\r\n      (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n    );\r\n\r\n    // Calculate initial and final balances from sorted data\r\n    const initialBalance = parseFloat(sortedData[0]?.close_cash || 0);\r\n    const finalBalance = parseFloat(\r\n      sortedData[sortedData.length - 1]?.close_cash || 0\r\n    );\r\n\r\n    // Calculate percentage change over time\r\n    const percentageChange =\r\n      ((finalBalance - initialBalance) / initialBalance) * 100;\r\n\r\n    return {\r\n      balance: finalBalance,\r\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n    };\r\n  };\r\n\r\n  const formatChartData = (data) => {\r\n    // Sort data by entry_date in ascending order\r\n    const sortedData = [...data].sort(\r\n      (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n    );\r\n\r\n    return sortedData.map((entry) => ({\r\n      date: formatDate(entry.entry_date),\r\n      cumulativeBalance: parseFloat(entry.close_cash || 0), // Use close_cash for cumulative balance\r\n    }));\r\n  };\r\n\r\n  const getCurrentWeek = (data) => {\r\n    const today = new Date();\r\n    const startOfWeek = new Date(today);\r\n    startOfWeek.setDate(today.getDate() - today.getDay());\r\n    return data.filter(\r\n      (entry) =>\r\n        new Date(entry.entry_date) >= startOfWeek &&\r\n        new Date(entry.entry_date) <= today\r\n    );\r\n  };\r\n\r\n  const getCurrentMonth = (data) => {\r\n    const today = new Date();\r\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n    return data.filter(\r\n      (entry) =>\r\n        new Date(entry.entry_date) >= startOfMonth &&\r\n        new Date(entry.entry_date) <= today\r\n    );\r\n  };\r\n\r\n  const getLastThreeMonths = (data) => {\r\n    const today = new Date();\r\n    const startOfThreeMonths = new Date(today);\r\n    startOfThreeMonths.setMonth(today.getMonth() - 2);\r\n    return data.filter(\r\n      (entry) =>\r\n        new Date(entry.entry_date) >= startOfThreeMonths &&\r\n        new Date(entry.entry_date) <= today\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"investment-chart-container\">\r\n      <div className=\"summary-section\">\r\n        <h2>Investing Summary</h2>\r\n        <p>Current Balance: {formatCash(investmentSummary?.balance || 0)}</p>\r\n        <p>\r\n          Change:{\" \"}\r\n          {investmentSummary\r\n            ? `${investmentSummary.percentageChange.toFixed(2)}% All time`\r\n            : \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"view-buttons\">\r\n        <button\r\n          className={`view-button ${view === \"1D\" ? \"active\" : \"\"}`}\r\n          onClick={() => setView(\"1W\")}\r\n        >\r\n          1D\r\n        </button>\r\n        <button\r\n          className={`view-button ${view === \"1W\" ? \"active\" : \"\"}`}\r\n          onClick={() => setView(\"1M\")}\r\n        >\r\n          1W\r\n        </button>\r\n        <button\r\n          className={`view-button ${view === \"1M\" ? \"active\" : \"\"}`}\r\n          onClick={() => setView(\"3M\")}\r\n        >\r\n          1M\r\n        </button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <LineChart data={chartData}>\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis dataKey=\"cumulativeBalance\" />\r\n            <Tooltip\r\n              formatter={(value) => formatCash(value)}\r\n              labelFormatter={(label) => `Date: ${label}`}\r\n            />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"cumulativeBalance\"\r\n              stroke=\"#4a90e2\"\r\n              strokeWidth={2}\r\n              dot={{ r: 2 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
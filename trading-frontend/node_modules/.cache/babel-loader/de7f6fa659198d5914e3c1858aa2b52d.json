{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000\";\n\n// Retrieve userId from localStorage\nconst getUserId = () => {\n  const userDataString = localStorage.getItem(\"user_data\");\n  if (!userDataString) {\n    console.error(\"No user data found in localStorage\");\n    return null;\n  }\n  try {\n    const userData = JSON.parse(userDataString);\n    return userData.sub;\n  } catch (error) {\n    console.error(\"Error parsing user data:\", error);\n    return null;\n  }\n};\n\n// Retrieve the userId\nconst userId = getUserId();\n\n// Check if userId is valid\nconst isValidUserId = id => id && typeof id === \"string\";\n\n// Fetch all daily PNLs for a specific user\nexport const fetchDailyPnls = async () => {\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\n  try {\n    const response = await fetch(`${API_BASE_URL}/dailypnls?user_id=${userId}`);\n    if (!response.ok) throw new Error(\"Error fetching daily PNLs\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Daily PNLs Error:\", error);\n    throw error;\n  }\n};\n\n// Create a new daily PNL for a specific user\nexport const createDailyPnl = async dailyPnlData => {\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\n  try {\n    const response = await fetch(`${API_BASE_URL}/dailypnls/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...dailyPnlData,\n        user_id: userId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || \"Error creating daily PNL\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Create Daily PNL Error:\", error);\n    throw error;\n  }\n};\n\n// Update an existing daily PNL for a specific user\nexport const updateDailyPnl = async (pnlId, dailyPnlData) => {\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\n  try {\n    const response = await fetch(`${API_BASE_URL}/dailypnls/${pnlId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dailyPnlData)\n    });\n    if (!response.ok) throw new Error(\"Error updating daily PNL\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update Daily PNL Error:\", error);\n    throw error;\n  }\n};\n\n// Delete a daily PNL for a specific user\nexport const deleteDailyPnl = async pnlId => {\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\n  try {\n    const response = await fetch(`${API_BASE_URL}/dailypnls/${pnlId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Error deleting daily PNL\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete Daily PNL Error:\", error);\n    throw error;\n  }\n};\n\n// Fetch a single daily PNL by ID for a specific user\nexport const fetchDailyPnlById = async pnlId => {\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\n  try {\n    const response = await fetch(`${API_BASE_URL}/dailypnls/${pnlId}?user_id=${userId}`);\n    if (!response.ok) throw new Error(\"Daily PNL not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Daily PNL Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getUserId","userDataString","localStorage","getItem","console","error","userData","JSON","parse","sub","userId","isValidUserId","id","fetchDailyPnls","Error","response","fetch","ok","json","createDailyPnl","dailyPnlData","method","headers","body","stringify","user_id","errorData","detail","updateDailyPnl","pnlId","deleteDailyPnl","fetchDailyPnlById"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/DailyPNLApi.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Retrieve userId from localStorage\r\nconst getUserId = () => {\r\n  const userDataString = localStorage.getItem(\"user_data\");\r\n  if (!userDataString) {\r\n    console.error(\"No user data found in localStorage\");\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const userData = JSON.parse(userDataString);\r\n    return userData.sub;\r\n  } catch (error) {\r\n    console.error(\"Error parsing user data:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Retrieve the userId\r\nconst userId = getUserId();\r\n\r\n// Check if userId is valid\r\nconst isValidUserId = (id) => id && typeof id === \"string\";\r\n\r\n// Fetch all daily PNLs for a specific user\r\nexport const fetchDailyPnls = async () => {\r\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/dailypnls?user_id=${userId}`);\r\n    if (!response.ok) throw new Error(\"Error fetching daily PNLs\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Daily PNLs Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new daily PNL for a specific user\r\nexport const createDailyPnl = async (dailyPnlData) => {\r\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/dailypnls/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ ...dailyPnlData, user_id: userId }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.detail || \"Error creating daily PNL\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Create Daily PNL Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing daily PNL for a specific user\r\nexport const updateDailyPnl = async (pnlId, dailyPnlData) => {\r\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/dailypnls/${pnlId}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(dailyPnlData),\r\n    });\r\n\r\n    if (!response.ok) throw new Error(\"Error updating daily PNL\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update Daily PNL Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a daily PNL for a specific user\r\nexport const deleteDailyPnl = async (pnlId) => {\r\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/dailypnls/${pnlId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    if (!response.ok) throw new Error(\"Error deleting daily PNL\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete Daily PNL Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a single daily PNL by ID for a specific user\r\nexport const fetchDailyPnlById = async (pnlId) => {\r\n  if (!isValidUserId(userId)) throw new Error(\"Invalid user ID\");\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/dailypnls/${pnlId}?user_id=${userId}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Daily PNL not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Daily PNL Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
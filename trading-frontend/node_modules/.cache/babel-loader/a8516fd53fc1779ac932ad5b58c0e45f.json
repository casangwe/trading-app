{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100;\n//           balance += profit;\n//           dailyProfitLoss += profit;\n\n//           const tradeCloseDate = new Date(trade.close_date);\n//           const periodStartDate = new Date();\n//           switch (timePeriod) {\n//             case \"1D\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\n//               break;\n//             case \"1W\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\n//               break;\n//             case \"1M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n//               break;\n//             case \"3M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\n//               break;\n//             case \"YTD\":\n//               periodStartDate.setMonth(0);\n//               periodStartDate.setDate(1);\n//               break;\n//             case \"1Y\":\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n//               break;\n//             case \"Max\":\n//               periodProfitLoss = trades.reduce((maxPL, trade) => {\n//                 const entryPrice = parseFloat(trade.entry_price);\n//                 const exitPrice = parseFloat(trade.exit_price);\n//                 const contracts = trade.contracts;\n//                 if (!isNaN(exitPrice)) {\n//                   const profit = (exitPrice - entryPrice) * contracts * 100;\n//                   return Math.max(maxPL, profit);\n//                 }\n//                 return maxPL;\n//               }, 0);\n//               break;\n//             default:\n//               break;\n//           }\n//           if (tradeCloseDate >= periodStartDate) {\n//             periodProfitLoss += profit;\n//           }\n//         }\n//       });\n\n//       setAccountBalance(balance);\n//       setDailyPL(dailyProfitLoss);\n//       setPeriodPL(periodProfitLoss);\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>{`${timePeriod}`}</p>\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph\n//         trades={trades}\n//         onTimePeriodChange={handleTimePeriodChange}\n//         periodPL={periodPL}\n//       />{\" \"}\n//       {/* Pass periodPL as a prop */}\n//     </div>\n//   );\n// };\n\n// export default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0);\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   const handleTimePeriodChange = (period) => {\n//     // Define the handleTimePeriodChange function\n//     setTimePeriod(period);\n//   };\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         // Check if exit price is available\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\n//           balance += profit; // Update total account balance\n//           dailyProfitLoss += profit; // Update daily profit/loss\n\n//           // Calculate profit for the selected time period\n//           const tradeCloseDate = new Date(trade.close_date);\n//           const periodStartDate = new Date();\n//           switch (timePeriod) {\n//             case \"1D\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\n//               break;\n//             case \"1W\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\n//               break;\n//             case \"1M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n//               break;\n//             case \"3M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\n//               break;\n//             case \"YTD\":\n//               periodStartDate.setMonth(0);\n//               periodStartDate.setDate(1);\n//               break;\n//             case \"1Y\":\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n//               break;\n//             default:\n//               break;\n//           }\n//           if (tradeCloseDate >= periodStartDate) {\n//             periodProfitLoss += profit;\n//           }\n//         }\n//       });\n\n//       setAccountBalance(balance); // Set total account balance\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n\n//       <div className=\"card\">\n//         <p>{`${timePeriod} P/L`}</p>\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph\n//         trades={trades}\n//         onTimePeriodChange={handleTimePeriodChange}\n//       />{\" \"}\n//       {/* Pass handleTimePeriodChange as a prop */}\n//     </div>\n//   );\n// };\n\n// export default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0);\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         // Check if exit price is available\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\n//           balance += profit; // Update total account balance\n//           dailyProfitLoss += profit; // Update daily profit/loss\n\n//           // Calculate profit for the selected time period\n//           const tradeCloseDate = new Date(trade.close_date);\n//           const periodStartDate = new Date();\n//           switch (timePeriod) {\n//             case \"1D\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\n//               break;\n//             case \"1W\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\n//               break;\n//             case \"1M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n//               break;\n//             case \"3M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\n//               break;\n//             case \"YTD\":\n//               periodStartDate.setMonth(0);\n//               periodStartDate.setDate(1);\n//               break;\n//             case \"1Y\":\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n//               break;\n//             default:\n//               break;\n//           }\n//           if (tradeCloseDate >= periodStartDate) {\n//             periodProfitLoss += profit;\n//           }\n//         }\n//       });\n\n//       setAccountBalance(balance); // Set total account balance\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>{`${timePeriod} P/L`}</p>\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph onTimePeriodChange={handleTimePeriodChange} />\n//     </div>\n//   );\n// };\n\n// export default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0);\n//   const [dailyPL, setDailyPL] = useState(0);\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n//         const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\n//         balance += profit; // Update total account balance\n//         dailyProfitLoss += profit; // Update daily profit/loss\n//       });\n\n//       setAccountBalance(balance); // Set total account balance\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>Daily P/L</p>\n//         <p className=\"cash\">{dailyPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph />\n//     </div>\n//   );\n// };\n\n// export default Account;","map":{"version":3,"names":[],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100;\r\n//           balance += profit;\r\n//           dailyProfitLoss += profit;\r\n\r\n//           const tradeCloseDate = new Date(trade.close_date);\r\n//           const periodStartDate = new Date();\r\n//           switch (timePeriod) {\r\n//             case \"1D\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n//               break;\r\n//             case \"1W\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n//               break;\r\n//             case \"1M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n//               break;\r\n//             case \"3M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\r\n//               break;\r\n//             case \"YTD\":\r\n//               periodStartDate.setMonth(0);\r\n//               periodStartDate.setDate(1);\r\n//               break;\r\n//             case \"1Y\":\r\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n//               break;\r\n//             case \"Max\":\r\n//               periodProfitLoss = trades.reduce((maxPL, trade) => {\r\n//                 const entryPrice = parseFloat(trade.entry_price);\r\n//                 const exitPrice = parseFloat(trade.exit_price);\r\n//                 const contracts = trade.contracts;\r\n//                 if (!isNaN(exitPrice)) {\r\n//                   const profit = (exitPrice - entryPrice) * contracts * 100;\r\n//                   return Math.max(maxPL, profit);\r\n//                 }\r\n//                 return maxPL;\r\n//               }, 0);\r\n//               break;\r\n//             default:\r\n//               break;\r\n//           }\r\n//           if (tradeCloseDate >= periodStartDate) {\r\n//             periodProfitLoss += profit;\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance);\r\n//       setDailyPL(dailyProfitLoss);\r\n//       setPeriodPL(periodProfitLoss);\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>{`${timePeriod}`}</p>\r\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph\r\n//         trades={trades}\r\n//         onTimePeriodChange={handleTimePeriodChange}\r\n//         periodPL={periodPL}\r\n//       />{\" \"}\r\n//       {/* Pass periodPL as a prop */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0);\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   const handleTimePeriodChange = (period) => {\r\n//     // Define the handleTimePeriodChange function\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         // Check if exit price is available\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\r\n//           balance += profit; // Update total account balance\r\n//           dailyProfitLoss += profit; // Update daily profit/loss\r\n\r\n//           // Calculate profit for the selected time period\r\n//           const tradeCloseDate = new Date(trade.close_date);\r\n//           const periodStartDate = new Date();\r\n//           switch (timePeriod) {\r\n//             case \"1D\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n//               break;\r\n//             case \"1W\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n//               break;\r\n//             case \"1M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n//               break;\r\n//             case \"3M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\r\n//               break;\r\n//             case \"YTD\":\r\n//               periodStartDate.setMonth(0);\r\n//               periodStartDate.setDate(1);\r\n//               break;\r\n//             case \"1Y\":\r\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n//               break;\r\n//             default:\r\n//               break;\r\n//           }\r\n//           if (tradeCloseDate >= periodStartDate) {\r\n//             periodProfitLoss += profit;\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance); // Set total account balance\r\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\r\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n\r\n//       <div className=\"card\">\r\n//         <p>{`${timePeriod} P/L`}</p>\r\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph\r\n//         trades={trades}\r\n//         onTimePeriodChange={handleTimePeriodChange}\r\n//       />{\" \"}\r\n//       {/* Pass handleTimePeriodChange as a prop */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0);\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         // Check if exit price is available\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\r\n//           balance += profit; // Update total account balance\r\n//           dailyProfitLoss += profit; // Update daily profit/loss\r\n\r\n//           // Calculate profit for the selected time period\r\n//           const tradeCloseDate = new Date(trade.close_date);\r\n//           const periodStartDate = new Date();\r\n//           switch (timePeriod) {\r\n//             case \"1D\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n//               break;\r\n//             case \"1W\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n//               break;\r\n//             case \"1M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n//               break;\r\n//             case \"3M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\r\n//               break;\r\n//             case \"YTD\":\r\n//               periodStartDate.setMonth(0);\r\n//               periodStartDate.setDate(1);\r\n//               break;\r\n//             case \"1Y\":\r\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n//               break;\r\n//             default:\r\n//               break;\r\n//           }\r\n//           if (tradeCloseDate >= periodStartDate) {\r\n//             periodProfitLoss += profit;\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance); // Set total account balance\r\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\r\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>{`${timePeriod} P/L`}</p>\r\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph onTimePeriodChange={handleTimePeriodChange} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0);\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n//         const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\r\n//         balance += profit; // Update total account balance\r\n//         dailyProfitLoss += profit; // Update daily profit/loss\r\n//       });\r\n\r\n//       setAccountBalance(balance); // Set total account balance\r\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>Daily P/L</p>\r\n//         <p className=\"cash\">{dailyPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
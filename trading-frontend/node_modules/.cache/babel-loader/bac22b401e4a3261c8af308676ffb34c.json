{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\ProgressInvestmentChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst ProgressInvestmentChart = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [investmentSummary, setInvestmentSummary] = useState(null);\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        if (data && data.length > 0) {\n          const sortedData = data.sort((a, b) => new Date(a.entry_date) - new Date(b.entry_date));\n          setChartData(formatChartData(sortedData));\n          setInvestmentSummary(calculateInvestmentSummary(sortedData));\n        } else {\n          setError(\"No data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching data\");\n        console.error(\"Error fetching daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  const calculateInvestmentSummary = data => {\n    var _data$, _data, _data2;\n    if (!data.length) return {\n      balance: 0,\n      percentageChange: 0,\n      latestDate: \"\",\n      pnl: 0\n    };\n    const initialBalance = parseFloat(((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.open_cash) || 0);\n    const finalBalance = parseFloat(((_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.close_cash) || 0);\n    const pnl = finalBalance - initialBalance;\n    const percentageChange = (finalBalance - initialBalance) / initialBalance * 100;\n    const latestDate = formatDate((_data2 = data[data.length - 1]) === null || _data2 === void 0 ? void 0 : _data2.entry_date);\n    return {\n      balance: finalBalance,\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n      latestDate: latestDate,\n      pnl: pnl\n    };\n  };\n  const formatChartData = data => {\n    return data.map(entry => ({\n      date: formatDate(entry.entry_date),\n      closingBalance: parseFloat(entry.close_cash || 0),\n      pnl: parseFloat(entry.close_cash || 0) - parseFloat(entry.open_cash || 0)\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-investment-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, formatCash((investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-roi\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, investmentSummary ? `${formatCash(investmentSummary.pnl || 0)} (${investmentSummary.percentageChange.toFixed(2)}%)` : \"Loading...\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"investment-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, (investmentSummary === null || investmentSummary === void 0 ? void 0 : investmentSummary.latestDate) || \"Loading...\")), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar-timeline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, chartData.map((day, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"progress-bar-day\",\n    style: {\n      height: `${day.pnl / investmentSummary.balance * 100}%`\n    },\n    title: `${day.date}: ${formatCash(day.pnl)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default ProgressInvestmentChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","formatCash","formatDate","ProgressInvestmentChart","loading","setLoading","error","setError","chartData","setChartData","investmentSummary","setInvestmentSummary","fetchDailyPNLData","data","length","sortedData","sort","a","b","Date","entry_date","formatChartData","calculateInvestmentSummary","console","_data$","_data","_data2","balance","percentageChange","latestDate","pnl","initialBalance","parseFloat","open_cash","finalBalance","close_cash","isNaN","map","entry","date","closingBalance","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","day","index","key","style","height","title"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/ProgressInvestmentChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst ProgressInvestmentChart = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [investmentSummary, setInvestmentSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        if (data && data.length > 0) {\r\n          const sortedData = data.sort(\r\n            (a, b) => new Date(a.entry_date) - new Date(b.entry_date)\r\n          );\r\n          setChartData(formatChartData(sortedData));\r\n          setInvestmentSummary(calculateInvestmentSummary(sortedData));\r\n        } else {\r\n          setError(\"No data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching data\");\r\n        console.error(\"Error fetching daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  const calculateInvestmentSummary = (data) => {\r\n    if (!data.length)\r\n      return { balance: 0, percentageChange: 0, latestDate: \"\", pnl: 0 };\r\n\r\n    const initialBalance = parseFloat(data[0]?.open_cash || 0);\r\n    const finalBalance = parseFloat(data[data.length - 1]?.close_cash || 0);\r\n    const pnl = finalBalance - initialBalance;\r\n    const percentageChange =\r\n      ((finalBalance - initialBalance) / initialBalance) * 100;\r\n    const latestDate = formatDate(data[data.length - 1]?.entry_date);\r\n\r\n    return {\r\n      balance: finalBalance,\r\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n      latestDate: latestDate,\r\n      pnl: pnl,\r\n    };\r\n  };\r\n\r\n  const formatChartData = (data) => {\r\n    return data.map((entry) => ({\r\n      date: formatDate(entry.entry_date),\r\n      closingBalance: parseFloat(entry.close_cash || 0),\r\n      pnl: parseFloat(entry.close_cash || 0) - parseFloat(entry.open_cash || 0),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"progress-investment-chart-container\">\r\n      <div className=\"summary-section\">\r\n        <p className=\"investment-cash\">\r\n          {formatCash(investmentSummary?.balance || 0)}\r\n        </p>\r\n        <p className=\"investment-roi\">\r\n          {investmentSummary\r\n            ? `${formatCash(\r\n                investmentSummary.pnl || 0\r\n              )} (${investmentSummary.percentageChange.toFixed(2)}%)`\r\n            : \"Loading...\"}\r\n        </p>\r\n        <p className=\"investment-date\">\r\n          {investmentSummary?.latestDate || \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <div className=\"progress-bar-timeline\">\r\n          {chartData.map((day, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"progress-bar-day\"\r\n              style={{\r\n                height: `${(day.pnl / investmentSummary.balance) * 100}%`,\r\n              }}\r\n              title={`${day.date}: ${formatCash(day.pnl)}`}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressInvestmentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
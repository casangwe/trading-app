{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\BiggestWinsLosses.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/biggestWinsLosses.css\";\nconst BiggestWinsLosses = ({\n  recentTrades\n}) => {\n  const [profitTrades, setProfitTrades] = useState([]);\n  useEffect(() => {\n    console.log(\"Recent trades:\", recentTrades); // Log recent trades to check data availability\n    const calculateProfit = trade => {\n      if (trade.entryPrice && trade.exitPrice) {\n        const entryPrice = parseFloat(trade.entryPrice);\n        const exitPrice = parseFloat(trade.exitPrice);\n        const profit = exitPrice - entryPrice;\n        const profitPercent = (profit / entryPrice * 100).toFixed(2);\n        return {\n          profit: profit.toFixed(2),\n          profitPercent\n        };\n      }\n      return {\n        profit: null,\n        profitPercent: null\n      };\n    };\n    if (recentTrades && recentTrades.length > 0) {\n      // Filter trades that have exit prices\n      const tradesWithExitPrices = recentTrades.filter(trade => trade.exitPrice);\n\n      // Calculate profit for trades with exit prices\n      const tradesWithProfits = tradesWithExitPrices.map(trade => ({\n        ...trade,\n        profitData: calculateProfit(trade) // Log trade to see if it has correct structure\n      }));\n\n      // Sort trades by profit (descending order)\n      const sortedTrades = tradesWithProfits.sort((a, b) => parseFloat(b.profitData.profit) - parseFloat(a.profitData.profit));\n\n      // Get the top 5 trades with the highest profits\n      const top5Trades = sortedTrades.slice(0, 5);\n      console.log(\"Top 5 trades:\", top5Trades); // Log top 5 trades to verify correctness\n      setProfitTrades(top5Trades);\n    }\n  }, [recentTrades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wins-lost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"P/L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"::\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, profitTrades.map((trade, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    className: \"card-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, trade.symbol), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, trade.profitData ? `$${trade.profitData.profit}` : \"N/A\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, trade.profitData ? `${trade.profitData.profitPercent}%` : \"N/A\")))))));\n};\nexport default BiggestWinsLosses;\n\n// import React from \"react\";\n// import \"./styles/biggestWinsLosses.css\";\n\n// const BiggestWinsLosses = ({ trades }) => {\n//   return (\n//     <div className=\"wins-lost\">\n//       <div className=\"card\">\n//         <p>P/L</p>\n//         <p className=\"menu\">::</p>\n//       </div>\n//       <div className=\"card-list\">\n//         <ul className=\"cards\"></ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default BiggestWinsLosses;","map":{"version":3,"names":["React","useEffect","useState","BiggestWinsLosses","recentTrades","profitTrades","setProfitTrades","console","log","calculateProfit","trade","entryPrice","exitPrice","parseFloat","profit","profitPercent","toFixed","length","tradesWithExitPrices","filter","tradesWithProfits","map","profitData","sortedTrades","sort","a","b","top5Trades","slice","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","index","key","symbol"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/BiggestWinsLosses.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./styles/biggestWinsLosses.css\";\r\n\r\nconst BiggestWinsLosses = ({ recentTrades }) => {\r\n  const [profitTrades, setProfitTrades] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Recent trades:\", recentTrades); // Log recent trades to check data availability\r\n    const calculateProfit = (trade) => {\r\n      if (trade.entryPrice && trade.exitPrice) {\r\n        const entryPrice = parseFloat(trade.entryPrice);\r\n        const exitPrice = parseFloat(trade.exitPrice);\r\n        const profit = exitPrice - entryPrice;\r\n        const profitPercent = ((profit / entryPrice) * 100).toFixed(2);\r\n        return { profit: profit.toFixed(2), profitPercent };\r\n      }\r\n      return { profit: null, profitPercent: null };\r\n    };\r\n    if (recentTrades && recentTrades.length > 0) {\r\n      // Filter trades that have exit prices\r\n      const tradesWithExitPrices = recentTrades.filter(\r\n        (trade) => trade.exitPrice\r\n      );\r\n\r\n      // Calculate profit for trades with exit prices\r\n      const tradesWithProfits = tradesWithExitPrices.map((trade) => ({\r\n        ...trade,\r\n        profitData: calculateProfit(trade), // Log trade to see if it has correct structure\r\n      }));\r\n\r\n      // Sort trades by profit (descending order)\r\n      const sortedTrades = tradesWithProfits.sort(\r\n        (a, b) =>\r\n          parseFloat(b.profitData.profit) - parseFloat(a.profitData.profit)\r\n      );\r\n\r\n      // Get the top 5 trades with the highest profits\r\n      const top5Trades = sortedTrades.slice(0, 5);\r\n\r\n      console.log(\"Top 5 trades:\", top5Trades); // Log top 5 trades to verify correctness\r\n      setProfitTrades(top5Trades);\r\n    }\r\n  }, [recentTrades]);\r\n\r\n  return (\r\n    <div className=\"wins-lost\">\r\n      <div className=\"card\">\r\n        <p>P/L</p>\r\n        <p className=\"menu\">::</p>\r\n      </div>\r\n      <div className=\"card-list\">\r\n        <ul className=\"cards\">\r\n          {profitTrades.map((trade, index) => (\r\n            <li key={index} className=\"card-item\">\r\n              <div className=\"card-content\">\r\n                <p>{trade.symbol}</p>\r\n                <p>\r\n                  {trade.profitData ? `$${trade.profitData.profit}` : \"N/A\"}\r\n                </p>\r\n                <p>\r\n                  {trade.profitData\r\n                    ? `${trade.profitData.profitPercent}%`\r\n                    : \"N/A\"}\r\n                </p>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiggestWinsLosses;\r\n\r\n// import React from \"react\";\r\n// import \"./styles/biggestWinsLosses.css\";\r\n\r\n// const BiggestWinsLosses = ({ trades }) => {\r\n//   return (\r\n//     <div className=\"wins-lost\">\r\n//       <div className=\"card\">\r\n//         <p>P/L</p>\r\n//         <p className=\"menu\">::</p>\r\n//       </div>\r\n//       <div className=\"card-list\">\r\n//         <ul className=\"cards\"></ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BiggestWinsLosses;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// trading-frontend/src/components/controllers/UserAPI.js\n\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Register Users\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/users/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      throw new Error(`Error registering user: ${errorDetails.detail || response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Register User Error:\", error);\n    throw error;\n  }\n};\n\n// Login Users\nexport const loginUser = async credentials => {\n  try {\n    console.log(\"Fetching login with credentials:\", credentials.toString()); // Log the formatted credentials\n\n    const response = await fetch(`${API_BASE_URL}/auth/token`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: credentials // Directly pass the URLSearchParams object\n    });\n    if (!response.ok) {\n      const errorData = await response.json(); // Expect a JSON response\n      throw new Error(errorData.detail || \"Error logging in\");\n    }\n    return await response.json(); // Return the successful response\n  } catch (error) {\n    console.error(\"Login Error:\", error);\n    throw error; // Rethrow for handling in the calling code\n  }\n};\nexport const fetchUsers = async (skip = 0, limit = 100) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`);\n    if (!response.ok) throw new Error(\"Error fetching users\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Users Error:\", error);\n    throw error;\n  }\n};\nexport const fetchUser = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`);\n    if (!response.ok) throw new Error(\"User not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch User Error:\", error);\n    throw error;\n  }\n};\nexport const updateUser = async (userId, userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error(\"Error updating user\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update User Error:\", error);\n    throw error;\n  }\n};\nexport const deleteUser = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Error deleting user\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete User Error:\", error);\n    throw error;\n  }\n};\n\n// Add more API calls for other endpoints (watchlists, summaries, rules, plans, etc.) following the same pattern\n\nexport default {\n  fetchUsers,\n  fetchUser,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"names":["API_BASE_URL","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorDetails","json","Error","detail","statusText","error","console","loginUser","credentials","log","toString","errorData","fetchUsers","skip","limit","fetchUser","userId","updateUser","deleteUser"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/ApiCalls.js"],"sourcesContent":["// trading-frontend/src/components/controllers/UserAPI.js\r\n\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Register Users\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/users/`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    if (!response.ok) {\r\n      const errorDetails = await response.json();\r\n      throw new Error(\r\n        `Error registering user: ${errorDetails.detail || response.statusText}`\r\n      );\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Register User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Login Users\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log(\"Fetching login with credentials:\", credentials.toString()); // Log the formatted credentials\r\n\r\n    const response = await fetch(`${API_BASE_URL}/auth/token`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: credentials, // Directly pass the URLSearchParams object\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json(); // Expect a JSON response\r\n      throw new Error(errorData.detail || \"Error logging in\");\r\n    }\r\n\r\n    return await response.json(); // Return the successful response\r\n  } catch (error) {\r\n    console.error(\"Login Error:\", error);\r\n    throw error; // Rethrow for handling in the calling code\r\n  }\r\n};\r\n\r\nexport const fetchUsers = async (skip = 0, limit = 100) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`\r\n    );\r\n    if (!response.ok) throw new Error(\"Error fetching users\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Users Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`);\r\n    if (!response.ok) throw new Error(\"User not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUser = async (userId, userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Error updating user\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) throw new Error(\"Error deleting user\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add more API calls for other endpoints (watchlists, summaries, rules, plans, etc.) following the same pattern\r\n\r\nexport default {\r\n  fetchUsers,\r\n  fetchUser,\r\n  updateUser,\r\n  deleteUser,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
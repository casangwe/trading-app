{"ast":null,"code":"// Details.js\n\nexport const calculateTradeMetrics = trades => {\n  let totalProfitLoss = 0;\n  let winCount = 0;\n  let lossCount = 0;\n  let biggestWin = null;\n  let biggestLoss = null;\n  let totalReturn = 0;\n  let totalTradeSize = 0;\n  let totalHoldingPeriod = 0;\n  trades.forEach(trade => {\n    const profitLoss = trade.profitLoss;\n    totalProfitLoss += profitLoss;\n    totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\n    totalTradeSize += trade.contracts;\n    const holdingPeriod = new Date(trade.closeDate) - new Date(trade.entryDate);\n    totalHoldingPeriod += holdingPeriod;\n    if (profitLoss > 0) {\n      winCount++;\n      if (!biggestWin || profitLoss > biggestWin) {\n        biggestWin = profitLoss;\n      }\n    } else {\n      lossCount++;\n      if (!biggestLoss || profitLoss < biggestLoss) {\n        biggestLoss = profitLoss;\n      }\n    }\n  });\n  const averageReturn = (totalReturn / trades.length).toFixed(2);\n  const winLossRatio = (winCount / (lossCount || 1)).toFixed(2);\n  const profitFactor = (totalProfitLoss / (lossCount || 1)).toFixed(2);\n  const averageTradeSize = (totalTradeSize / trades.length).toFixed(2);\n  const averageHoldingPeriod = (totalHoldingPeriod / trades.length / (1000 * 60 * 60 * 24)).toFixed(2); // in days\n\n  return {\n    totalProfitLoss,\n    winLossRatio,\n    averageReturn,\n    biggestWin,\n    biggestLoss,\n    averageTradeSize,\n    averageHoldingPeriod,\n    numberOfTrades: trades.length,\n    profitFactor\n  };\n};","map":{"version":3,"names":["calculateTradeMetrics","trades","totalProfitLoss","winCount","lossCount","biggestWin","biggestLoss","totalReturn","totalTradeSize","totalHoldingPeriod","forEach","trade","profitLoss","exitPrice","entryPrice","contracts","holdingPeriod","Date","closeDate","entryDate","averageReturn","length","toFixed","winLossRatio","profitFactor","averageTradeSize","averageHoldingPeriod","numberOfTrades"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Details.js"],"sourcesContent":["// Details.js\r\n\r\nexport const calculateTradeMetrics = (trades) => {\r\n  let totalProfitLoss = 0;\r\n  let winCount = 0;\r\n  let lossCount = 0;\r\n  let biggestWin = null;\r\n  let biggestLoss = null;\r\n  let totalReturn = 0;\r\n  let totalTradeSize = 0;\r\n  let totalHoldingPeriod = 0;\r\n\r\n  trades.forEach((trade) => {\r\n    const profitLoss = trade.profitLoss;\r\n    totalProfitLoss += profitLoss;\r\n    totalReturn += (trade.exitPrice - trade.entryPrice) * trade.contracts;\r\n    totalTradeSize += trade.contracts;\r\n    const holdingPeriod = new Date(trade.closeDate) - new Date(trade.entryDate);\r\n    totalHoldingPeriod += holdingPeriod;\r\n\r\n    if (profitLoss > 0) {\r\n      winCount++;\r\n      if (!biggestWin || profitLoss > biggestWin) {\r\n        biggestWin = profitLoss;\r\n      }\r\n    } else {\r\n      lossCount++;\r\n      if (!biggestLoss || profitLoss < biggestLoss) {\r\n        biggestLoss = profitLoss;\r\n      }\r\n    }\r\n  });\r\n\r\n  const averageReturn = (totalReturn / trades.length).toFixed(2);\r\n  const winLossRatio = (winCount / (lossCount || 1)).toFixed(2);\r\n  const profitFactor = (totalProfitLoss / (lossCount || 1)).toFixed(2);\r\n  const averageTradeSize = (totalTradeSize / trades.length).toFixed(2);\r\n  const averageHoldingPeriod = (\r\n    totalHoldingPeriod /\r\n    trades.length /\r\n    (1000 * 60 * 60 * 24)\r\n  ).toFixed(2); // in days\r\n\r\n  return {\r\n    totalProfitLoss,\r\n    winLossRatio,\r\n    averageReturn,\r\n    biggestWin,\r\n    biggestLoss,\r\n    averageTradeSize,\r\n    averageHoldingPeriod,\r\n    numberOfTrades: trades.length,\r\n    profitFactor,\r\n  };\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,qBAAqB,GAAIC,MAAM,IAAK;EAC/C,IAAIC,eAAe,GAAG,CAAC;EACvB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,UAAU,GAAG,IAAI;EACrB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,kBAAkB,GAAG,CAAC;EAE1BR,MAAM,CAACS,OAAO,CAAEC,KAAK,IAAK;IACxB,MAAMC,UAAU,GAAGD,KAAK,CAACC,UAAU;IACnCV,eAAe,IAAIU,UAAU;IAC7BL,WAAW,IAAI,CAACI,KAAK,CAACE,SAAS,GAAGF,KAAK,CAACG,UAAU,IAAIH,KAAK,CAACI,SAAS;IACrEP,cAAc,IAAIG,KAAK,CAACI,SAAS;IACjC,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAACN,KAAK,CAACO,SAAS,CAAC,GAAG,IAAID,IAAI,CAACN,KAAK,CAACQ,SAAS,CAAC;IAC3EV,kBAAkB,IAAIO,aAAa;IAEnC,IAAIJ,UAAU,GAAG,CAAC,EAAE;MAClBT,QAAQ,EAAE;MACV,IAAI,CAACE,UAAU,IAAIO,UAAU,GAAGP,UAAU,EAAE;QAC1CA,UAAU,GAAGO,UAAU;MACzB;IACF,CAAC,MAAM;MACLR,SAAS,EAAE;MACX,IAAI,CAACE,WAAW,IAAIM,UAAU,GAAGN,WAAW,EAAE;QAC5CA,WAAW,GAAGM,UAAU;MAC1B;IACF;EACF,CAAC,CAAC;EAEF,MAAMQ,aAAa,GAAG,CAACb,WAAW,GAAGN,MAAM,CAACoB,MAAM,EAAEC,OAAO,CAAC,CAAC,CAAC;EAC9D,MAAMC,YAAY,GAAG,CAACpB,QAAQ,IAAIC,SAAS,IAAI,CAAC,CAAC,EAAEkB,OAAO,CAAC,CAAC,CAAC;EAC7D,MAAME,YAAY,GAAG,CAACtB,eAAe,IAAIE,SAAS,IAAI,CAAC,CAAC,EAAEkB,OAAO,CAAC,CAAC,CAAC;EACpE,MAAMG,gBAAgB,GAAG,CAACjB,cAAc,GAAGP,MAAM,CAACoB,MAAM,EAAEC,OAAO,CAAC,CAAC,CAAC;EACpE,MAAMI,oBAAoB,GAAG,CAC3BjB,kBAAkB,GAClBR,MAAM,CAACoB,MAAM,IACZ,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EACrBC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEd,OAAO;IACLpB,eAAe;IACfqB,YAAY;IACZH,aAAa;IACbf,UAAU;IACVC,WAAW;IACXmB,gBAAgB;IAChBC,oBAAoB;IACpBC,cAAc,EAAE1B,MAAM,CAACoB,MAAM;IAC7BG;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
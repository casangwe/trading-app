{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\trades\\\\EQTcurve.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { getCash } from \"../api/CashApi\";\nimport { AreaChart, Area, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport { formatCash } from \"../func/functions\";\nconst EQTCurve = () => {\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [equitySummary, setEquitySummary] = useState(null);\n  useEffect(() => {\n    const fetchChartData = async () => {\n      try {\n        const cashData = await getCash();\n        const trades = await fetchTrades();\n        if (cashData && trades.length > 0) {\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\n          const sortedTrades = trades.sort((a, b) => new Date(a.close_date) - new Date(b.close_date));\n          const formattedData = formatChartData(sortedTrades, startingEquity);\n          setChartData(formattedData);\n          setEquitySummary(calculateEquitySummary(formattedData));\n        } else {\n          setError(\"No trade or cash data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching trade or cash data\");\n        console.error(\"Error:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchChartData();\n  }, []);\n  const formatChartData = (trades, startingEquity) => {\n    let cumulativeEquity = startingEquity;\n    const idealIncrement = (startingEquity * 3 - startingEquity) / trades.length;\n    return trades.map((trade, index) => {\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\n      return {\n        tradeCount: index + 1,\n        equity: cumulativeEquity,\n        idealEquity: idealEquity,\n        above: cumulativeEquity > idealEquity ? cumulativeEquity : idealEquity,\n        below: cumulativeEquity < idealEquity ? cumulativeEquity : idealEquity\n      };\n    });\n  };\n  const calculateEquitySummary = data => {\n    if (!data.length) return {\n      balance: 0,\n      percentageChange: 0,\n      latestDate: \"All Time\",\n      pnl: 0\n    };\n    const initialBalance = data[0].equity;\n    const finalBalance = data[data.length - 1].equity;\n    const pnl = finalBalance - initialBalance;\n    const percentageChange = (finalBalance - initialBalance) / initialBalance * 100;\n    return {\n      balance: finalBalance,\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\n      latestDate: \"All Time\",\n      pnl: pnl\n    };\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"equity-curve-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, formatCash((equitySummary === null || equitySummary === void 0 ? void 0 : equitySummary.balance) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-roi\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, equitySummary ? `${formatCash(equitySummary.pnl || 0)} (${equitySummary.percentageChange.toFixed(2)}%)` : \"Loading...\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, equitySummary === null || equitySummary === void 0 ? void 0 : equitySummary.latestDate)), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"tradeCount\",\n    label: {\n      value: \"Trades\",\n      position: \"insideBottom\",\n      offset: -10\n    },\n    tickLine: false,\n    axisLine: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    domain: [100000, 300000],\n    tickFormatter: value => formatCash(value),\n    label: {\n      value: \"$$$\",\n      angle: -90,\n      position: \"insideLeft\",\n      offset: -5\n    },\n    tickLine: false,\n    axisLine: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: false,\n    content: ({\n      payload\n    }) => {\n      if (payload && payload.length) {\n        const {\n          tradeCount,\n          equity\n        } = payload[0].payload;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tooltip-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 23\n          }\n        }, formatCash(equity)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"trade-count\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 23\n          }\n        }, \"Trade #\", tradeCount));\n      }\n      return null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    verticalAlign: \"top\",\n    align: \"left\",\n    payload: [{\n      value: \"Equity Curve\",\n      type: \"line\",\n      color: \"purple\"\n    }, {\n      value: \"Ideal Line\",\n      type: \"line\",\n      color: \"green\"\n    }, {\n      value: \"Above\",\n      type: \"rect\",\n      color: \"pink\"\n    }, {\n      value: \"Below\",\n      type: \"rect\",\n      color: \"lightblue\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"idealEquity\",\n    stroke: \"green\",\n    strokeWidth: 2,\n    dot: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"equity\",\n    stroke: \"purple\",\n    strokeWidth: 2,\n    dot: {\n      r: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"above\",\n    stroke: \"none\",\n    fill: \"pink\",\n    fillOpacity: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"below\",\n    stroke: \"none\",\n    fill: \"lightblue\",\n    fillOpacity: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default EQTCurve;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","getCash","AreaChart","Area","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","Legend","formatCash","EQTCurve","chartData","setChartData","loading","setLoading","error","setError","equitySummary","setEquitySummary","fetchChartData","cashData","trades","length","startingEquity","parseFloat","initial_cash","sortedTrades","sort","a","b","Date","close_date","formattedData","formatChartData","calculateEquitySummary","console","cumulativeEquity","idealIncrement","map","trade","index","profit_loss","idealEquity","tradeCount","equity","above","below","data","balance","percentageChange","latestDate","pnl","initialBalance","finalBalance","isNaN","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","width","height","dataKey","label","value","position","offset","tickLine","axisLine","domain","tickFormatter","angle","cursor","content","payload","verticalAlign","align","type","color","stroke","strokeWidth","dot","r","fill","fillOpacity"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/trades/EQTcurve.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport { getCash } from \"../api/CashApi\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { formatCash } from \"../func/functions\";\r\n\r\nconst EQTCurve = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [equitySummary, setEquitySummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchChartData = async () => {\r\n      try {\r\n        const cashData = await getCash();\r\n        const trades = await fetchTrades();\r\n\r\n        if (cashData && trades.length > 0) {\r\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n          const sortedTrades = trades.sort(\r\n            (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n          );\r\n          const formattedData = formatChartData(sortedTrades, startingEquity);\r\n          setChartData(formattedData);\r\n          setEquitySummary(calculateEquitySummary(formattedData));\r\n        } else {\r\n          setError(\"No trade or cash data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching trade or cash data\");\r\n        console.error(\"Error:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchChartData();\r\n  }, []);\r\n\r\n  const formatChartData = (trades, startingEquity) => {\r\n    let cumulativeEquity = startingEquity;\r\n    const idealIncrement =\r\n      (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n    return trades.map((trade, index) => {\r\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n      return {\r\n        tradeCount: index + 1,\r\n        equity: cumulativeEquity,\r\n        idealEquity: idealEquity,\r\n        above: cumulativeEquity > idealEquity ? cumulativeEquity : idealEquity,\r\n        below: cumulativeEquity < idealEquity ? cumulativeEquity : idealEquity,\r\n      };\r\n    });\r\n  };\r\n\r\n  const calculateEquitySummary = (data) => {\r\n    if (!data.length)\r\n      return {\r\n        balance: 0,\r\n        percentageChange: 0,\r\n        latestDate: \"All Time\",\r\n        pnl: 0,\r\n      };\r\n\r\n    const initialBalance = data[0].equity;\r\n    const finalBalance = data[data.length - 1].equity;\r\n    const pnl = finalBalance - initialBalance;\r\n    const percentageChange =\r\n      ((finalBalance - initialBalance) / initialBalance) * 100;\r\n\r\n    return {\r\n      balance: finalBalance,\r\n      percentageChange: isNaN(percentageChange) ? 0 : percentageChange,\r\n      latestDate: \"All Time\",\r\n      pnl: pnl,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"equity-curve-chart-container\">\r\n      <div className=\"summary-section\">\r\n        <p className=\"equity-cash\">{formatCash(equitySummary?.balance || 0)}</p>\r\n        <p className=\"equity-roi\">\r\n          {equitySummary\r\n            ? `${formatCash(\r\n                equitySummary.pnl || 0\r\n              )} (${equitySummary.percentageChange.toFixed(2)}%)`\r\n            : \"Loading...\"}\r\n        </p>\r\n        <p className=\"equity-date\">{equitySummary?.latestDate}</p>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <AreaChart data={chartData}>\r\n            <XAxis\r\n              dataKey=\"tradeCount\"\r\n              label={{ value: \"Trades\", position: \"insideBottom\", offset: -10 }}\r\n              tickLine={false}\r\n              axisLine={false}\r\n            />\r\n            <YAxis\r\n              domain={[100000, 300000]}\r\n              tickFormatter={(value) => formatCash(value)}\r\n              label={{\r\n                value: \"$$$\",\r\n                angle: -90,\r\n                position: \"insideLeft\",\r\n                offset: -5,\r\n              }}\r\n              tickLine={false}\r\n              axisLine={false}\r\n            />\r\n            <Tooltip\r\n              cursor={false}\r\n              content={({ payload }) => {\r\n                if (payload && payload.length) {\r\n                  const { tradeCount, equity } = payload[0].payload;\r\n                  return (\r\n                    <div className=\"tooltip-content\">\r\n                      <p>{formatCash(equity)}</p>\r\n                      <p className=\"trade-count\">Trade #{tradeCount}</p>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n            <Legend\r\n              verticalAlign=\"top\"\r\n              align=\"left\"\r\n              payload={[\r\n                { value: \"Equity Curve\", type: \"line\", color: \"purple\" },\r\n                { value: \"Ideal Line\", type: \"line\", color: \"green\" },\r\n                { value: \"Above\", type: \"rect\", color: \"pink\" },\r\n                { value: \"Below\", type: \"rect\", color: \"lightblue\" },\r\n              ]}\r\n            />\r\n\r\n            {/* Ideal Line */}\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"idealEquity\"\r\n              stroke=\"green\"\r\n              strokeWidth={2}\r\n              dot={false}\r\n            />\r\n\r\n            {/* Equity Curve Line */}\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"equity\"\r\n              stroke=\"purple\"\r\n              strokeWidth={2}\r\n              dot={{ r: 3 }}\r\n            />\r\n\r\n            {/* Area Above Ideal Line */}\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"above\"\r\n              stroke=\"none\"\r\n              fill=\"pink\"\r\n              fillOpacity={0.5}\r\n            />\r\n\r\n            {/* Area Below Ideal Line */}\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"below\"\r\n              stroke=\"none\"\r\n              fill=\"lightblue\"\r\n              fillOpacity={0.5}\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EQTCurve;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SACEC,SAAS,EACTC,IAAI,EACJC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,mBAAmB,EACnBC,MAAM,QACD,UAAU;AACjB,SAASC,UAAU,QAAQ,mBAAmB;AAE9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,MAAMqB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMpB,OAAO,CAAC,CAAC;QAChC,MAAMqB,MAAM,GAAG,MAAMtB,WAAW,CAAC,CAAC;QAElC,IAAIqB,QAAQ,IAAIC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UACjC,MAAMC,cAAc,GAAGC,UAAU,CAACJ,QAAQ,CAACK,YAAY,IAAI,CAAC,CAAC;UAC7D,MAAMC,YAAY,GAAGL,MAAM,CAACM,IAAI,CAC9B,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,UAAU,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,UAAU,CAC1D,CAAC;UACD,MAAMC,aAAa,GAAGC,eAAe,CAACP,YAAY,EAAEH,cAAc,CAAC;UACnEX,YAAY,CAACoB,aAAa,CAAC;UAC3Bd,gBAAgB,CAACgB,sBAAsB,CAACF,aAAa,CAAC,CAAC;QACzD,CAAC,MAAM;UACLhB,QAAQ,CAAC,iCAAiC,CAAC;QAC7C;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,mCAAmC,CAAC;QAC7CmB,OAAO,CAACpB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC,CAAC,SAAS;QACRD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,eAAe,GAAGA,CAACZ,MAAM,EAAEE,cAAc,KAAK;IAClD,IAAIa,gBAAgB,GAAGb,cAAc;IACrC,MAAMc,cAAc,GAClB,CAACd,cAAc,GAAG,CAAC,GAAGA,cAAc,IAAIF,MAAM,CAACC,MAAM;IAEvD,OAAOD,MAAM,CAACiB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAClCJ,gBAAgB,IAAIZ,UAAU,CAACe,KAAK,CAACE,WAAW,IAAI,CAAC,CAAC,GAAG,GAAG;MAC5D,MAAMC,WAAW,GAAGnB,cAAc,GAAGc,cAAc,IAAIG,KAAK,GAAG,CAAC,CAAC;MAEjE,OAAO;QACLG,UAAU,EAAEH,KAAK,GAAG,CAAC;QACrBI,MAAM,EAAER,gBAAgB;QACxBM,WAAW,EAAEA,WAAW;QACxBG,KAAK,EAAET,gBAAgB,GAAGM,WAAW,GAAGN,gBAAgB,GAAGM,WAAW;QACtEI,KAAK,EAAEV,gBAAgB,GAAGM,WAAW,GAAGN,gBAAgB,GAAGM;MAC7D,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMR,sBAAsB,GAAIa,IAAI,IAAK;IACvC,IAAI,CAACA,IAAI,CAACzB,MAAM,EACd,OAAO;MACL0B,OAAO,EAAE,CAAC;MACVC,gBAAgB,EAAE,CAAC;MACnBC,UAAU,EAAE,UAAU;MACtBC,GAAG,EAAE;IACP,CAAC;IAEH,MAAMC,cAAc,GAAGL,IAAI,CAAC,CAAC,CAAC,CAACH,MAAM;IACrC,MAAMS,YAAY,GAAGN,IAAI,CAACA,IAAI,CAACzB,MAAM,GAAG,CAAC,CAAC,CAACsB,MAAM;IACjD,MAAMO,GAAG,GAAGE,YAAY,GAAGD,cAAc;IACzC,MAAMH,gBAAgB,GACnB,CAACI,YAAY,GAAGD,cAAc,IAAIA,cAAc,GAAI,GAAG;IAE1D,OAAO;MACLJ,OAAO,EAAEK,YAAY;MACrBJ,gBAAgB,EAAEK,KAAK,CAACL,gBAAgB,CAAC,GAAG,CAAC,GAAGA,gBAAgB;MAChEC,UAAU,EAAE,UAAU;MACtBC,GAAG,EAAEA;IACP,CAAC;EACH,CAAC;EAED,oBACEvD,KAAA,CAAA2D,aAAA;IAAKC,SAAS,EAAC,8BAA8B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3ClE,KAAA,CAAA2D,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BlE,KAAA,CAAA2D,aAAA;IAAGC,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAErD,UAAU,CAAC,CAAAQ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE+B,OAAO,KAAI,CAAC,CAAK,CAAC,eACxEpD,KAAA,CAAA2D,aAAA;IAAGC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACtB7C,aAAa,GACT,GAAER,UAAU,CACXQ,aAAa,CAACkC,GAAG,IAAI,CACvB,CAAE,KAAIlC,aAAa,CAACgC,gBAAgB,CAACc,OAAO,CAAC,CAAC,CAAE,IAAG,GACnD,YACH,CAAC,eACJnE,KAAA,CAAA2D,aAAA;IAAGC,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAE7C,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEiC,UAAc,CACtD,CAAC,EAELrC,OAAO,gBACNjB,KAAA,CAAA2D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,YAAe,CAAC,GACnB/C,KAAK,gBACPnB,KAAA,CAAA2D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM/C,KAAW,CAAC,gBAElBnB,KAAA,CAAA2D,aAAA,CAAChD,mBAAmB;IAACyD,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5ClE,KAAA,CAAA2D,aAAA,CAACtD,SAAS;IAAC8C,IAAI,EAAEpC,SAAU;IAAA8C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACzBlE,KAAA,CAAA2D,aAAA,CAACnD,KAAK;IACJ8D,OAAO,EAAC,YAAY;IACpBC,KAAK,EAAE;MAAEC,KAAK,EAAE,QAAQ;MAAEC,QAAQ,EAAE,cAAc;MAAEC,MAAM,EAAE,CAAC;IAAG,CAAE;IAClEC,QAAQ,EAAE,KAAM;IAChBC,QAAQ,EAAE,KAAM;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eACFlE,KAAA,CAAA2D,aAAA,CAAClD,KAAK;IACJoE,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAE;IACzBC,aAAa,EAAGN,KAAK,IAAK3D,UAAU,CAAC2D,KAAK,CAAE;IAC5CD,KAAK,EAAE;MACLC,KAAK,EAAE,KAAK;MACZO,KAAK,EAAE,CAAC,EAAE;MACVN,QAAQ,EAAE,YAAY;MACtBC,MAAM,EAAE,CAAC;IACX,CAAE;IACFC,QAAQ,EAAE,KAAM;IAChBC,QAAQ,EAAE,KAAM;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjB,CAAC,eACFlE,KAAA,CAAA2D,aAAA,CAACjD,OAAO;IACNsE,MAAM,EAAE,KAAM;IACdC,OAAO,EAAEA,CAAC;MAAEC;IAAQ,CAAC,KAAK;MACxB,IAAIA,OAAO,IAAIA,OAAO,CAACxD,MAAM,EAAE;QAC7B,MAAM;UAAEqB,UAAU;UAAEC;QAAO,CAAC,GAAGkC,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO;QACjD,oBACElF,KAAA,CAAA2D,aAAA;UAAKC,SAAS,EAAC,iBAAiB;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBAC9BlE,KAAA,CAAA2D,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAIrD,UAAU,CAACmC,MAAM,CAAK,CAAC,eAC3BhD,KAAA,CAAA2D,aAAA;UAAGC,SAAS,EAAC,aAAa;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAC,SAAO,EAACnB,UAAc,CAC9C,CAAC;MAEV;MACA,OAAO,IAAI;IACb,CAAE;IAAAc,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CAAC,eACFlE,KAAA,CAAA2D,aAAA,CAAC/C,MAAM;IACLuE,aAAa,EAAC,KAAK;IACnBC,KAAK,EAAC,MAAM;IACZF,OAAO,EAAE,CACP;MAAEV,KAAK,EAAE,cAAc;MAAEa,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAS,CAAC,EACxD;MAAEd,KAAK,EAAE,YAAY;MAAEa,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC,EACrD;MAAEd,KAAK,EAAE,OAAO;MAAEa,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/C;MAAEd,KAAK,EAAE,OAAO;MAAEa,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAY,CAAC,CACpD;IAAAzB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CAAC,eAGFlE,KAAA,CAAA2D,aAAA,CAACpD,IAAI;IACH8E,IAAI,EAAC,UAAU;IACff,OAAO,EAAC,aAAa;IACrBiB,MAAM,EAAC,OAAO;IACdC,WAAW,EAAE,CAAE;IACfC,GAAG,EAAE,KAAM;IAAA5B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACZ,CAAC,eAGFlE,KAAA,CAAA2D,aAAA,CAACpD,IAAI;IACH8E,IAAI,EAAC,UAAU;IACff,OAAO,EAAC,QAAQ;IAChBiB,MAAM,EAAC,QAAQ;IACfC,WAAW,EAAE,CAAE;IACfC,GAAG,EAAE;MAAEC,CAAC,EAAE;IAAE,CAAE;IAAA7B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACf,CAAC,eAGFlE,KAAA,CAAA2D,aAAA,CAACrD,IAAI;IACH+E,IAAI,EAAC,UAAU;IACff,OAAO,EAAC,OAAO;IACfiB,MAAM,EAAC,MAAM;IACbI,IAAI,EAAC,MAAM;IACXC,WAAW,EAAE,GAAI;IAAA/B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClB,CAAC,eAGFlE,KAAA,CAAA2D,aAAA,CAACrD,IAAI;IACH+E,IAAI,EAAC,UAAU;IACff,OAAO,EAAC,OAAO;IACfiB,MAAM,EAAC,MAAM;IACbI,IAAI,EAAC,WAAW;IAChBC,WAAW,EAAE,GAAI;IAAA/B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClB,CACQ,CACQ,CAEpB,CAAC;AAEV,CAAC;AAED,eAAepD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}
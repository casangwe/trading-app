{"ast":null,"code":"// Calculate Total ROI\nexport const calculateTotalROI = trades => {\n  // Assuming trades is an array of trade objects with a 'roi' property\n  if (trades.length === 0) return 0;\n  const totalReturn = trades.reduce((acc, trade) => acc + trade.roi, 0);\n  return totalReturn;\n};\n\n// Calculate Sharpe Ratio\nexport const calculateSharpeRatio = dailyPnls => {\n  if (dailyPnls.length === 0) return 0;\n  const averageReturn = dailyPnls.reduce((acc, pnl) => acc + pnl, 0) / dailyPnls.length;\n  const stdDeviation = Math.sqrt(dailyPnls.reduce((acc, pnl) => acc + Math.pow(pnl - averageReturn, 2), 0) / dailyPnls.length);\n  return stdDeviation === 0 ? 0 : averageReturn / stdDeviation;\n};\n\n// Calculate Number of Trades\nexport const calculateNumberOfTrades = trades => {\n  return trades.length;\n};\n\n// Additional Metric: Total Net P/L\nexport const calculateTotalNetPL = dailyPnls => {\n  return dailyPnls.reduce((acc, pnl) => acc + pnl, 0);\n};\n\n// Additional Metric: Cash Balance Calculation (if needed outside of performAnalysis)\nexport const calculateCashBalance = (initialCash, netPL) => {\n  return initialCash + netPL;\n};\n\n// Add more calculation functions as needed","map":{"version":3,"names":["calculateTotalROI","trades","length","totalReturn","reduce","acc","trade","roi","calculateSharpeRatio","dailyPnls","averageReturn","pnl","stdDeviation","Math","sqrt","pow","calculateNumberOfTrades","calculateTotalNetPL","calculateCashBalance","initialCash","netPL"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/analysis/AnalysisCalc.js"],"sourcesContent":["// Calculate Total ROI\r\nexport const calculateTotalROI = (trades) => {\r\n  // Assuming trades is an array of trade objects with a 'roi' property\r\n  if (trades.length === 0) return 0;\r\n  const totalReturn = trades.reduce((acc, trade) => acc + trade.roi, 0);\r\n  return totalReturn;\r\n};\r\n\r\n// Calculate Sharpe Ratio\r\nexport const calculateSharpeRatio = (dailyPnls) => {\r\n  if (dailyPnls.length === 0) return 0;\r\n  const averageReturn =\r\n    dailyPnls.reduce((acc, pnl) => acc + pnl, 0) / dailyPnls.length;\r\n  const stdDeviation = Math.sqrt(\r\n    dailyPnls.reduce((acc, pnl) => acc + Math.pow(pnl - averageReturn, 2), 0) /\r\n      dailyPnls.length\r\n  );\r\n  return stdDeviation === 0 ? 0 : averageReturn / stdDeviation;\r\n};\r\n\r\n// Calculate Number of Trades\r\nexport const calculateNumberOfTrades = (trades) => {\r\n  return trades.length;\r\n};\r\n\r\n// Additional Metric: Total Net P/L\r\nexport const calculateTotalNetPL = (dailyPnls) => {\r\n  return dailyPnls.reduce((acc, pnl) => acc + pnl, 0);\r\n};\r\n\r\n// Additional Metric: Cash Balance Calculation (if needed outside of performAnalysis)\r\nexport const calculateCashBalance = (initialCash, netPL) => {\r\n  return initialCash + netPL;\r\n};\r\n\r\n// Add more calculation functions as needed\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,iBAAiB,GAAIC,MAAM,IAAK;EAC3C;EACA,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EACjC,MAAMC,WAAW,GAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,GAAGC,KAAK,CAACC,GAAG,EAAE,CAAC,CAAC;EACrE,OAAOJ,WAAW;AACpB,CAAC;;AAED;AACA,OAAO,MAAMK,oBAAoB,GAAIC,SAAS,IAAK;EACjD,IAAIA,SAAS,CAACP,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EACpC,MAAMQ,aAAa,GACjBD,SAAS,CAACL,MAAM,CAAC,CAACC,GAAG,EAAEM,GAAG,KAAKN,GAAG,GAAGM,GAAG,EAAE,CAAC,CAAC,GAAGF,SAAS,CAACP,MAAM;EACjE,MAAMU,YAAY,GAAGC,IAAI,CAACC,IAAI,CAC5BL,SAAS,CAACL,MAAM,CAAC,CAACC,GAAG,EAAEM,GAAG,KAAKN,GAAG,GAAGQ,IAAI,CAACE,GAAG,CAACJ,GAAG,GAAGD,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GACvED,SAAS,CAACP,MACd,CAAC;EACD,OAAOU,YAAY,KAAK,CAAC,GAAG,CAAC,GAAGF,aAAa,GAAGE,YAAY;AAC9D,CAAC;;AAED;AACA,OAAO,MAAMI,uBAAuB,GAAIf,MAAM,IAAK;EACjD,OAAOA,MAAM,CAACC,MAAM;AACtB,CAAC;;AAED;AACA,OAAO,MAAMe,mBAAmB,GAAIR,SAAS,IAAK;EAChD,OAAOA,SAAS,CAACL,MAAM,CAAC,CAACC,GAAG,EAAEM,GAAG,KAAKN,GAAG,GAAGM,GAAG,EAAE,CAAC,CAAC;AACrD,CAAC;;AAED;AACA,OAAO,MAAMO,oBAAoB,GAAGA,CAACC,WAAW,EAAEC,KAAK,KAAK;EAC1D,OAAOD,WAAW,GAAGC,KAAK;AAC5B,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module"}
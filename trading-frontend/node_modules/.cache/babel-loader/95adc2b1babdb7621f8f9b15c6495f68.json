{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\pnl\\\\ProfitChart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from \"recharts\";\nconst ProfitChart = () => {\n  const [chartData, setChartData] = useState([]);\n  const [dailyPNLData, setDailyPNLData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  //   const [view, setView] = useState(\"daily\");\n\n  useEffect(() => {\n    const fetchDailyPNLData = async () => {\n      try {\n        const data = await fetchDailyPnls();\n        setDailyPNLData(data);\n      } catch (error) {\n        setError(\"No Daily PNL data\");\n        console.error(\"No Daily PNL data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDailyPNLData();\n  }, []);\n  const prepareChartData = pnlData => {\n    // Sort PnL data by date\n    pnlData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Calculate cumulative balance\n    let cumulativeBalance = 0;\n    return pnlData.map(pnl => {\n      cumulativeBalance += pnl.balance;\n      return {\n        date: new Date(pnl.date).toLocaleDateString(),\n        balance: cumulativeBalance\n      };\n    });\n  };\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, \"Error loading chart data\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profit-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Profit Progress\"), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => typeof value === \"number\" ? `$${value.toFixed(2)}` : value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"balance\",\n    stroke: \"#4a90e2\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default ProfitChart;","map":{"version":3,"names":["React","useState","useEffect","fetchDailyPnls","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","ProfitChart","chartData","setChartData","dailyPNLData","setDailyPNLData","loading","setLoading","error","setError","fetchDailyPNLData","data","console","prepareChartData","pnlData","sort","a","b","Date","date","cumulativeBalance","map","pnl","balance","toLocaleDateString","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","strokeDasharray","dataKey","formatter","value","toFixed","type","stroke","strokeWidth"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/pnl/ProfitChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyPnls } from \"../api/DailyPNLApi\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst ProfitChart = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [dailyPNLData, setDailyPNLData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  //   const [view, setView] = useState(\"daily\");\r\n\r\n  useEffect(() => {\r\n    const fetchDailyPNLData = async () => {\r\n      try {\r\n        const data = await fetchDailyPnls();\r\n        setDailyPNLData(data);\r\n      } catch (error) {\r\n        setError(\"No Daily PNL data\");\r\n        console.error(\"No Daily PNL data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDailyPNLData();\r\n  }, []);\r\n\r\n  const prepareChartData = (pnlData) => {\r\n    // Sort PnL data by date\r\n    pnlData.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    // Calculate cumulative balance\r\n    let cumulativeBalance = 0;\r\n    return pnlData.map((pnl) => {\r\n      cumulativeBalance += pnl.balance;\r\n      return {\r\n        date: new Date(pnl.date).toLocaleDateString(),\r\n        balance: cumulativeBalance,\r\n      };\r\n    });\r\n  };\r\n\r\n  if (error) return <div>Error loading chart data</div>;\r\n\r\n  return (\r\n    <div className=\"profit-chart-container\">\r\n      <h3>Profit Progress</h3>\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis />\r\n          <Tooltip\r\n            formatter={(value) =>\r\n              typeof value === \"number\" ? `$${value.toFixed(2)}` : value\r\n            }\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"balance\"\r\n            stroke=\"#4a90e2\"\r\n            strokeWidth={2}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfitChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
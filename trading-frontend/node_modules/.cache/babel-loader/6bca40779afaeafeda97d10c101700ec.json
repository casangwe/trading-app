{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000\";\nconst token = localStorage.getItem(\"token\");\nconst userId = localStorage.getItem(\"sub\");\nexport async function createCash(cashAmount) {\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user_id: userId,\n      initial_cash: cashAmount.initial_cash,\n      entry_date: cashAmount.entry_date\n    })\n  });\n  const data = await response.json();\n  if (response.ok) {\n    console.log(\"Cash added successfully:\", data);\n    return data; // Return the created cash entry\n  } else {\n    console.error(\"Error adding cash:\", data);\n    throw new Error(data);\n  }\n}\n\n// Fetch cash entries\nexport const getCash = async () => {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Error fetching cash data\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE_URL","token","localStorage","getItem","userId","createCash","cashAmount","response","fetch","method","headers","Authorization","body","JSON","stringify","user_id","initial_cash","entry_date","data","json","ok","console","log","error","Error","getCash"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/CashApi.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000\";\r\n\r\nconst token = localStorage.getItem(\"token\");\r\nconst userId = localStorage.getItem(\"sub\");\r\n\r\nexport async function createCash(cashAmount) {\r\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      user_id: userId,\r\n      initial_cash: cashAmount.initial_cash,\r\n      entry_date: cashAmount.entry_date,\r\n    }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  if (response.ok) {\r\n    console.log(\"Cash added successfully:\", data);\r\n    return data; // Return the created cash entry\r\n  } else {\r\n    console.error(\"Error adding cash:\", data);\r\n    throw new Error(data);\r\n  }\r\n}\r\n\r\n// Fetch cash entries\r\nexport const getCash = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Error fetching cash data\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAC3C,MAAMC,MAAM,GAAGF,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;AAE1C,OAAO,eAAeE,UAAUA,CAACC,UAAU,EAAE;EAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,YAAa,SAAQI,MAAO,EAAC,EAAE;IAC7DK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASV,KAAM,EAAC;MAChC,cAAc,EAAE;IAClB,CAAC;IACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,OAAO,EAAEX,MAAM;MACfY,YAAY,EAAEV,UAAU,CAACU,YAAY;MACrCC,UAAU,EAAEX,UAAU,CAACW;IACzB,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;EAClC,IAAIZ,QAAQ,CAACa,EAAE,EAAE;IACfC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEJ,IAAI,CAAC;IAC7C,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,MAAM;IACLG,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEL,IAAI,CAAC;IACzC,MAAM,IAAIM,KAAK,CAACN,IAAI,CAAC;EACvB;AACF;;AAEA;AACA,OAAO,MAAMO,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMxB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,YAAa,SAAQI,MAAO,EAAC,EAAE;IAC7DK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASV,KAAM;IACjC;EACF,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,OAAO,MAAMjB,QAAQ,CAACY,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000\";\n\n// Retrieve userId from localStorage\nconst getUserId = () => {\n  const userDataString = localStorage.getItem(\"user_data\");\n  if (!userDataString) {\n    console.error(\"No user data found in localStorage\");\n    return null;\n  }\n  try {\n    const userData = JSON.parse(userDataString);\n    return userData.sub;\n  } catch (error) {\n    console.error(\"Error parsing user data:\", error);\n    return null;\n  }\n};\n\n// Retrieve the userId\nconst userId = getUserId();\n\n// Create a new cash entry\nexport async function createCash(cashAmount) {\n  if (!userId) {\n    throw new Error(\"User ID is not available. Please log in.\");\n  }\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      initial_cash: cashAmount.initial_cash,\n      entry_date: cashAmount.entry_date\n    })\n  });\n  const data = await response.json();\n  if (response.ok) {\n    console.log(\"Cash added successfully:\", data);\n    return data; // Return the created cash entry\n  } else {\n    console.error(\"Error adding cash:\", data);\n    throw new Error(data);\n  }\n}\n\n// Fetch cash entries\nexport const getCash = async () => {\n  // Check if userId is available\n  if (!userId) {\n    throw new Error(\"User ID is not available. Please log in.\");\n  }\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Error fetching cash data\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE_URL","getUserId","userDataString","localStorage","getItem","console","error","userData","JSON","parse","sub","userId","createCash","cashAmount","Error","response","fetch","method","headers","body","stringify","initial_cash","entry_date","data","json","ok","log","getCash"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/CashApi.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Retrieve userId from localStorage\r\nconst getUserId = () => {\r\n  const userDataString = localStorage.getItem(\"user_data\");\r\n  if (!userDataString) {\r\n    console.error(\"No user data found in localStorage\");\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const userData = JSON.parse(userDataString);\r\n    return userData.sub;\r\n  } catch (error) {\r\n    console.error(\"Error parsing user data:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Retrieve the userId\r\nconst userId = getUserId();\r\n\r\n// Create a new cash entry\r\nexport async function createCash(cashAmount) {\r\n  if (!userId) {\r\n    throw new Error(\"User ID is not available. Please log in.\");\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      initial_cash: cashAmount.initial_cash,\r\n      entry_date: cashAmount.entry_date,\r\n    }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  if (response.ok) {\r\n    console.log(\"Cash added successfully:\", data);\r\n    return data; // Return the created cash entry\r\n  } else {\r\n    console.error(\"Error adding cash:\", data);\r\n    throw new Error(data);\r\n  }\r\n}\r\n\r\n// Fetch cash entries\r\nexport const getCash = async () => {\r\n  // Check if userId is available\r\n  if (!userId) {\r\n    throw new Error(\"User ID is not available. Please log in.\");\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE_URL}/cash/${userId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Error fetching cash data\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACxD,IAAI,CAACF,cAAc,EAAE;IACnBG,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;IACnD,OAAO,IAAI;EACb;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACP,cAAc,CAAC;IAC3C,OAAOK,QAAQ,CAACG,GAAG;EACrB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMK,MAAM,GAAGV,SAAS,CAAC,CAAC;;AAE1B;AACA,OAAO,eAAeW,UAAUA,CAACC,UAAU,EAAE;EAC3C,IAAI,CAACF,MAAM,EAAE;IACX,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEhB,YAAa,SAAQW,MAAO,EAAC,EAAE;IAC7DM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MACnBC,YAAY,EAAER,UAAU,CAACQ,YAAY;MACrCC,UAAU,EAAET,UAAU,CAACS;IACzB,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAClC,IAAIT,QAAQ,CAACU,EAAE,EAAE;IACfpB,OAAO,CAACqB,GAAG,CAAC,0BAA0B,EAAEH,IAAI,CAAC;IAC7C,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,MAAM;IACLlB,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEiB,IAAI,CAAC;IACzC,MAAM,IAAIT,KAAK,CAACS,IAAI,CAAC;EACvB;AACF;;AAEA;AACA,OAAO,MAAMI,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC;EACA,IAAI,CAAChB,MAAM,EAAE;IACX,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEhB,YAAa,SAAQW,MAAO,EAAC,EAAE;IAC7DM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACU,EAAE,EAAE;IAChB,MAAM,IAAIX,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,OAAO,MAAMC,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Account.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/account.css\";\nimport AccountGraph from \"./AccountGraph\";\nconst Account = ({\n  trades\n}) => {\n  const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\n  const [dailyPL, setDailyPL] = useState(0);\n  const [periodPL, setPeriodPL] = useState(0);\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\n  const handleTimePeriodChange = period => {\n    setTimePeriod(period);\n  };\n  useEffect(() => {\n    const calculateBalanceAndPL = () => {\n      let balance = 0;\n      let dailyProfitLoss = 0;\n      let periodProfitLoss = 0;\n      trades.forEach(trade => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          const profit = (exitPrice - entryPrice) * contracts * 100;\n          balance += profit;\n          dailyProfitLoss += profit;\n        }\n        const tradeCloseDate = new Date(trade.close_date);\n\n        // Calculate the period profit based on the selected time period\n        if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date(), trade)) {\n          periodProfitLoss += calculateProfit(trade);\n        }\n      });\n      setAccountBalance(balance);\n      setDailyPL(dailyProfitLoss);\n      setPeriodPL(periodProfitLoss);\n    };\n    const calculateProfit = trade => {\n      const entryPrice = parseFloat(trade.entry_price);\n      const exitPrice = parseFloat(trade.exit_price);\n      const contracts = trade.contracts;\n      if (!isNaN(exitPrice)) {\n        return (exitPrice - entryPrice) * contracts * 100;\n      }\n      return 0;\n    };\n    const isWithinTimePeriod = (tradeCloseDate, period, today, trade) => {\n      const periodStartDate = new Date();\n      switch (period) {\n        case \"1D\":\n          periodStartDate.setDate(today.getDate() - 1);\n          break;\n        case \"1W\":\n          periodStartDate.setDate(today.getDate() - 7);\n          break;\n        case \"1M\":\n          periodStartDate.setMonth(today.getMonth() - 1);\n          break;\n        case \"3M\":\n          periodStartDate.setMonth(today.getMonth() - 3);\n          break;\n        case \"YTD\":\n          periodStartDate.setFullYear(today.getFullYear(), 0, 1);\n          break;\n        case \"1Y\":\n          periodStartDate.setFullYear(today.getFullYear() - 1);\n          break;\n        case \"Max\":\n          totalProfit = trades.reduce((total, trade) => {\n            const profitLoss = parseFloat(trade.profit_loss);\n            if (!isNaN(profitLoss)) {\n              return total + profitLoss;\n            }\n            return total;\n          }, 0);\n          break;\n          break;\n      }\n      return period === \"Max\" || tradeCloseDate >= periodStartDate;\n    };\n    calculateBalanceAndPL();\n  }, [trades, timePeriod]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, accountBalance.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, `${timePeriod}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, periodPL.toFixed(2))), /*#__PURE__*/React.createElement(AccountGraph, {\n    trades: trades,\n    onTimePeriodChange: handleTimePeriodChange,\n    periodPL: periodPL,\n    timePeriod: timePeriod,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Account;","map":{"version":3,"names":["React","useState","useEffect","AccountGraph","Account","trades","accountBalance","setAccountBalance","dailyPL","setDailyPL","periodPL","setPeriodPL","timePeriod","setTimePeriod","handleTimePeriodChange","period","calculateBalanceAndPL","balance","dailyProfitLoss","periodProfitLoss","forEach","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","profit","tradeCloseDate","Date","close_date","isWithinTimePeriod","calculateProfit","today","periodStartDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","totalProfit","reduce","total","profitLoss","profit_loss","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onTimePeriodChange"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/account.css\";\r\nimport AccountGraph from \"./AccountGraph\";\r\n\r\nconst Account = ({ trades }) => {\r\n  const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\r\n  const [dailyPL, setDailyPL] = useState(0);\r\n  const [periodPL, setPeriodPL] = useState(0);\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n  const handleTimePeriodChange = (period) => {\r\n    setTimePeriod(period);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const calculateBalanceAndPL = () => {\r\n      let balance = 0;\r\n      let dailyProfitLoss = 0;\r\n      let periodProfitLoss = 0;\r\n\r\n      trades.forEach((trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n\r\n        if (!isNaN(exitPrice)) {\r\n          const profit = (exitPrice - entryPrice) * contracts * 100;\r\n          balance += profit;\r\n          dailyProfitLoss += profit;\r\n        }\r\n\r\n        const tradeCloseDate = new Date(trade.close_date);\r\n\r\n        // Calculate the period profit based on the selected time period\r\n        if (isWithinTimePeriod(tradeCloseDate, timePeriod, new Date(), trade)) {\r\n          periodProfitLoss += calculateProfit(trade);\r\n        }\r\n      });\r\n\r\n      setAccountBalance(balance);\r\n      setDailyPL(dailyProfitLoss);\r\n      setPeriodPL(periodProfitLoss);\r\n    };\r\n\r\n    const calculateProfit = (trade) => {\r\n      const entryPrice = parseFloat(trade.entry_price);\r\n      const exitPrice = parseFloat(trade.exit_price);\r\n      const contracts = trade.contracts;\r\n      if (!isNaN(exitPrice)) {\r\n        return (exitPrice - entryPrice) * contracts * 100;\r\n      }\r\n      return 0;\r\n    };\r\n\r\n    const isWithinTimePeriod = (tradeCloseDate, period, today, trade) => {\r\n      const periodStartDate = new Date();\r\n\r\n      switch (period) {\r\n        case \"1D\":\r\n          periodStartDate.setDate(today.getDate() - 1);\r\n          break;\r\n        case \"1W\":\r\n          periodStartDate.setDate(today.getDate() - 7);\r\n          break;\r\n        case \"1M\":\r\n          periodStartDate.setMonth(today.getMonth() - 1);\r\n          break;\r\n        case \"3M\":\r\n          periodStartDate.setMonth(today.getMonth() - 3);\r\n          break;\r\n        case \"YTD\":\r\n          periodStartDate.setFullYear(today.getFullYear(), 0, 1);\r\n          break;\r\n        case \"1Y\":\r\n          periodStartDate.setFullYear(today.getFullYear() - 1);\r\n          break;\r\n        case \"Max\":\r\n          totalProfit = trades.reduce((total, trade) => {\r\n            const profitLoss = parseFloat(trade.profit_loss);\r\n            if (!isNaN(profitLoss)) {\r\n              return total + profitLoss;\r\n            }\r\n            return total;\r\n          }, 0);\r\n          break;\r\n\r\n          break;\r\n      }\r\n\r\n      return period === \"Max\" || tradeCloseDate >= periodStartDate;\r\n    };\r\n\r\n    calculateBalanceAndPL();\r\n  }, [trades, timePeriod]);\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"card\">\r\n        <p>Account</p>\r\n        <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <p>{`${timePeriod}`}</p>\r\n        <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n      </div>\r\n      <AccountGraph\r\n        trades={trades}\r\n        onTimePeriodChange={handleTimePeriodChange}\r\n        periodPL={periodPL}\r\n        timePeriod={timePeriod}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
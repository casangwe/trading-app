{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\AccountGraph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/accountGraph.css\";\nconst AccountGraph = () => {\n  const chartRef = useRef(null); // Reference to the canvas element\n  const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n  useEffect(() => {\n    // Fetch top profitable trades for one day from API\n    const fetchTopProfitableTrades = () => {\n      // Assuming the API endpoint returns data for one day\n      fetch(\"http://localhost:8000/trades/top-profitable-one-day\").then(response => response.json()).then(data => setTopProfitableTrades(data)).catch(error => console.error(\"Error fetching top profitable trades:\", error));\n    };\n    fetchTopProfitableTrades();\n  }, []); // Fetch data only once on component mount\n\n  useEffect(() => {\n    if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\n\n    // Render Chart.js chart with top profitable trades for one day\n    const ctx = chartRef.current.getContext(\"2d\");\n    const myChart = new window.Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: topProfitableTrades.map(trade => trade.time),\n        // Assuming the data includes timestamps or time labels\n        datasets: [{\n          label: \"Profit\",\n          data: topProfitableTrades.map(trade => trade.profit),\n          borderColor: \"green\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderWidth: 2\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            position: \"top\"\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            grid: {\n              display: true\n            },\n            title: {\n              display: true,\n              text: \"Profit\"\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      myChart.destroy(); // Clean up chart on unmount\n    };\n  }, [topProfitableTrades]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account-graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), \" \");\n};\nexport default AccountGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./styles/accountGraph.css\";\n\n// const AccountGraph = () => {\n//   const chartRef = useRef(null); // Reference to the canvas element\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\n\n//   useEffect(() => {\n//     // Fetch top profitable trades from API\n//     const fetchTopProfitableTrades = () => {\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\n//         .then((response) => response.json())\n//         .then((data) => setTopProfitableTrades(data))\n//         .catch((error) =>\n//           console.error(\"Error fetching top profitable trades:\", error)\n//         );\n//     };\n\n//     fetchTopProfitableTrades();\n//   }, []); // Fetch data only once on component mount\n\n//   useEffect(() => {\n//     // Load Chart.js from the CDN dynamically\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n//     script.async = true;\n//     script.onload = () => {\n//       // Initialize Chart.js instance after the script has loaded\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const myChart = new window.Chart(ctx, {\n//         type: \"line\",\n//         data: {\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\n//           datasets: [\n//             {\n//               data: getData(timePeriod), // Get data based on the selected time period\n//               borderColor: \"green\", // Green color for stock price line\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\n//               borderWidth: 2, // Width of the line\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false, // Hide legend\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false, // Hide grid lines\n//               },\n//               ticks: {\n//                 display: false, // Hide ticks\n//               },\n//               min: 0, // Start y-axis from 0\n//               max: 1000, // Set max value of y-axis\n//               position: \"center\",\n//             },\n//             y: {\n//               display: false, // Hide y-axis\n//             },\n//           },\n//         },\n//       });\n\n//       return () => {\n//         myChart.destroy(); // Clean up chart on unmount\n//       };\n//     };\n\n//     document.body.appendChild(script);\n\n//     return () => {\n//       document.body.removeChild(script); // Clean up script tag on unmount\n//     };\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\n\n//   // Function to get labels based on the selected time period\n//   const getLabels = (period) => {\n//     if (period === \"day\") {\n//       return [\"12AM\", \"3AM\", \"6AM\", \"9AM\", \"12PM\", \"3PM\", \"6PM\", \"9PM\"];\n//     } else if (period === \"weeks\") {\n//       return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n//     } else if (period === \"months\") {\n//       // Return labels for days of the month (assuming 30 days for simplicity)\n//       return Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`);\n//     } else if (period === \"3-months\") {\n//       // Return labels for months (3 months)\n//       return [\"Month 1\", \"Month 2\", \"Month 3\"];\n//     } else if (period === \"YTD\") {\n//       // Return labels for months in the year-to-date period (e.g., Jan, Feb, etc.)\n//       return [\n//         \"Jan\",\n//         \"Feb\",\n//         \"Mar\",\n//         \"Apr\",\n//         \"May\",\n//         \"Jun\",\n//         \"Jul\",\n//         \"Aug\",\n//         \"Sep\",\n//         \"Oct\",\n//         \"Nov\",\n//         \"Dec\",\n//       ];\n//     } else if (period === \"1-year\") {\n//       // Return labels for months of the year (12 months)\n//       return [\n//         \"Jan\",\n//         \"Feb\",\n//         \"Mar\",\n//         \"Apr\",\n//         \"May\",\n//         \"Jun\",\n//         \"Jul\",\n//         \"Aug\",\n//         \"Sep\",\n//         \"Oct\",\n//         \"Nov\",\n//         \"Dec\",\n//       ];\n//     } else if (period === \"max\") {\n//       // Return labels for years (assuming data for multiple years)\n//       return [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\"];\n//     }\n//   };\n\n//   // Function to get data based on the selected time period\n//   const getData = (period) => {\n//     const data = [];\n\n//     // Filter trades based on the selected time period\n//     let filteredTrades = [];\n//     if (period === \"day\") {\n//       // Filter trades for the last day\n//       filteredTrades = topProfitableTrades.filter((trade) => {\n//         return trade.timestamp >= Date.now() - 24 * 60 * 60 * 1000;\n//       });\n//     } else if (period === \"weeks\") {\n//       // Filter trades for the last week\n//       filteredTrades = topProfitableTrades.filter((trade) => {\n//         return trade.timestamp >= Date.now() - 7 * 24 * 60 * 60 * 1000;\n//       });\n//     } else if (period === \"months\") {\n//       // Filter trades for the last month\n//       filteredTrades = topProfitableTrades.filter((trade) => {\n//         return new Date(trade.timestamp).getMonth() === new Date().getMonth();\n//       });\n//     } else if (period === \"3-months\") {\n//       // Filter trades for the last 3 months\n//       const threeMonthsAgo = new Date();\n//       threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\n//       filteredTrades = topProfitableTrades.filter((trade) => {\n//         return new Date(trade.timestamp) >= threeMonthsAgo;\n//       });\n//     } else if (period === \"YTD\") {\n//       // Filter trades for the year-to-date period\n//       filteredTrades = topProfitableTrades.filter((trade) => {\n//         const tradeDate = new Date(trade.timestamp);\n//         return tradeDate.getFullYear() === new Date().getFullYear();\n//       });\n//     } else if (period === \"1-year\") {\n//       // Filter trades for the last year\n//       const lastYear = new Date();\n//       lastYear.setFullYear(lastYear.getFullYear() - 1);\n//       filteredTrades = topProfitableTrades.filter((trade) => {\n//         return new Date(trade.timestamp) >= lastYear;\n//       });\n//     } else if (period === \"max\") {\n//       // Sort trades based on profit in descending order\n//       topProfitableTrades.sort((a, b) => b.profit - a.profit);\n\n//       // Consider all trades with profits, without limiting to a specific number\n//       filteredTrades = topProfitableTrades;\n//     }\n\n//     // Calculate profit for each filtered trade and add to the data array\n//     filteredTrades.forEach((trade) => {\n//       data.push(trade.profit);\n//     });\n\n//     return data;\n//   };\n\n//   // Function to handle time period change\n//   const handleTimePeriodChange = (period) => {\n//     setTimePeriod(period);\n//   };\n\n//   return (\n//     <div className=\"account-graph\">\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\n//       <div className=\"time-period-selector\">\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"days\")}\n//         >\n//           1D\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\n//         >\n//           1W\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"months\")}\n//         >\n//           1M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\n//         >\n//           3M\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\n//         >\n//           YTD\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\n//         >\n//           1Y\n//         </button>\n//         <button\n//           className=\"time-period-button\"\n//           onClick={() => handleTimePeriodChange(\"max\")}\n//         >\n//           MAX\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountGraph;","map":{"version":3,"names":["React","useEffect","useRef","useState","AccountGraph","chartRef","topProfitableTrades","setTopProfitableTrades","fetchTopProfitableTrades","fetch","then","response","json","data","catch","error","console","length","ctx","current","getContext","myChart","window","Chart","type","labels","map","trade","time","datasets","label","profit","borderColor","backgroundColor","borderWidth","options","plugins","legend","display","position","scales","x","grid","y","title","text","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/AccountGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./styles/accountGraph.css\";\r\n\r\nconst AccountGraph = () => {\r\n  const chartRef = useRef(null); // Reference to the canvas element\r\n  const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n  useEffect(() => {\r\n    // Fetch top profitable trades for one day from API\r\n    const fetchTopProfitableTrades = () => {\r\n      // Assuming the API endpoint returns data for one day\r\n      fetch(\"http://localhost:8000/trades/top-profitable-one-day\")\r\n        .then((response) => response.json())\r\n        .then((data) => setTopProfitableTrades(data))\r\n        .catch((error) =>\r\n          console.error(\"Error fetching top profitable trades:\", error)\r\n        );\r\n    };\r\n\r\n    fetchTopProfitableTrades();\r\n  }, []); // Fetch data only once on component mount\r\n\r\n  useEffect(() => {\r\n    if (topProfitableTrades.length === 0) return; // Don't render chart if data is not available\r\n\r\n    // Render Chart.js chart with top profitable trades for one day\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    const myChart = new window.Chart(ctx, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: topProfitableTrades.map((trade) => trade.time), // Assuming the data includes timestamps or time labels\r\n        datasets: [\r\n          {\r\n            label: \"Profit\",\r\n            data: topProfitableTrades.map((trade) => trade.profit),\r\n            borderColor: \"green\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            grid: {\r\n              display: true,\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: \"Profit\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      myChart.destroy(); // Clean up chart on unmount\r\n    };\r\n  }, [topProfitableTrades]);\r\n\r\n  return (\r\n    <div className=\"account-graph\">\r\n      <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountGraph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./styles/accountGraph.css\";\r\n\r\n// const AccountGraph = () => {\r\n//   const chartRef = useRef(null); // Reference to the canvas element\r\n//   const [timePeriod, setTimePeriod] = useState(\"day\"); // State to track the selected time period\r\n//   const [topProfitableTrades, setTopProfitableTrades] = useState([]); // State to store top profitable trades\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top profitable trades from API\r\n//     const fetchTopProfitableTrades = () => {\r\n//       fetch(\"http://localhost:8000/trades/top-profitable/\")\r\n//         .then((response) => response.json())\r\n//         .then((data) => setTopProfitableTrades(data))\r\n//         .catch((error) =>\r\n//           console.error(\"Error fetching top profitable trades:\", error)\r\n//         );\r\n//     };\r\n\r\n//     fetchTopProfitableTrades();\r\n//   }, []); // Fetch data only once on component mount\r\n\r\n//   useEffect(() => {\r\n//     // Load Chart.js from the CDN dynamically\r\n//     const script = document.createElement(\"script\");\r\n//     script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\r\n//     script.async = true;\r\n//     script.onload = () => {\r\n//       // Initialize Chart.js instance after the script has loaded\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"line\",\r\n//         data: {\r\n//           labels: getLabels(timePeriod), // Get labels based on the selected time period\r\n//           datasets: [\r\n//             {\r\n//               data: getData(timePeriod), // Get data based on the selected time period\r\n//               borderColor: \"green\", // Green color for stock price line\r\n//               backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background color\r\n//               borderWidth: 2, // Width of the line\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false, // Hide legend\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false, // Hide grid lines\r\n//               },\r\n//               ticks: {\r\n//                 display: false, // Hide ticks\r\n//               },\r\n//               min: 0, // Start y-axis from 0\r\n//               max: 1000, // Set max value of y-axis\r\n//               position: \"center\",\r\n//             },\r\n//             y: {\r\n//               display: false, // Hide y-axis\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       return () => {\r\n//         myChart.destroy(); // Clean up chart on unmount\r\n//       };\r\n//     };\r\n\r\n//     document.body.appendChild(script);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script); // Clean up script tag on unmount\r\n//     };\r\n//   }, [timePeriod, topProfitableTrades]); // Re-render the chart when the time period changes\r\n\r\n//   // Function to get labels based on the selected time period\r\n//   const getLabels = (period) => {\r\n//     if (period === \"day\") {\r\n//       return [\"12AM\", \"3AM\", \"6AM\", \"9AM\", \"12PM\", \"3PM\", \"6PM\", \"9PM\"];\r\n//     } else if (period === \"weeks\") {\r\n//       return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n//     } else if (period === \"months\") {\r\n//       // Return labels for days of the month (assuming 30 days for simplicity)\r\n//       return Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`);\r\n//     } else if (period === \"3-months\") {\r\n//       // Return labels for months (3 months)\r\n//       return [\"Month 1\", \"Month 2\", \"Month 3\"];\r\n//     } else if (period === \"YTD\") {\r\n//       // Return labels for months in the year-to-date period (e.g., Jan, Feb, etc.)\r\n//       return [\r\n//         \"Jan\",\r\n//         \"Feb\",\r\n//         \"Mar\",\r\n//         \"Apr\",\r\n//         \"May\",\r\n//         \"Jun\",\r\n//         \"Jul\",\r\n//         \"Aug\",\r\n//         \"Sep\",\r\n//         \"Oct\",\r\n//         \"Nov\",\r\n//         \"Dec\",\r\n//       ];\r\n//     } else if (period === \"1-year\") {\r\n//       // Return labels for months of the year (12 months)\r\n//       return [\r\n//         \"Jan\",\r\n//         \"Feb\",\r\n//         \"Mar\",\r\n//         \"Apr\",\r\n//         \"May\",\r\n//         \"Jun\",\r\n//         \"Jul\",\r\n//         \"Aug\",\r\n//         \"Sep\",\r\n//         \"Oct\",\r\n//         \"Nov\",\r\n//         \"Dec\",\r\n//       ];\r\n//     } else if (period === \"max\") {\r\n//       // Return labels for years (assuming data for multiple years)\r\n//       return [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\"];\r\n//     }\r\n//   };\r\n\r\n//   // Function to get data based on the selected time period\r\n//   const getData = (period) => {\r\n//     const data = [];\r\n\r\n//     // Filter trades based on the selected time period\r\n//     let filteredTrades = [];\r\n//     if (period === \"day\") {\r\n//       // Filter trades for the last day\r\n//       filteredTrades = topProfitableTrades.filter((trade) => {\r\n//         return trade.timestamp >= Date.now() - 24 * 60 * 60 * 1000;\r\n//       });\r\n//     } else if (period === \"weeks\") {\r\n//       // Filter trades for the last week\r\n//       filteredTrades = topProfitableTrades.filter((trade) => {\r\n//         return trade.timestamp >= Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n//       });\r\n//     } else if (period === \"months\") {\r\n//       // Filter trades for the last month\r\n//       filteredTrades = topProfitableTrades.filter((trade) => {\r\n//         return new Date(trade.timestamp).getMonth() === new Date().getMonth();\r\n//       });\r\n//     } else if (period === \"3-months\") {\r\n//       // Filter trades for the last 3 months\r\n//       const threeMonthsAgo = new Date();\r\n//       threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\r\n//       filteredTrades = topProfitableTrades.filter((trade) => {\r\n//         return new Date(trade.timestamp) >= threeMonthsAgo;\r\n//       });\r\n//     } else if (period === \"YTD\") {\r\n//       // Filter trades for the year-to-date period\r\n//       filteredTrades = topProfitableTrades.filter((trade) => {\r\n//         const tradeDate = new Date(trade.timestamp);\r\n//         return tradeDate.getFullYear() === new Date().getFullYear();\r\n//       });\r\n//     } else if (period === \"1-year\") {\r\n//       // Filter trades for the last year\r\n//       const lastYear = new Date();\r\n//       lastYear.setFullYear(lastYear.getFullYear() - 1);\r\n//       filteredTrades = topProfitableTrades.filter((trade) => {\r\n//         return new Date(trade.timestamp) >= lastYear;\r\n//       });\r\n//     } else if (period === \"max\") {\r\n//       // Sort trades based on profit in descending order\r\n//       topProfitableTrades.sort((a, b) => b.profit - a.profit);\r\n\r\n//       // Consider all trades with profits, without limiting to a specific number\r\n//       filteredTrades = topProfitableTrades;\r\n//     }\r\n\r\n//     // Calculate profit for each filtered trade and add to the data array\r\n//     filteredTrades.forEach((trade) => {\r\n//       data.push(trade.profit);\r\n//     });\r\n\r\n//     return data;\r\n//   };\r\n\r\n//   // Function to handle time period change\r\n//   const handleTimePeriodChange = (period) => {\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"account-graph\">\r\n//       <canvas ref={chartRef} /> {/* Canvas for rendering the chart */}\r\n//       <div className=\"time-period-selector\">\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"days\")}\r\n//         >\r\n//           1D\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"weeks\")}\r\n//         >\r\n//           1W\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"months\")}\r\n//         >\r\n//           1M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"3-months\")}\r\n//         >\r\n//           3M\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"YTD\")}\r\n//         >\r\n//           YTD\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"1-year\")}\r\n//         >\r\n//           1Y\r\n//         </button>\r\n//         <button\r\n//           className=\"time-period-button\"\r\n//           onClick={() => handleTimePeriodChange(\"max\")}\r\n//         >\r\n//           MAX\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountGraph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,2BAA2B;AAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,QAAQ,GAAGH,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,MAAM,CAACI,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpEF,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,wBAAwB,GAAGA,CAAA,KAAM;MACrC;MACAC,KAAK,CAAC,qDAAqD,CAAC,CACzDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKN,sBAAsB,CAACM,IAAI,CAAC,CAAC,CAC5CC,KAAK,CAAEC,KAAK,IACXC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAC9D,CAAC;IACL,CAAC;IAEDP,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERP,SAAS,CAAC,MAAM;IACd,IAAIK,mBAAmB,CAACW,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;;IAE9C;IACA,MAAMC,GAAG,GAAGb,QAAQ,CAACc,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC7C,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACL,GAAG,EAAE;MACpCM,IAAI,EAAE,MAAM;MACZX,IAAI,EAAE;QACJY,MAAM,EAAEnB,mBAAmB,CAACoB,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;QAAE;QACxDC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,QAAQ;UACfjB,IAAI,EAAEP,mBAAmB,CAACoB,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACI,MAAM,CAAC;UACtDC,WAAW,EAAE,OAAO;UACpBC,eAAe,EAAE,kBAAkB;UACnCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE,IAAI;YACbC,QAAQ,EAAE;UACZ;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,IAAI,EAAE;cACJJ,OAAO,EAAE;YACX;UACF,CAAC;UACDK,CAAC,EAAE;YACDD,IAAI,EAAE;cACJJ,OAAO,EAAE;YACX,CAAC;YACDM,KAAK,EAAE;cACLN,OAAO,EAAE,IAAI;cACbO,IAAI,EAAE;YACR;UACF;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXxB,OAAO,CAACyB,OAAO,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACxC,mBAAmB,CAAC,CAAC;EAEzB,oBACEN,KAAA,CAAA+C,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BtD,KAAA,CAAA+C,aAAA;IAAQQ,GAAG,EAAElD,QAAS;IAAA4C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,KACtB,CAAC;AAEV,CAAC;AAED,eAAelD,YAAY;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}
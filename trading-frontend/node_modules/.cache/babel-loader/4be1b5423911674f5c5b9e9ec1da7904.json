{"ast":null,"code":"// Calculate Initial Cash (from API response)\nexport const calculateInitialCash = cashData => {\n  return (cashData === null || cashData === void 0 ? void 0 : cashData.initial_cash) ? Number(cashData.initial_cash) : 0;\n};\n\n// Calculate Total Deposits\nexport const calculateTotalDeposits = transactions => {\n  return transactions.filter(transaction => transaction.transaction_type === \"deposit\").reduce((total, transaction) => total + Number(transaction.amount), 0);\n};\n\n// Calculate Total Withdrawals\nexport const calculateTotalWithdrawals = transactions => {\n  return transactions.filter(transaction => transaction.transaction_type === \"withdrawal\").reduce((total, transaction) => total + Number(transaction.amount), 0);\n};\n\n// Calculate Net Profit/Loss (from trade profits/losses)\nexport const calculateNetPL = trades => {\n  return trades.reduce((totalPL, trade) => totalPL + Number(trade.profit_loss), 0);\n};\n\n// Calculate Available Cash (Initial Cash + Deposits - Withdrawals)\nexport const calculateAvailableCash = (initialCash, transactions, trades) => {\n  const totalDeposits = calculateTotalDeposits(transactions);\n  const totalWithdrawals = calculateTotalWithdrawals(transactions);\n  const netPL = calculateNetPL(trades); // Profit/loss from closed trades\n  return initialCash + totalDeposits - totalWithdrawals + netPL;\n};\n\n// Calculate Cash Balance (Initial Cash + Net P/L + Deposits - Withdrawals)\nexport const calculateCashBalance = (initialCash, netPL, transactions) => {\n  const availableCash = calculateAvailableCash(initialCash, transactions, []);\n  return availableCash + netPL;\n};\n\n// Calculate Return on Investment (RoI) based on Initial Cash and Net P/L\nexport const calculateROI = (initialCash, netPL) => {\n  if (initialCash === 0) return 0; // Avoid division by zero\n  return netPL / initialCash * 100;\n};","map":{"version":3,"names":["calculateInitialCash","cashData","initial_cash","Number","calculateTotalDeposits","transactions","filter","transaction","transaction_type","reduce","total","amount","calculateTotalWithdrawals","calculateNetPL","trades","totalPL","trade","profit_loss","calculateAvailableCash","initialCash","totalDeposits","totalWithdrawals","netPL","calculateCashBalance","availableCash","calculateROI"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/cash/CashCalc.js"],"sourcesContent":["// Calculate Initial Cash (from API response)\r\nexport const calculateInitialCash = (cashData) => {\r\n  return cashData?.initial_cash ? Number(cashData.initial_cash) : 0;\r\n};\r\n\r\n// Calculate Total Deposits\r\nexport const calculateTotalDeposits = (transactions) => {\r\n  return transactions\r\n    .filter((transaction) => transaction.transaction_type === \"deposit\")\r\n    .reduce((total, transaction) => total + Number(transaction.amount), 0);\r\n};\r\n\r\n// Calculate Total Withdrawals\r\nexport const calculateTotalWithdrawals = (transactions) => {\r\n  return transactions\r\n    .filter((transaction) => transaction.transaction_type === \"withdrawal\")\r\n    .reduce((total, transaction) => total + Number(transaction.amount), 0);\r\n};\r\n\r\n// Calculate Net Profit/Loss (from trade profits/losses)\r\nexport const calculateNetPL = (trades) => {\r\n  return trades.reduce(\r\n    (totalPL, trade) => totalPL + Number(trade.profit_loss),\r\n    0\r\n  );\r\n};\r\n\r\n// Calculate Available Cash (Initial Cash + Deposits - Withdrawals)\r\nexport const calculateAvailableCash = (initialCash, transactions, trades) => {\r\n  const totalDeposits = calculateTotalDeposits(transactions);\r\n  const totalWithdrawals = calculateTotalWithdrawals(transactions);\r\n  const netPL = calculateNetPL(trades); // Profit/loss from closed trades\r\n  return initialCash + totalDeposits - totalWithdrawals + netPL;\r\n};\r\n\r\n// Calculate Cash Balance (Initial Cash + Net P/L + Deposits - Withdrawals)\r\nexport const calculateCashBalance = (initialCash, netPL, transactions) => {\r\n  const availableCash = calculateAvailableCash(initialCash, transactions, []);\r\n  return availableCash + netPL;\r\n};\r\n\r\n// Calculate Return on Investment (RoI) based on Initial Cash and Net P/L\r\nexport const calculateROI = (initialCash, netPL) => {\r\n  if (initialCash === 0) return 0; // Avoid division by zero\r\n  return (netPL / initialCash) * 100;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAIC,QAAQ,IAAK;EAChD,OAAO,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,YAAY,IAAGC,MAAM,CAACF,QAAQ,CAACC,YAAY,CAAC,GAAG,CAAC;AACnE,CAAC;;AAED;AACA,OAAO,MAAME,sBAAsB,GAAIC,YAAY,IAAK;EACtD,OAAOA,YAAY,CAChBC,MAAM,CAAEC,WAAW,IAAKA,WAAW,CAACC,gBAAgB,KAAK,SAAS,CAAC,CACnEC,MAAM,CAAC,CAACC,KAAK,EAAEH,WAAW,KAAKG,KAAK,GAAGP,MAAM,CAACI,WAAW,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC;AAC1E,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAIP,YAAY,IAAK;EACzD,OAAOA,YAAY,CAChBC,MAAM,CAAEC,WAAW,IAAKA,WAAW,CAACC,gBAAgB,KAAK,YAAY,CAAC,CACtEC,MAAM,CAAC,CAACC,KAAK,EAAEH,WAAW,KAAKG,KAAK,GAAGP,MAAM,CAACI,WAAW,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC;AAC1E,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAOA,MAAM,CAACL,MAAM,CAClB,CAACM,OAAO,EAAEC,KAAK,KAAKD,OAAO,GAAGZ,MAAM,CAACa,KAAK,CAACC,WAAW,CAAC,EACvD,CACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,WAAW,EAAEd,YAAY,EAAES,MAAM,KAAK;EAC3E,MAAMM,aAAa,GAAGhB,sBAAsB,CAACC,YAAY,CAAC;EAC1D,MAAMgB,gBAAgB,GAAGT,yBAAyB,CAACP,YAAY,CAAC;EAChE,MAAMiB,KAAK,GAAGT,cAAc,CAACC,MAAM,CAAC,CAAC,CAAC;EACtC,OAAOK,WAAW,GAAGC,aAAa,GAAGC,gBAAgB,GAAGC,KAAK;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACJ,WAAW,EAAEG,KAAK,EAAEjB,YAAY,KAAK;EACxE,MAAMmB,aAAa,GAAGN,sBAAsB,CAACC,WAAW,EAAEd,YAAY,EAAE,EAAE,CAAC;EAC3E,OAAOmB,aAAa,GAAGF,KAAK;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAGA,CAACN,WAAW,EAAEG,KAAK,KAAK;EAClD,IAAIH,WAAW,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;EACjC,OAAQG,KAAK,GAAGH,WAAW,GAAI,GAAG;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
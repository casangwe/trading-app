{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\trades\\\\EQTcurve.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { getCash } from \"../api/CashApi\";\nimport { Line, XAxis, Tooltip, ResponsiveContainer, ComposedChart, YAxis } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nimport { numberOfTrades, WinRate, SharpeRatio } from \"../analysis/AnalysisGet\"; // Adjust path based on folder structure\n\nconst EQTCurve = () => {\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [tradeSummary, setTradeSummary] = useState(null);\n  useEffect(() => {\n    const fetchAndFormatData = async () => {\n      try {\n        const cashData = await getCash();\n        const trades = await fetchTrades();\n        if (cashData && trades && trades.length > 0) {\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\n          const formattedData = formatChartData(trades, startingEquity, cashData);\n          setChartData(formattedData);\n\n          // Calculate trade summary data using imported functions\n          setTradeSummary({\n            initialCash: startingEquity,\n            totalTrades: calculateNumberOfTrades(trades),\n            winRate: calculateWinRate(trades).toFixed(2),\n            sharpeRatio: calculateSharpeRatio(trades).toFixed(2)\n          });\n        } else {\n          setError(\"No trade or cash data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching trade or cash data\");\n        console.error(\"Error:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAndFormatData();\n  }, []);\n  const formatChartData = (trades, startingEquity, cashData) => {\n    let cumulativeEquity = startingEquity;\n    const idealIncrement = (startingEquity * 3 - startingEquity) / trades.length;\n    const sortedTrades = trades.sort((a, b) => new Date(a.close_date) - new Date(b.close_date));\n    const chartData = [{\n      date: formatDate(cashData.entry_date),\n      equity: startingEquity,\n      idealEquity: startingEquity\n    }];\n    sortedTrades.forEach((trade, index) => {\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\n      chartData.push({\n        date: formatDate(trade.close_date),\n        equity: cumulativeEquity,\n        idealEquity: idealEquity\n      });\n    });\n    return chartData;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"equity-curve-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"summary-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-summary-initial-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Initial Cash: \", formatCash((tradeSummary === null || tradeSummary === void 0 ? void 0 : tradeSummary.initialCash) || 0)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-summary-total-trades\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Trades: \", tradeSummary ? tradeSummary.totalTrades : \"Loading...\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-summary-win-rate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Win Rate: \", tradeSummary ? `${tradeSummary.winRate}%` : \"Loading...\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"equity-summary-sharpe-ratio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Sharpe Ratio: \", tradeSummary ? tradeSummary.sharpeRatio : \"Loading...\")), loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComposedChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: false,\n    axisLine: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: false,\n    content: ({\n      payload\n    }) => {\n      if (payload && payload.length) {\n        const {\n          date,\n          equity\n        } = payload[0].payload;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tooltip-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 23\n          }\n        }, formatCash(equity)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"trade-date\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 23\n          }\n        }, date));\n      }\n      return null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"idealEquity\",\n    stroke: \"#dddddd\",\n    strokeWidth: 2,\n    dot: false,\n    name: \"Ideal Equity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"equity\",\n    stroke: \"#4A90E2\",\n    strokeWidth: 2,\n    dot: false,\n    name: \"Equity Curve\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default EQTCurve;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTrades } from \"../api/TradesAPI\";\n// import { getCash } from \"../api/CashApi\";\n// import {\n//   Line,\n//   XAxis,\n//   Tooltip,\n//   ResponsiveContainer,\n//   ComposedChart,\n//   YAxis,\n// } from \"recharts\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const EQTCurve = () => {\n//   const [chartData, setChartData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [tradeSummary, setTradeSummary] = useState(null);\n\n//   useEffect(() => {\n//     const fetchAndFormatData = async () => {\n//       try {\n//         const cashData = await getCash();\n//         const trades = await fetchTrades();\n\n//         if (cashData && trades && trades.length > 0) {\n//           const startingEquity = parseFloat(cashData.initial_cash || 0);\n//           const formattedData = formatChartData(\n//             trades,\n//             startingEquity,\n//             cashData\n//           );\n//           setChartData(formattedData);\n\n//           // Set trade summary data\n//           setTradeSummary({\n//             initialCash: startingEquity,\n//             totalTrades: trades.length,\n//             finalEquity: formattedData[formattedData.length - 1].equity,\n//           });\n//         } else {\n//           setError(\"No trade or cash data available\");\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching trade or cash data\");\n//         console.error(\"Error:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchAndFormatData();\n//   }, []);\n\n//   const formatChartData = (trades, startingEquity, cashData) => {\n//     let cumulativeEquity = startingEquity;\n//     const idealIncrement =\n//       (startingEquity * 3 - startingEquity) / trades.length;\n\n//     const sortedTrades = trades.sort(\n//       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n//     );\n\n//     const chartData = [\n//       {\n//         date: formatDate(cashData.entry_date),\n//         equity: startingEquity,\n//         idealEquity: startingEquity,\n//       },\n//     ];\n\n//     sortedTrades.forEach((trade, index) => {\n//       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n//       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n//       chartData.push({\n//         date: formatDate(trade.close_date),\n//         equity: cumulativeEquity,\n//         idealEquity: idealEquity,\n//       });\n//     });\n\n//     return chartData;\n//   };\n\n//   return (\n//     <div className=\"equity-curve-chart-container\">\n//       <div className=\"summary-section\">\n//         <p className=\"equity-summary-initial-cash\">\n//           {formatCash(tradeSummary?.initialCash || 0)}\n//         </p>\n//         <p className=\"equity-summary-total-trades\">\n//           {tradeSummary ? `Trades: ${tradeSummary.totalTrades}` : \"Loading...\"}\n//         </p>\n//         <p className=\"equity-summary-final-equity\">\n//           {tradeSummary\n//             ? `Final Equity: ${formatCash(tradeSummary.finalEquity || 0)}`\n//             : \"Loading...\"}\n//         </p>\n//       </div>\n\n//       {loading ? (\n//         <div>Loading...</div>\n//       ) : error ? (\n//         <div>{error}</div>\n//       ) : (\n//         <ResponsiveContainer width=\"100%\" height={400}>\n//           <ComposedChart data={chartData}>\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n//             <YAxis hide={true} />\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { date, equity } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{formatCash(equity)}</p>\n//                       <p className=\"trade-date\">{date}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"idealEquity\"\n//               stroke=\"#dddddd\"\n//               strokeWidth={2}\n//               dot={false}\n//               name=\"Ideal Equity\"\n//             />\n\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"equity\"\n//               stroke=\"#4A90E2\"\n//               strokeWidth={2}\n//               dot={false}\n//               name=\"Equity Curve\"\n//             />\n//           </ComposedChart>\n//         </ResponsiveContainer>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EQTCurve;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","getCash","Line","XAxis","Tooltip","ResponsiveContainer","ComposedChart","YAxis","formatCash","formatDate","numberOfTrades","WinRate","SharpeRatio","EQTCurve","chartData","setChartData","loading","setLoading","error","setError","tradeSummary","setTradeSummary","fetchAndFormatData","cashData","trades","length","startingEquity","parseFloat","initial_cash","formattedData","formatChartData","initialCash","totalTrades","calculateNumberOfTrades","winRate","calculateWinRate","toFixed","sharpeRatio","calculateSharpeRatio","console","cumulativeEquity","idealIncrement","sortedTrades","sort","a","b","Date","close_date","date","entry_date","equity","idealEquity","forEach","trade","index","profit_loss","push","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","dataKey","tick","axisLine","hide","cursor","content","payload","type","stroke","strokeWidth","dot","name"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/trades/EQTcurve.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport { getCash } from \"../api/CashApi\";\r\nimport {\r\n  Line,\r\n  XAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\nimport { numberOfTrades, WinRate, SharpeRatio } from \"../analysis/AnalysisGet\"; // Adjust path based on folder structure\r\n\r\nconst EQTCurve = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [tradeSummary, setTradeSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAndFormatData = async () => {\r\n      try {\r\n        const cashData = await getCash();\r\n        const trades = await fetchTrades();\r\n\r\n        if (cashData && trades && trades.length > 0) {\r\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n          const formattedData = formatChartData(\r\n            trades,\r\n            startingEquity,\r\n            cashData\r\n          );\r\n          setChartData(formattedData);\r\n\r\n          // Calculate trade summary data using imported functions\r\n          setTradeSummary({\r\n            initialCash: startingEquity,\r\n            totalTrades: calculateNumberOfTrades(trades),\r\n            winRate: calculateWinRate(trades).toFixed(2),\r\n            sharpeRatio: calculateSharpeRatio(trades).toFixed(2),\r\n          });\r\n        } else {\r\n          setError(\"No trade or cash data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching trade or cash data\");\r\n        console.error(\"Error:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAndFormatData();\r\n  }, []);\r\n\r\n  const formatChartData = (trades, startingEquity, cashData) => {\r\n    let cumulativeEquity = startingEquity;\r\n    const idealIncrement =\r\n      (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n    const sortedTrades = trades.sort(\r\n      (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n    );\r\n\r\n    const chartData = [\r\n      {\r\n        date: formatDate(cashData.entry_date),\r\n        equity: startingEquity,\r\n        idealEquity: startingEquity,\r\n      },\r\n    ];\r\n\r\n    sortedTrades.forEach((trade, index) => {\r\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n      chartData.push({\r\n        date: formatDate(trade.close_date),\r\n        equity: cumulativeEquity,\r\n        idealEquity: idealEquity,\r\n      });\r\n    });\r\n\r\n    return chartData;\r\n  };\r\n\r\n  return (\r\n    <div className=\"equity-curve-chart-container\">\r\n      {/* Summary Section for Trade Analysis */}\r\n      <div className=\"summary-section\">\r\n        <p className=\"equity-summary-initial-cash\">\r\n          Initial Cash: {formatCash(tradeSummary?.initialCash || 0)}\r\n        </p>\r\n        <p className=\"equity-summary-total-trades\">\r\n          Trades: {tradeSummary ? tradeSummary.totalTrades : \"Loading...\"}\r\n        </p>\r\n        <p className=\"equity-summary-win-rate\">\r\n          Win Rate: {tradeSummary ? `${tradeSummary.winRate}%` : \"Loading...\"}\r\n        </p>\r\n        <p className=\"equity-summary-sharpe-ratio\">\r\n          Sharpe Ratio: {tradeSummary ? tradeSummary.sharpeRatio : \"Loading...\"}\r\n        </p>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <ComposedChart data={chartData}>\r\n            <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n            <YAxis hide={true} />\r\n\r\n            <Tooltip\r\n              cursor={false}\r\n              content={({ payload }) => {\r\n                if (payload && payload.length) {\r\n                  const { date, equity } = payload[0].payload;\r\n                  return (\r\n                    <div className=\"tooltip-content\">\r\n                      <p>{formatCash(equity)}</p>\r\n                      <p className=\"trade-date\">{date}</p>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"idealEquity\"\r\n              stroke=\"#dddddd\"\r\n              strokeWidth={2}\r\n              dot={false}\r\n              name=\"Ideal Equity\"\r\n            />\r\n\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"equity\"\r\n              stroke=\"#4A90E2\"\r\n              strokeWidth={2}\r\n              dot={false}\r\n              name=\"Equity Curve\"\r\n            />\r\n          </ComposedChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EQTCurve;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTrades } from \"../api/TradesAPI\";\r\n// import { getCash } from \"../api/CashApi\";\r\n// import {\r\n//   Line,\r\n//   XAxis,\r\n//   Tooltip,\r\n//   ResponsiveContainer,\r\n//   ComposedChart,\r\n//   YAxis,\r\n// } from \"recharts\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const EQTCurve = () => {\r\n//   const [chartData, setChartData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [tradeSummary, setTradeSummary] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAndFormatData = async () => {\r\n//       try {\r\n//         const cashData = await getCash();\r\n//         const trades = await fetchTrades();\r\n\r\n//         if (cashData && trades && trades.length > 0) {\r\n//           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n//           const formattedData = formatChartData(\r\n//             trades,\r\n//             startingEquity,\r\n//             cashData\r\n//           );\r\n//           setChartData(formattedData);\r\n\r\n//           // Set trade summary data\r\n//           setTradeSummary({\r\n//             initialCash: startingEquity,\r\n//             totalTrades: trades.length,\r\n//             finalEquity: formattedData[formattedData.length - 1].equity,\r\n//           });\r\n//         } else {\r\n//           setError(\"No trade or cash data available\");\r\n//         }\r\n//       } catch (error) {\r\n//         setError(\"Error fetching trade or cash data\");\r\n//         console.error(\"Error:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchAndFormatData();\r\n//   }, []);\r\n\r\n//   const formatChartData = (trades, startingEquity, cashData) => {\r\n//     let cumulativeEquity = startingEquity;\r\n//     const idealIncrement =\r\n//       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n//     const sortedTrades = trades.sort(\r\n//       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n//     );\r\n\r\n//     const chartData = [\r\n//       {\r\n//         date: formatDate(cashData.entry_date),\r\n//         equity: startingEquity,\r\n//         idealEquity: startingEquity,\r\n//       },\r\n//     ];\r\n\r\n//     sortedTrades.forEach((trade, index) => {\r\n//       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n//       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n//       chartData.push({\r\n//         date: formatDate(trade.close_date),\r\n//         equity: cumulativeEquity,\r\n//         idealEquity: idealEquity,\r\n//       });\r\n//     });\r\n\r\n//     return chartData;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"equity-curve-chart-container\">\r\n//       <div className=\"summary-section\">\r\n//         <p className=\"equity-summary-initial-cash\">\r\n//           {formatCash(tradeSummary?.initialCash || 0)}\r\n//         </p>\r\n//         <p className=\"equity-summary-total-trades\">\r\n//           {tradeSummary ? `Trades: ${tradeSummary.totalTrades}` : \"Loading...\"}\r\n//         </p>\r\n//         <p className=\"equity-summary-final-equity\">\r\n//           {tradeSummary\r\n//             ? `Final Equity: ${formatCash(tradeSummary.finalEquity || 0)}`\r\n//             : \"Loading...\"}\r\n//         </p>\r\n//       </div>\r\n\r\n//       {loading ? (\r\n//         <div>Loading...</div>\r\n//       ) : error ? (\r\n//         <div>{error}</div>\r\n//       ) : (\r\n//         <ResponsiveContainer width=\"100%\" height={400}>\r\n//           <ComposedChart data={chartData}>\r\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n//             <YAxis hide={true} />\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { date, equity } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{formatCash(equity)}</p>\r\n//                       <p className=\"trade-date\">{date}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"idealEquity\"\r\n//               stroke=\"#dddddd\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//               name=\"Ideal Equity\"\r\n//             />\r\n\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"equity\"\r\n//               stroke=\"#4A90E2\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//               name=\"Equity Curve\"\r\n//             />\r\n//           </ComposedChart>\r\n//         </ResponsiveContainer>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EQTCurve;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SACEC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,mBAAmB,EACnBC,aAAa,EACbC,KAAK,QACA,UAAU;AACjB,SAASC,UAAU,EAAEC,UAAU,QAAQ,mBAAmB;AAC1D,SAASC,cAAc,EAAEC,OAAO,EAAEC,WAAW,QAAQ,yBAAyB,CAAC,CAAC;;AAEhF,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMuB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMtB,OAAO,CAAC,CAAC;QAChC,MAAMuB,MAAM,GAAG,MAAMxB,WAAW,CAAC,CAAC;QAElC,IAAIuB,QAAQ,IAAIC,MAAM,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UAC3C,MAAMC,cAAc,GAAGC,UAAU,CAACJ,QAAQ,CAACK,YAAY,IAAI,CAAC,CAAC;UAC7D,MAAMC,aAAa,GAAGC,eAAe,CACnCN,MAAM,EACNE,cAAc,EACdH,QACF,CAAC;UACDR,YAAY,CAACc,aAAa,CAAC;;UAE3B;UACAR,eAAe,CAAC;YACdU,WAAW,EAAEL,cAAc;YAC3BM,WAAW,EAAEC,uBAAuB,CAACT,MAAM,CAAC;YAC5CU,OAAO,EAAEC,gBAAgB,CAACX,MAAM,CAAC,CAACY,OAAO,CAAC,CAAC,CAAC;YAC5CC,WAAW,EAAEC,oBAAoB,CAACd,MAAM,CAAC,CAACY,OAAO,CAAC,CAAC;UACrD,CAAC,CAAC;QACJ,CAAC,MAAM;UACLjB,QAAQ,CAAC,iCAAiC,CAAC;QAC7C;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,mCAAmC,CAAC;QAC7CoB,OAAO,CAACrB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC,CAAC,SAAS;QACRD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,eAAe,GAAGA,CAACN,MAAM,EAAEE,cAAc,EAAEH,QAAQ,KAAK;IAC5D,IAAIiB,gBAAgB,GAAGd,cAAc;IACrC,MAAMe,cAAc,GAClB,CAACf,cAAc,GAAG,CAAC,GAAGA,cAAc,IAAIF,MAAM,CAACC,MAAM;IAEvD,MAAMiB,YAAY,GAAGlB,MAAM,CAACmB,IAAI,CAC9B,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,UAAU,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,UAAU,CAC1D,CAAC;IAED,MAAMjC,SAAS,GAAG,CAChB;MACEkC,IAAI,EAAEvC,UAAU,CAACc,QAAQ,CAAC0B,UAAU,CAAC;MACrCC,MAAM,EAAExB,cAAc;MACtByB,WAAW,EAAEzB;IACf,CAAC,CACF;IAEDgB,YAAY,CAACU,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACrCd,gBAAgB,IAAIb,UAAU,CAAC0B,KAAK,CAACE,WAAW,IAAI,CAAC,CAAC,GAAG,GAAG;MAC5D,MAAMJ,WAAW,GAAGzB,cAAc,GAAGe,cAAc,IAAIa,KAAK,GAAG,CAAC,CAAC;MAEjExC,SAAS,CAAC0C,IAAI,CAAC;QACbR,IAAI,EAAEvC,UAAU,CAAC4C,KAAK,CAACN,UAAU,CAAC;QAClCG,MAAM,EAAEV,gBAAgB;QACxBW,WAAW,EAAEA;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOrC,SAAS;EAClB,CAAC;EAED,oBACEjB,KAAA,CAAA4D,aAAA;IAAKC,SAAS,EAAC,8BAA8B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE3CnE,KAAA,CAAA4D,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BnE,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,6BAA6B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gBAC3B,EAACxD,UAAU,CAAC,CAAAY,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEW,WAAW,KAAI,CAAC,CACvD,CAAC,eACJlC,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,6BAA6B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UACjC,EAAC5C,YAAY,GAAGA,YAAY,CAACY,WAAW,GAAG,YAClD,CAAC,eACJnC,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,yBAAyB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,YAC3B,EAAC5C,YAAY,GAAI,GAAEA,YAAY,CAACc,OAAQ,GAAE,GAAG,YACtD,CAAC,eACJrC,KAAA,CAAA4D,aAAA;IAAGC,SAAS,EAAC,6BAA6B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gBAC3B,EAAC5C,YAAY,GAAGA,YAAY,CAACiB,WAAW,GAAG,YACxD,CACA,CAAC,EAELrB,OAAO,gBACNnB,KAAA,CAAA4D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,YAAe,CAAC,GACnB9C,KAAK,gBACPrB,KAAA,CAAA4D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM9C,KAAW,CAAC,gBAElBrB,KAAA,CAAA4D,aAAA,CAACpD,mBAAmB;IAAC4D,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5CnE,KAAA,CAAA4D,aAAA,CAACnD,aAAa;IAAC6D,IAAI,EAAErD,SAAU;IAAA6C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BnE,KAAA,CAAA4D,aAAA,CAACtD,KAAK;IAACiE,OAAO,EAAC,MAAM;IAACC,IAAI,EAAE,KAAM;IAACC,QAAQ,EAAE,KAAM;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACtDnE,KAAA,CAAA4D,aAAA,CAAClD,KAAK;IAACgE,IAAI,EAAE,IAAK;IAAAZ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAErBnE,KAAA,CAAA4D,aAAA,CAACrD,OAAO;IACNoE,MAAM,EAAE,KAAM;IACdC,OAAO,EAAEA,CAAC;MAAEC;IAAQ,CAAC,KAAK;MACxB,IAAIA,OAAO,IAAIA,OAAO,CAACjD,MAAM,EAAE;QAC7B,MAAM;UAAEuB,IAAI;UAAEE;QAAO,CAAC,GAAGwB,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO;QAC3C,oBACE7E,KAAA,CAAA4D,aAAA;UAAKC,SAAS,EAAC,iBAAiB;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBAC9BnE,KAAA,CAAA4D,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAIxD,UAAU,CAAC0C,MAAM,CAAK,CAAC,eAC3BrD,KAAA,CAAA4D,aAAA;UAAGC,SAAS,EAAC,YAAY;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAEhB,IAAQ,CAChC,CAAC;MAEV;MACA,OAAO,IAAI;IACb,CAAE;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CAAC,eAEFnE,KAAA,CAAA4D,aAAA,CAACvD,IAAI;IACHyE,IAAI,EAAC,UAAU;IACfP,OAAO,EAAC,aAAa;IACrBQ,MAAM,EAAC,SAAS;IAChBC,WAAW,EAAE,CAAE;IACfC,GAAG,EAAE,KAAM;IACXC,IAAI,EAAC,cAAc;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACpB,CAAC,eAEFnE,KAAA,CAAA4D,aAAA,CAACvD,IAAI;IACHyE,IAAI,EAAC,UAAU;IACfP,OAAO,EAAC,QAAQ;IAChBQ,MAAM,EAAC,SAAS;IAChBC,WAAW,EAAE,CAAE;IACfC,GAAG,EAAE,KAAM;IACXC,IAAI,EAAC,cAAc;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACpB,CACY,CACI,CAEpB,CAAC;AAEV,CAAC;AAED,eAAenD,QAAQ;;AAEvignoreList":[]},"metadata":{},"sourceType":"module"}
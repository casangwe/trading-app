{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nconst Graph = () => {\n  // Reference to the chart canvas element\n  const chartRef = useRef(null);\n\n  // State variables for loading status, trade data, and profits\n  const [loading, setLoading] = useState(true);\n  const [trades, setTrades] = useState([]);\n  const [profits, setProfits] = useState({});\n\n  // Fetch trade data from backend\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const tradeData = await fetchTrades(); // Assuming fetchTrades is a function that fetches trade data\n        setTrades(tradeData);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching trade data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Function to calculate profits for different time periods\n  useEffect(() => {\n    if (trades.length > 0) {\n      const calculateProfits = () => {\n        // Your logic to calculate profits for different time periods based on trade data\n        // Assuming you have a function calculateProfitsForTimePeriod(trades, timePeriod) that returns profits for a specific time period\n        const profitData = {\n          \"1D\": calculateProfitsForTimePeriod(trades, \"1D\"),\n          \"1W\": calculateProfitsForTimePeriod(trades, \"1W\"),\n          \"1M\": calculateProfitsForTimePeriod(trades, \"1M\"),\n          \"3M\": calculateProfitsForTimePeriod(trades, \"3M\"),\n          YTD: calculateProfitsForTimePeriod(trades, \"YTD\"),\n          \"1Y\": calculateProfitsForTimePeriod(trades, \"1Y\"),\n          Max: calculateProfitsForTimePeriod(trades, \"Max\")\n        };\n        setProfits(profitData);\n      };\n      calculateProfits();\n    }\n  }, [trades]);\n\n  // Effect hook to render chart when trade data and profits are available\n  useEffect(() => {\n    if (!loading && Object.keys(profits).length > 0) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      const profitValues = Object.values(profits);\n      const backgroundColors = profitValues.map(value => value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\");\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: Object.keys(profits),\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: profitValues,\n            backgroundColor: backgroundColors,\n            barThickness: 40\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              },\n              grid: {\n                color: context => context.tick.value === 0 ? \"rgba(0, 0, 0, 1)\" : \"rgba(0, 0, 0, 0)\",\n                lineWidth: 0.5\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return value === 0 ? value : \"\";\n                }\n              }\n            }\n          }\n        }\n      });\n\n      // Cleanup function to destroy chart instance\n      return () => {\n        if (myChart) {\n          myChart.destroy();\n        }\n      };\n    }\n  }, [loading, profits]);\n\n  // Render loading message or chart canvas\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 38\n    }\n  }));\n};\nexport default Graph;","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchTrades","Graph","chartRef","loading","setLoading","trades","setTrades","profits","setProfits","fetchData","tradeData","error","console","length","calculateProfits","profitData","calculateProfitsForTimePeriod","YTD","Max","Object","keys","ctx","current","getContext","profitValues","values","backgroundColors","map","value","myChart","window","Chart","type","data","labels","datasets","label","backgroundColor","barThickness","options","plugins","legend","display","scales","x","grid","y","title","text","color","context","tick","lineWidth","ticks","callback","index","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\n\r\nconst Graph = () => {\r\n  // Reference to the chart canvas element\r\n  const chartRef = useRef(null);\r\n\r\n  // State variables for loading status, trade data, and profits\r\n  const [loading, setLoading] = useState(true);\r\n  const [trades, setTrades] = useState([]);\r\n  const [profits, setProfits] = useState({});\r\n\r\n  // Fetch trade data from backend\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const tradeData = await fetchTrades(); // Assuming fetchTrades is a function that fetches trade data\r\n        setTrades(tradeData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching trade data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Function to calculate profits for different time periods\r\n  useEffect(() => {\r\n    if (trades.length > 0) {\r\n      const calculateProfits = () => {\r\n        // Your logic to calculate profits for different time periods based on trade data\r\n        // Assuming you have a function calculateProfitsForTimePeriod(trades, timePeriod) that returns profits for a specific time period\r\n        const profitData = {\r\n          \"1D\": calculateProfitsForTimePeriod(trades, \"1D\"),\r\n          \"1W\": calculateProfitsForTimePeriod(trades, \"1W\"),\r\n          \"1M\": calculateProfitsForTimePeriod(trades, \"1M\"),\r\n          \"3M\": calculateProfitsForTimePeriod(trades, \"3M\"),\r\n          YTD: calculateProfitsForTimePeriod(trades, \"YTD\"),\r\n          \"1Y\": calculateProfitsForTimePeriod(trades, \"1Y\"),\r\n          Max: calculateProfitsForTimePeriod(trades, \"Max\"),\r\n        };\r\n        setProfits(profitData);\r\n      };\r\n\r\n      calculateProfits();\r\n    }\r\n  }, [trades]);\r\n\r\n  // Effect hook to render chart when trade data and profits are available\r\n  useEffect(() => {\r\n    if (!loading && Object.keys(profits).length > 0) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      const profitValues = Object.values(profits);\r\n      const backgroundColors = profitValues.map((value) =>\r\n        value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n      );\r\n\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: Object.keys(profits),\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: profitValues,\r\n              backgroundColor: backgroundColors,\r\n              barThickness: 40,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n              grid: {\r\n                color: (context) =>\r\n                  context.tick.value === 0\r\n                    ? \"rgba(0, 0, 0, 1)\"\r\n                    : \"rgba(0, 0, 0, 0)\",\r\n                lineWidth: 0.5,\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  return value === 0 ? value : \"\";\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      // Cleanup function to destroy chart instance\r\n      return () => {\r\n        if (myChart) {\r\n          myChart.destroy();\r\n        }\r\n      };\r\n    }\r\n  }, [loading, profits]);\r\n\r\n  // Render loading message or chart canvas\r\n  return (\r\n    <div className=\"graph\">\r\n      {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAClB;EACA,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1C;EACAF,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMV,WAAW,CAAC,CAAC,CAAC,CAAC;QACvCM,SAAS,CAACI,SAAS,CAAC;QACpBN,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIQ,MAAM,CAACQ,MAAM,GAAG,CAAC,EAAE;MACrB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;QAC7B;QACA;QACA,MAAMC,UAAU,GAAG;UACjB,IAAI,EAAEC,6BAA6B,CAACX,MAAM,EAAE,IAAI,CAAC;UACjD,IAAI,EAAEW,6BAA6B,CAACX,MAAM,EAAE,IAAI,CAAC;UACjD,IAAI,EAAEW,6BAA6B,CAACX,MAAM,EAAE,IAAI,CAAC;UACjD,IAAI,EAAEW,6BAA6B,CAACX,MAAM,EAAE,IAAI,CAAC;UACjDY,GAAG,EAAED,6BAA6B,CAACX,MAAM,EAAE,KAAK,CAAC;UACjD,IAAI,EAAEW,6BAA6B,CAACX,MAAM,EAAE,IAAI,CAAC;UACjDa,GAAG,EAAEF,6BAA6B,CAACX,MAAM,EAAE,KAAK;QAClD,CAAC;QACDG,UAAU,CAACO,UAAU,CAAC;MACxB,CAAC;MAEDD,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;;EAEZ;EACAR,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,OAAO,IAAIgB,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC,CAACM,MAAM,GAAG,CAAC,EAAE;MAC/C,MAAMQ,GAAG,GAAGnB,QAAQ,CAACoB,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7C,MAAMC,YAAY,GAAGL,MAAM,CAACM,MAAM,CAAClB,OAAO,CAAC;MAC3C,MAAMmB,gBAAgB,GAAGF,YAAY,CAACG,GAAG,CAAEC,KAAK,IAC9CA,KAAK,IAAI,CAAC,GAAG,SAAS,GAAG,oBAC3B,CAAC;MAED,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACV,GAAG,EAAE;QACpCW,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,MAAM,EAAEf,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC;UAC5B4B,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,aAAa;YACpBH,IAAI,EAAET,YAAY;YAClBa,eAAe,EAAEX,gBAAgB;YACjCY,YAAY,EAAE;UAChB,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE;YACX;UACF,CAAC;UACDC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,IAAI,EAAE;gBACJH,OAAO,EAAE;cACX;YACF,CAAC;YACDI,CAAC,EAAE;cACDJ,OAAO,EAAE,IAAI;cACbK,KAAK,EAAE;gBACLL,OAAO,EAAE,IAAI;gBACbM,IAAI,EAAE;cACR,CAAC;cACDH,IAAI,EAAE;gBACJI,KAAK,EAAGC,OAAO,IACbA,OAAO,CAACC,IAAI,CAACvB,KAAK,KAAK,CAAC,GACpB,kBAAkB,GAClB,kBAAkB;gBACxBwB,SAAS,EAAE;cACb,CAAC;cACDC,KAAK,EAAE;gBACLC,QAAQ,EAAE,SAAAA,CAAU1B,KAAK,EAAE2B,KAAK,EAAE9B,MAAM,EAAE;kBACxC,OAAOG,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;gBACjC;cACF;YACF;UACF;QACF;MACF,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACX,IAAIC,OAAO,EAAE;UACXA,OAAO,CAAC2B,OAAO,CAAC,CAAC;QACnB;MACF,CAAC;IACH;EACF,CAAC,EAAE,CAACrD,OAAO,EAAEI,OAAO,CAAC,CAAC;;EAEtB;EACA,oBACEX,KAAA,CAAA6D,aAAA;IAAKC,SAAS,EAAC,OAAO;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB7D,OAAO,gBAAGP,KAAA,CAAA6D,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,YAAa,CAAC,gBAAGpE,KAAA,CAAA6D,aAAA;IAAQQ,GAAG,EAAE/D,QAAS;IAAAyD,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACpD,CAAC;AAEV,CAAC;AAED,eAAe/D,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}
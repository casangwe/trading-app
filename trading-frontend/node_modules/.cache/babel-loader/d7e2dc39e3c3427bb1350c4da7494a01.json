{"ast":null,"code":"// CashApi.js\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Function to create a new cash entry\nexport const createCash = async cashData => {\n  const token = localStorage.getItem(\"access_token\");\n  const response = await fetch(`${API_BASE_URL}/cash/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}` // Include the JWT token for authorization\n    },\n    body: JSON.stringify(cashData)\n  });\n  if (!response.ok) {\n    throw new Error(\"Error creating cash entry\");\n  }\n  return await response.json();\n};\n\n// Function to fetch cash entries (optional, can be implemented as needed)\nexport const getCash = async () => {\n  const token = localStorage.getItem(\"access_token\");\n  const response = await fetch(`${API_BASE_URL}/cash/`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}` // Include the JWT token for authorization\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Error fetching cash data\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE_URL","createCash","cashData","token","localStorage","getItem","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","json","getCash"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/CashApi.js"],"sourcesContent":["// CashApi.js\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Function to create a new cash entry\r\nexport const createCash = async (cashData) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  const response = await fetch(`${API_BASE_URL}/cash/`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`, // Include the JWT token for authorization\r\n    },\r\n    body: JSON.stringify(cashData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Error creating cash entry\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\n// Function to fetch cash entries (optional, can be implemented as needed)\r\nexport const getCash = async () => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n\r\n  const response = await fetch(`${API_BASE_URL}/cash/`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`, // Include the JWT token for authorization\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Error fetching cash data\");\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAElD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,QAAO,EAAE;IACpDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASP,KAAM,EAAC,CAAE;IACpC,CAAC;IACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAElD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,QAAO,EAAE;IACpDQ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASP,KAAM,EAAC,CAAE;IACpC;EACF,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
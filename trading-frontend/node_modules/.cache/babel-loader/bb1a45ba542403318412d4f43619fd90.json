{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Account.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/account.css\";\nimport AccountGraph from \"./AccountGraph\";\nconst Account = ({\n  trades\n}) => {\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [dailyPL, setDailyPL] = useState(0);\n  const [periodPL, setPeriodPL] = useState(0);\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\n  const handleTimePeriodChange = period => {\n    setTimePeriod(period);\n  };\n  useEffect(() => {\n    const calculateBalanceAndPL = () => {\n      let balance = 86;\n      let dailyProfitLoss = 0;\n      let periodProfitLoss = 0;\n      trades.forEach(trade => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          const profit = (exitPrice - entryPrice) * contracts * 100;\n          balance += profit;\n          dailyProfitLoss += profit;\n        }\n        const tradeCloseDate = new Date(trade.close_date);\n\n        // Calculate the period profit based on the selected time period\n        if (isWithinTimePeriod(tradeCloseDate, timePeriod)) {\n          periodProfitLoss += profit;\n        }\n      });\n      setAccountBalance(balance);\n      setDailyPL(dailyProfitLoss);\n      setPeriodPL(periodProfitLoss);\n    };\n    calculateBalanceAndPL();\n  }, [trades, timePeriod]);\n\n  // Function to check if the trade date falls within the specified period\n  const isWithinTimePeriod = (tradeCloseDate, period) => {\n    const periodStartDate = new Date();\n    switch (period) {\n      case \"1D\":\n        periodStartDate.setDate(periodStartDate.getDate() - 1);\n        break;\n      case \"1W\":\n        periodStartDate.setDate(periodStartDate.getDate() - 7);\n        break;\n      case \"1M\":\n        periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n        break;\n      case \"1Y\":\n        periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n        break;\n      default:\n        break;\n    }\n    return tradeCloseDate >= periodStartDate;\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, accountBalance.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, `${timePeriod}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, periodPL.toFixed(2))), /*#__PURE__*/React.createElement(AccountGraph, {\n    trades: trades,\n    onTimePeriodChange: handleTimePeriodChange,\n    periodPL: periodPL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Account;\n\n// import React from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = () => {\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{}</p>\n//       </div>\n//       <AccountGraph />\n//     </div>\n//   );\n// };\n\n// export default Account;","map":{"version":3,"names":["React","useState","useEffect","AccountGraph","Account","trades","accountBalance","setAccountBalance","dailyPL","setDailyPL","periodPL","setPeriodPL","timePeriod","setTimePeriod","handleTimePeriodChange","period","calculateBalanceAndPL","balance","dailyProfitLoss","periodProfitLoss","forEach","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","profit","tradeCloseDate","Date","close_date","isWithinTimePeriod","periodStartDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onTimePeriodChange"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/account.css\";\r\nimport AccountGraph from \"./AccountGraph\";\r\n\r\nconst Account = ({ trades }) => {\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n  const [dailyPL, setDailyPL] = useState(0);\r\n  const [periodPL, setPeriodPL] = useState(0);\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n  const handleTimePeriodChange = (period) => {\r\n    setTimePeriod(period);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const calculateBalanceAndPL = () => {\r\n      let balance = 86;\r\n      let dailyProfitLoss = 0;\r\n      let periodProfitLoss = 0;\r\n\r\n      trades.forEach((trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n\r\n        if (!isNaN(exitPrice)) {\r\n          const profit = (exitPrice - entryPrice) * contracts * 100;\r\n          balance += profit;\r\n          dailyProfitLoss += profit;\r\n        }\r\n\r\n        const tradeCloseDate = new Date(trade.close_date);\r\n\r\n        // Calculate the period profit based on the selected time period\r\n        if (isWithinTimePeriod(tradeCloseDate, timePeriod)) {\r\n          periodProfitLoss += profit;\r\n        }\r\n      });\r\n\r\n      setAccountBalance(balance);\r\n      setDailyPL(dailyProfitLoss);\r\n      setPeriodPL(periodProfitLoss);\r\n    };\r\n\r\n    calculateBalanceAndPL();\r\n  }, [trades, timePeriod]);\r\n\r\n  // Function to check if the trade date falls within the specified period\r\n  const isWithinTimePeriod = (tradeCloseDate, period) => {\r\n    const periodStartDate = new Date();\r\n\r\n    switch (period) {\r\n      case \"1D\":\r\n        periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n        break;\r\n      case \"1W\":\r\n        periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n        break;\r\n      case \"1M\":\r\n        periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n        break;\r\n      case \"1Y\":\r\n        periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return tradeCloseDate >= periodStartDate;\r\n  };\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"card\">\r\n        <p>Account</p>\r\n        <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <p>{`${timePeriod}`}</p>\r\n        <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n      </div>\r\n      <AccountGraph\r\n        trades={trades}\r\n        onTimePeriodChange={handleTimePeriodChange}\r\n        periodPL={periodPL}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n\r\n// import React from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = () => {\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{}</p>\r\n//       </div>\r\n//       <AccountGraph />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
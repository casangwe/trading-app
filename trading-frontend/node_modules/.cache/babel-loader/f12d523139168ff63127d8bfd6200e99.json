{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Account.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/account.css\";\nimport AccountGraph from \"./AccountGraph\";\nconst Account = ({\n  trades\n}) => {\n  const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\n  const [dailyPL, setDailyPL] = useState(0);\n  const [periodPL, setPeriodPL] = useState(0);\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\n  const handleTimePeriodChange = period => {\n    setTimePeriod(period);\n  };\n  useEffect(() => {\n    const calculateBalanceAndPL = () => {\n      let balance = 86;\n      let dailyProfitLoss = 0;\n      let periodProfitLoss = 0;\n      trades.forEach(trade => {\n        const entryPrice = parseFloat(trade.entry_price);\n        const exitPrice = parseFloat(trade.exit_price);\n        const contracts = trade.contracts;\n        if (!isNaN(exitPrice)) {\n          const profit = (exitPrice - entryPrice) * contracts * 100;\n          balance += profit;\n          dailyProfitLoss += profit;\n          const tradeCloseDate = new Date(trade.close_date);\n          const periodStartDate = new Date();\n          switch (timePeriod) {\n            case \"1D\":\n              periodStartDate.setDate(periodStartDate.getDate() - 1);\n              break;\n            case \"1W\":\n              periodStartDate.setDate(periodStartDate.getDate() - 7);\n              break;\n            case \"1M\":\n              periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n              break;\n            case \"3M\":\n              periodStartDate.setMonth(periodStartDate.getMonth() - 3);\n              break;\n            case \"YTD\":\n              periodStartDate.setMonth(0);\n              periodStartDate.setDate(1);\n              break;\n            case \"1Y\":\n              periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n              break;\n            case \"Max\":\n              periodProfitLoss = trades.reduce((maxPL, trade) => {\n                const entryPrice = parseFloat(trade.entry_price);\n                const exitPrice = parseFloat(trade.exit_price);\n                const contracts = trade.contracts;\n                if (!isNaN(exitPrice)) {\n                  const profit = (exitPrice - entryPrice) * contracts * 100;\n                  return Math.max(maxPL, profit);\n                }\n                return maxPL;\n              }, 0);\n              break;\n            default:\n              break;\n          }\n          if (tradeCloseDate >= periodStartDate) {\n            periodProfitLoss += profit;\n          }\n        }\n      });\n      setAccountBalance(balance);\n      setDailyPL(dailyProfitLoss);\n      setPeriodPL(periodProfitLoss);\n    };\n    calculateBalanceAndPL();\n  }, [trades, timePeriod]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Account\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, accountBalance.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, `${timePeriod}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, periodPL.toFixed(2))), /*#__PURE__*/React.createElement(AccountGraph, {\n    trades: trades,\n    onTimePeriodChange: handleTimePeriodChange,\n    periodPL: periodPL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), \" \");\n};\nexport default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0);\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   const handleTimePeriodChange = (period) => {\n//     // Define the handleTimePeriodChange function\n//     setTimePeriod(period);\n//   };\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         // Check if exit price is available\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\n//           balance += profit; // Update total account balance\n//           dailyProfitLoss += profit; // Update daily profit/loss\n\n//           // Calculate profit for the selected time period\n//           const tradeCloseDate = new Date(trade.close_date);\n//           const periodStartDate = new Date();\n//           switch (timePeriod) {\n//             case \"1D\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\n//               break;\n//             case \"1W\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\n//               break;\n//             case \"1M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n//               break;\n//             case \"3M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\n//               break;\n//             case \"YTD\":\n//               periodStartDate.setMonth(0);\n//               periodStartDate.setDate(1);\n//               break;\n//             case \"1Y\":\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n//               break;\n//             default:\n//               break;\n//           }\n//           if (tradeCloseDate >= periodStartDate) {\n//             periodProfitLoss += profit;\n//           }\n//         }\n//       });\n\n//       setAccountBalance(balance); // Set total account balance\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n\n//       <div className=\"card\">\n//         <p>{`${timePeriod} P/L`}</p>\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph\n//         trades={trades}\n//         onTimePeriodChange={handleTimePeriodChange}\n//       />{\" \"}\n//       {/* Pass handleTimePeriodChange as a prop */}\n//     </div>\n//   );\n// };\n\n// export default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0);\n//   const [dailyPL, setDailyPL] = useState(0);\n//   const [periodPL, setPeriodPL] = useState(0);\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n//       let periodProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n\n//         // Check if exit price is available\n//         if (!isNaN(exitPrice)) {\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\n//           balance += profit; // Update total account balance\n//           dailyProfitLoss += profit; // Update daily profit/loss\n\n//           // Calculate profit for the selected time period\n//           const tradeCloseDate = new Date(trade.close_date);\n//           const periodStartDate = new Date();\n//           switch (timePeriod) {\n//             case \"1D\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\n//               break;\n//             case \"1W\":\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\n//               break;\n//             case \"1M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\n//               break;\n//             case \"3M\":\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\n//               break;\n//             case \"YTD\":\n//               periodStartDate.setMonth(0);\n//               periodStartDate.setDate(1);\n//               break;\n//             case \"1Y\":\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\n//               break;\n//             default:\n//               break;\n//           }\n//           if (tradeCloseDate >= periodStartDate) {\n//             periodProfitLoss += profit;\n//           }\n//         }\n//       });\n\n//       setAccountBalance(balance); // Set total account balance\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades, timePeriod]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>{`${timePeriod} P/L`}</p>\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph onTimePeriodChange={handleTimePeriodChange} />\n//     </div>\n//   );\n// };\n\n// export default Account;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./styles/account.css\";\n// import AccountGraph from \"./AccountGraph\";\n\n// const Account = ({ trades }) => {\n//   const [accountBalance, setAccountBalance] = useState(0);\n//   const [dailyPL, setDailyPL] = useState(0);\n\n//   useEffect(() => {\n//     const calculateBalanceAndPL = () => {\n//       let balance = 86;\n//       let dailyProfitLoss = 0;\n\n//       trades.forEach((trade) => {\n//         const entryPrice = parseFloat(trade.entry_price);\n//         const exitPrice = parseFloat(trade.exit_price);\n//         const contracts = trade.contracts;\n//         const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\n//         balance += profit; // Update total account balance\n//         dailyProfitLoss += profit; // Update daily profit/loss\n//       });\n\n//       setAccountBalance(balance); // Set total account balance\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\n//     };\n\n//     calculateBalanceAndPL();\n//   }, [trades]);\n\n//   return (\n//     <div className=\"account\">\n//       <div className=\"card\">\n//         <p>Account</p>\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\n//       </div>\n//       <div className=\"card\">\n//         <p>Daily P/L</p>\n//         <p className=\"cash\">{dailyPL.toFixed(2)}</p>\n//       </div>\n//       <AccountGraph />\n//     </div>\n//   );\n// };\n\n// export default Account;","map":{"version":3,"names":["React","useState","useEffect","AccountGraph","Account","trades","accountBalance","setAccountBalance","dailyPL","setDailyPL","periodPL","setPeriodPL","timePeriod","setTimePeriod","handleTimePeriodChange","period","calculateBalanceAndPL","balance","dailyProfitLoss","periodProfitLoss","forEach","trade","entryPrice","parseFloat","entry_price","exitPrice","exit_price","contracts","isNaN","profit","tradeCloseDate","Date","close_date","periodStartDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","reduce","maxPL","Math","max","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onTimePeriodChange"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/account.css\";\r\nimport AccountGraph from \"./AccountGraph\";\r\n\r\nconst Account = ({ trades }) => {\r\n  const [accountBalance, setAccountBalance] = useState(0); // eslint-disable-next-line\r\n  const [dailyPL, setDailyPL] = useState(0);\r\n  const [periodPL, setPeriodPL] = useState(0);\r\n  const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n  const handleTimePeriodChange = (period) => {\r\n    setTimePeriod(period);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const calculateBalanceAndPL = () => {\r\n      let balance = 86;\r\n      let dailyProfitLoss = 0;\r\n      let periodProfitLoss = 0;\r\n\r\n      trades.forEach((trade) => {\r\n        const entryPrice = parseFloat(trade.entry_price);\r\n        const exitPrice = parseFloat(trade.exit_price);\r\n        const contracts = trade.contracts;\r\n\r\n        if (!isNaN(exitPrice)) {\r\n          const profit = (exitPrice - entryPrice) * contracts * 100;\r\n          balance += profit;\r\n          dailyProfitLoss += profit;\r\n\r\n          const tradeCloseDate = new Date(trade.close_date);\r\n          const periodStartDate = new Date();\r\n          switch (timePeriod) {\r\n            case \"1D\":\r\n              periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n              break;\r\n            case \"1W\":\r\n              periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n              break;\r\n            case \"1M\":\r\n              periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n              break;\r\n            case \"3M\":\r\n              periodStartDate.setMonth(periodStartDate.getMonth() - 3);\r\n              break;\r\n            case \"YTD\":\r\n              periodStartDate.setMonth(0);\r\n              periodStartDate.setDate(1);\r\n              break;\r\n            case \"1Y\":\r\n              periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n              break;\r\n            case \"Max\":\r\n              periodProfitLoss = trades.reduce((maxPL, trade) => {\r\n                const entryPrice = parseFloat(trade.entry_price);\r\n                const exitPrice = parseFloat(trade.exit_price);\r\n                const contracts = trade.contracts;\r\n                if (!isNaN(exitPrice)) {\r\n                  const profit = (exitPrice - entryPrice) * contracts * 100;\r\n                  return Math.max(maxPL, profit);\r\n                }\r\n                return maxPL;\r\n              }, 0);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          if (tradeCloseDate >= periodStartDate) {\r\n            periodProfitLoss += profit;\r\n          }\r\n        }\r\n      });\r\n\r\n      setAccountBalance(balance);\r\n      setDailyPL(dailyProfitLoss);\r\n      setPeriodPL(periodProfitLoss);\r\n    };\r\n\r\n    calculateBalanceAndPL();\r\n  }, [trades, timePeriod]);\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      <div className=\"card\">\r\n        <p>Account</p>\r\n        <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <p>{`${timePeriod}`}</p>\r\n        <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n      </div>\r\n      <AccountGraph\r\n        trades={trades}\r\n        onTimePeriodChange={handleTimePeriodChange}\r\n        periodPL={periodPL}\r\n      />{\" \"}\r\n      {/* Pass periodPL as a prop */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0);\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   const handleTimePeriodChange = (period) => {\r\n//     // Define the handleTimePeriodChange function\r\n//     setTimePeriod(period);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         // Check if exit price is available\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\r\n//           balance += profit; // Update total account balance\r\n//           dailyProfitLoss += profit; // Update daily profit/loss\r\n\r\n//           // Calculate profit for the selected time period\r\n//           const tradeCloseDate = new Date(trade.close_date);\r\n//           const periodStartDate = new Date();\r\n//           switch (timePeriod) {\r\n//             case \"1D\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n//               break;\r\n//             case \"1W\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n//               break;\r\n//             case \"1M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n//               break;\r\n//             case \"3M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\r\n//               break;\r\n//             case \"YTD\":\r\n//               periodStartDate.setMonth(0);\r\n//               periodStartDate.setDate(1);\r\n//               break;\r\n//             case \"1Y\":\r\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n//               break;\r\n//             default:\r\n//               break;\r\n//           }\r\n//           if (tradeCloseDate >= periodStartDate) {\r\n//             periodProfitLoss += profit;\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance); // Set total account balance\r\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\r\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n\r\n//       <div className=\"card\">\r\n//         <p>{`${timePeriod} P/L`}</p>\r\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph\r\n//         trades={trades}\r\n//         onTimePeriodChange={handleTimePeriodChange}\r\n//       />{\" \"}\r\n//       {/* Pass handleTimePeriodChange as a prop */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0);\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n//   const [periodPL, setPeriodPL] = useState(0);\r\n//   const [timePeriod, setTimePeriod] = useState(\"1D\");\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n//       let periodProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n\r\n//         // Check if exit price is available\r\n//         if (!isNaN(exitPrice)) {\r\n//           const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\r\n//           balance += profit; // Update total account balance\r\n//           dailyProfitLoss += profit; // Update daily profit/loss\r\n\r\n//           // Calculate profit for the selected time period\r\n//           const tradeCloseDate = new Date(trade.close_date);\r\n//           const periodStartDate = new Date();\r\n//           switch (timePeriod) {\r\n//             case \"1D\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 1);\r\n//               break;\r\n//             case \"1W\":\r\n//               periodStartDate.setDate(periodStartDate.getDate() - 7);\r\n//               break;\r\n//             case \"1M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 1);\r\n//               break;\r\n//             case \"3M\":\r\n//               periodStartDate.setMonth(periodStartDate.getMonth() - 3);\r\n//               break;\r\n//             case \"YTD\":\r\n//               periodStartDate.setMonth(0);\r\n//               periodStartDate.setDate(1);\r\n//               break;\r\n//             case \"1Y\":\r\n//               periodStartDate.setFullYear(periodStartDate.getFullYear() - 1);\r\n//               break;\r\n//             default:\r\n//               break;\r\n//           }\r\n//           if (tradeCloseDate >= periodStartDate) {\r\n//             periodProfitLoss += profit;\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       setAccountBalance(balance); // Set total account balance\r\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\r\n//       setPeriodPL(periodProfitLoss); // Set profit/loss for the selected time period\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades, timePeriod]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>{`${timePeriod} P/L`}</p>\r\n//         <p className=\"cash\">{periodPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph onTimePeriodChange={handleTimePeriodChange} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./styles/account.css\";\r\n// import AccountGraph from \"./AccountGraph\";\r\n\r\n// const Account = ({ trades }) => {\r\n//   const [accountBalance, setAccountBalance] = useState(0);\r\n//   const [dailyPL, setDailyPL] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBalanceAndPL = () => {\r\n//       let balance = 86;\r\n//       let dailyProfitLoss = 0;\r\n\r\n//       trades.forEach((trade) => {\r\n//         const entryPrice = parseFloat(trade.entry_price);\r\n//         const exitPrice = parseFloat(trade.exit_price);\r\n//         const contracts = trade.contracts;\r\n//         const profit = (exitPrice - entryPrice) * contracts * 100; // Calculate profit for each trade\r\n//         balance += profit; // Update total account balance\r\n//         dailyProfitLoss += profit; // Update daily profit/loss\r\n//       });\r\n\r\n//       setAccountBalance(balance); // Set total account balance\r\n//       setDailyPL(dailyProfitLoss); // Set daily profit/loss\r\n//     };\r\n\r\n//     calculateBalanceAndPL();\r\n//   }, [trades]);\r\n\r\n//   return (\r\n//     <div className=\"account\">\r\n//       <div className=\"card\">\r\n//         <p>Account</p>\r\n//         <p className=\"cash\">{accountBalance.toFixed(2)}</p>\r\n//       </div>\r\n//       <div className=\"card\">\r\n//         <p>Daily P/L</p>\r\n//         <p className=\"cash\">{dailyPL.toFixed(2)}</p>\r\n//       </div>\r\n//       <AccountGraph />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Account;\r\n"],"mappings":"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},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetchTrades } from \"./ApiCalls\";\nconst Graph = () => {\n  // Reference to the chart canvas element\n  const chartRef = useRef(null);\n\n  // State variables for loading status and trade data\n  const [loading, setLoading] = useState(true);\n  const [trades, setTrades] = useState([]);\n\n  // Fetch trade data from backend\n  useEffect(() => {\n    console.log(\"Fetching trades...\");\n    fetchTrades().then(data => {\n      console.log(\"Fetched trades:\", data);\n      setTrades(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching trades:\", error);\n    });\n  }, []);\n  // Calculate profit/loss for trades in the last 1 week\n  const calculateProfitLossForLastWeek = trades => {\n    const now = new Date();\n    const oneWeek = 1000 * 60 * 60 * 24 * 7;\n    let profitLossForLastWeek = 0;\n    trades.forEach(trade => {\n      const closeDate = new Date(trade.closeDate);\n      const timeDiff = now - closeDate;\n      if (timeDiff <= oneWeek) {\n        profitLossForLastWeek += trade.profitLoss;\n      }\n    });\n    return profitLossForLastWeek;\n  };\n\n  // Effect hook to render chart when trade data is available\n  useEffect(() => {\n    console.log(\"Rendering chart...\");\n    if (!loading && trades.length > 0) {\n      const ctx = chartRef.current.getContext(\"2d\");\n\n      // Calculate profit/loss for the last 1 day\n      const week = calculateProfitLossForLastWeek(trades);\n      console.log(\"Profit/Loss for the last week:\", week);\n\n      // Chart rendering logic\n      const myChart = new window.Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: [\"1W\"],\n          datasets: [{\n            label: \"Profit/Loss\",\n            data: [week],\n            backgroundColor: week >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\",\n            barThickness: 40\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: \"Profit/Loss\"\n              },\n              grid: {\n                color: context => context.tick.value === 0 ? \"rgba(0, 0, 0, 1)\" : \"rgba(0, 0, 0, 0)\",\n                lineWidth: 0.5\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  return value === 0 ? value : \"\";\n                }\n              }\n            }\n          }\n        }\n      });\n      console.log(\"Created chart instance:\", myChart);\n\n      // Cleanup function to destroy chart instance\n      return () => {\n        console.log(\"Destroying chart instance...\");\n        if (myChart) {\n          myChart.destroy();\n        }\n      };\n    }\n  }, [loading, trades]);\n\n  // Render loading message or chart canvas\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 38\n    }\n  }));\n};\nexport default Graph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import { fetchTrades } from \"./ApiCalls\";\n\n// const Graph = () => {\n//   // Reference to the chart canvas element\n//   const chartRef = useRef(null);\n\n//   // State variables for loading status, trade data, and profits\n//   const [loading, setLoading] = useState(true);\n//   const [trades, setTrades] = useState([]);\n//   const [profits, setProfits] = useState({});\n\n//   // Fetch trade data from backend\n//   useEffect(() => {\n//     fetchTrades()\n//       .then((data) => {\n//         setTrades(data);\n//         const profitMap = {};\n//         data.forEach((trade) => {\n//           const profitLoss = trade.profitLoss;\n//           const date = trade.closeDate;\n//           if (!profitMap[date]) {\n//             profitMap[date] = 0;\n//           }\n//           profitMap[date] += profitLoss;\n//         });\n//         setProfits(profitMap);\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching trades:\", error);\n//       });\n//   }, []);\n\n//   // Categorize each trade under: \"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\" based on close date\n//   const categorizeTrades = () => {\n//     const categorizedTrades = {};\n//     Object.keys(profits).forEach((date) => {\n//       const category = getTradeCategory(date);\n//       if (!categorizedTrades[category]) {\n//         categorizedTrades[category] = 0;\n//       }\n//       categorizedTrades[category] += profits[date];\n//     });\n//     return categorizedTrades;\n//   };\n\n//   const getTradeCategory = (date) => {\n//     const now = new Date();\n//     const oneDay = 1000 * 60 * 60 * 24;\n//     const oneWeek = oneDay * 7;\n//     const oneMonth = oneDay * 30;\n//     const threeMonths = oneDay * 90;\n//     const oneYear = oneDay * 365;\n\n//     if (date > now - oneDay) {\n//       return \"1D\";\n//     } else if (date > now - oneWeek) {\n//       return \"1W\";\n//     } else if (date > now - oneMonth) {\n//       return \"1M\";\n//     } else if (date > now - threeMonths) {\n//       return \"3M\";\n//     } else if (date > now - oneYear) {\n//       return \"1Y\";\n//     } else {\n//       return \"Max\";\n//     }\n//   };\n//   // Calculate total profit/loss for each category\n//   const calculateProfitLoss = () => {\n//     const categorizedProfits = categorizeTrades();\n//     return Object.keys(categorizedProfits).reduce((acc, category) => {\n//       acc[category] = categorizedProfits[category];\n//       return acc;\n//     }, {});\n//   };\n\n//   // Effect hook to render chart when trade data and profits are available\n//   useEffect(() => {\n//     if (!loading && trades.length > 0) {\n//       const ctx = chartRef.current.getContext(\"2d\");\n//       const categories = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\n//       const profitValues = Object.values(calculateProfitLoss());\n//       const backgroundColors = profitValues.map((value) =>\n//         value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\n//       );\n\n//       const myChart = new window.Chart(ctx, {\n//         type: \"bar\",\n//         data: {\n//           //   labels: Object.keys(calculateProfitLoss()),\n//           labels: categories,\n//           datasets: [\n//             {\n//               label: \"Profit/Loss\",\n//               data: profitValues,\n//               backgroundColor: backgroundColors,\n//               barThickness: 40,\n//             },\n//           ],\n//         },\n//         options: {\n//           plugins: {\n//             legend: {\n//               display: false,\n//             },\n//           },\n//           scales: {\n//             x: {\n//               grid: {\n//                 display: false,\n//               },\n//             },\n//             y: {\n//               display: true,\n//               title: {\n//                 display: true,\n//                 text: \"Profit/Loss\",\n//               },\n//               grid: {\n//                 color: (context) =>\n//                   context.tick.value === 0\n//                     ? \"rgba(0, 0, 0, 1)\"\n//                     : \"rgba(0, 0, 0, 0)\",\n//                 lineWidth: 0.5,\n//               },\n//               ticks: {\n//                 callback: function (value, index, values) {\n//                   return value === 0 ? value : \"\";\n//                 },\n//               },\n//             },\n//           },\n//         },\n//       });\n\n//       // Cleanup function to destroy chart instance\n//       return () => {\n//         if (myChart) {\n//           myChart.destroy();\n//         }\n//       };\n//     }\n//   }, [loading, trades]);\n\n//   // Render loading message or chart canvas\n//   return (\n//     <div className=\"graph\">\n//       {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\n//     </div>\n//   );\n// };\n\n// export default Graph;","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchTrades","Graph","chartRef","loading","setLoading","trades","setTrades","console","log","then","data","catch","error","calculateProfitLossForLastWeek","now","Date","oneWeek","profitLossForLastWeek","forEach","trade","closeDate","timeDiff","profitLoss","length","ctx","current","getContext","week","myChart","window","Chart","type","labels","datasets","label","backgroundColor","barThickness","options","plugins","legend","display","scales","x","grid","y","title","text","color","context","tick","value","lineWidth","ticks","callback","index","values","destroy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/Graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { fetchTrades } from \"./ApiCalls\";\r\n\r\nconst Graph = () => {\r\n  // Reference to the chart canvas element\r\n  const chartRef = useRef(null);\r\n\r\n  // State variables for loading status and trade data\r\n  const [loading, setLoading] = useState(true);\r\n  const [trades, setTrades] = useState([]);\r\n\r\n  // Fetch trade data from backend\r\n  useEffect(() => {\r\n    console.log(\"Fetching trades...\");\r\n    fetchTrades()\r\n      .then((data) => {\r\n        console.log(\"Fetched trades:\", data);\r\n        setTrades(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching trades:\", error);\r\n      });\r\n  }, []);\r\n  // Calculate profit/loss for trades in the last 1 week\r\n  const calculateProfitLossForLastWeek = (trades) => {\r\n    const now = new Date();\r\n    const oneWeek = 1000 * 60 * 60 * 24 * 7;\r\n    let profitLossForLastWeek = 0;\r\n\r\n    trades.forEach((trade) => {\r\n      const closeDate = new Date(trade.closeDate);\r\n      const timeDiff = now - closeDate;\r\n\r\n      if (timeDiff <= oneWeek) {\r\n        profitLossForLastWeek += trade.profitLoss;\r\n      }\r\n    });\r\n\r\n    return profitLossForLastWeek;\r\n  };\r\n\r\n  // Effect hook to render chart when trade data is available\r\n  useEffect(() => {\r\n    console.log(\"Rendering chart...\");\r\n    if (!loading && trades.length > 0) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      // Calculate profit/loss for the last 1 day\r\n      const week = calculateProfitLossForLastWeek(trades);\r\n      console.log(\"Profit/Loss for the last week:\", week);\r\n\r\n      // Chart rendering logic\r\n      const myChart = new window.Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: [\"1W\"],\r\n          datasets: [\r\n            {\r\n              label: \"Profit/Loss\",\r\n              data: [week],\r\n              backgroundColor: week >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\",\r\n              barThickness: 40,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Profit/Loss\",\r\n              },\r\n              grid: {\r\n                color: (context) =>\r\n                  context.tick.value === 0\r\n                    ? \"rgba(0, 0, 0, 1)\"\r\n                    : \"rgba(0, 0, 0, 0)\",\r\n                lineWidth: 0.5,\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, values) {\r\n                  return value === 0 ? value : \"\";\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      console.log(\"Created chart instance:\", myChart);\r\n\r\n      // Cleanup function to destroy chart instance\r\n      return () => {\r\n        console.log(\"Destroying chart instance...\");\r\n        if (myChart) {\r\n          myChart.destroy();\r\n        }\r\n      };\r\n    }\r\n  }, [loading, trades]);\r\n\r\n  // Render loading message or chart canvas\r\n  return (\r\n    <div className=\"graph\">\r\n      {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import { fetchTrades } from \"./ApiCalls\";\r\n\r\n// const Graph = () => {\r\n//   // Reference to the chart canvas element\r\n//   const chartRef = useRef(null);\r\n\r\n//   // State variables for loading status, trade data, and profits\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [trades, setTrades] = useState([]);\r\n//   const [profits, setProfits] = useState({});\r\n\r\n//   // Fetch trade data from backend\r\n//   useEffect(() => {\r\n//     fetchTrades()\r\n//       .then((data) => {\r\n//         setTrades(data);\r\n//         const profitMap = {};\r\n//         data.forEach((trade) => {\r\n//           const profitLoss = trade.profitLoss;\r\n//           const date = trade.closeDate;\r\n//           if (!profitMap[date]) {\r\n//             profitMap[date] = 0;\r\n//           }\r\n//           profitMap[date] += profitLoss;\r\n//         });\r\n//         setProfits(profitMap);\r\n//         setLoading(false);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching trades:\", error);\r\n//       });\r\n//   }, []);\r\n\r\n//   // Categorize each trade under: \"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\" based on close date\r\n//   const categorizeTrades = () => {\r\n//     const categorizedTrades = {};\r\n//     Object.keys(profits).forEach((date) => {\r\n//       const category = getTradeCategory(date);\r\n//       if (!categorizedTrades[category]) {\r\n//         categorizedTrades[category] = 0;\r\n//       }\r\n//       categorizedTrades[category] += profits[date];\r\n//     });\r\n//     return categorizedTrades;\r\n//   };\r\n\r\n//   const getTradeCategory = (date) => {\r\n//     const now = new Date();\r\n//     const oneDay = 1000 * 60 * 60 * 24;\r\n//     const oneWeek = oneDay * 7;\r\n//     const oneMonth = oneDay * 30;\r\n//     const threeMonths = oneDay * 90;\r\n//     const oneYear = oneDay * 365;\r\n\r\n//     if (date > now - oneDay) {\r\n//       return \"1D\";\r\n//     } else if (date > now - oneWeek) {\r\n//       return \"1W\";\r\n//     } else if (date > now - oneMonth) {\r\n//       return \"1M\";\r\n//     } else if (date > now - threeMonths) {\r\n//       return \"3M\";\r\n//     } else if (date > now - oneYear) {\r\n//       return \"1Y\";\r\n//     } else {\r\n//       return \"Max\";\r\n//     }\r\n//   };\r\n//   // Calculate total profit/loss for each category\r\n//   const calculateProfitLoss = () => {\r\n//     const categorizedProfits = categorizeTrades();\r\n//     return Object.keys(categorizedProfits).reduce((acc, category) => {\r\n//       acc[category] = categorizedProfits[category];\r\n//       return acc;\r\n//     }, {});\r\n//   };\r\n\r\n//   // Effect hook to render chart when trade data and profits are available\r\n//   useEffect(() => {\r\n//     if (!loading && trades.length > 0) {\r\n//       const ctx = chartRef.current.getContext(\"2d\");\r\n//       const categories = [\"1D\", \"1W\", \"1M\", \"3M\", \"YTD\", \"1Y\", \"Max\"];\r\n//       const profitValues = Object.values(calculateProfitLoss());\r\n//       const backgroundColors = profitValues.map((value) =>\r\n//         value >= 0 ? \"#bed1be\" : \"rgb(255, 204, 204)\"\r\n//       );\r\n\r\n//       const myChart = new window.Chart(ctx, {\r\n//         type: \"bar\",\r\n//         data: {\r\n//           //   labels: Object.keys(calculateProfitLoss()),\r\n//           labels: categories,\r\n//           datasets: [\r\n//             {\r\n//               label: \"Profit/Loss\",\r\n//               data: profitValues,\r\n//               backgroundColor: backgroundColors,\r\n//               barThickness: 40,\r\n//             },\r\n//           ],\r\n//         },\r\n//         options: {\r\n//           plugins: {\r\n//             legend: {\r\n//               display: false,\r\n//             },\r\n//           },\r\n//           scales: {\r\n//             x: {\r\n//               grid: {\r\n//                 display: false,\r\n//               },\r\n//             },\r\n//             y: {\r\n//               display: true,\r\n//               title: {\r\n//                 display: true,\r\n//                 text: \"Profit/Loss\",\r\n//               },\r\n//               grid: {\r\n//                 color: (context) =>\r\n//                   context.tick.value === 0\r\n//                     ? \"rgba(0, 0, 0, 1)\"\r\n//                     : \"rgba(0, 0, 0, 0)\",\r\n//                 lineWidth: 0.5,\r\n//               },\r\n//               ticks: {\r\n//                 callback: function (value, index, values) {\r\n//                   return value === 0 ? value : \"\";\r\n//                 },\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n\r\n//       // Cleanup function to destroy chart instance\r\n//       return () => {\r\n//         if (myChart) {\r\n//           myChart.destroy();\r\n//         }\r\n//       };\r\n//     }\r\n//   }, [loading, trades]);\r\n\r\n//   // Render loading message or chart canvas\r\n//   return (\r\n//     <div className=\"graph\">\r\n//       {loading ? <p>Loading...</p> : <canvas ref={chartRef} />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Graph;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module"}
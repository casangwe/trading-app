{"ast":null,"code":"// trading-app/trading-frontend/src/components/controllers/api/UserAPI.js\n\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Helper to get Authorization header\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"access_token\");\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Helper to parse `userId` as integer, if needed\nconst getParsedUserId = userId => {\n  const parsedUserId = parseInt(userId, 10);\n  if (isNaN(parsedUserId)) throw new Error(\"Invalid user ID format\");\n  return parsedUserId;\n};\n\n// Register Users\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/users/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      throw new Error(`Error registering user: ${errorDetails.detail || response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Register User Error:\", error);\n    throw error;\n  }\n};\n\n// Login Users\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/token`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: credentials\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || \"Error logging in\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Login Error:\", error);\n    throw error;\n  }\n};\n\n// Fetch all users\nexport const fetchUsers = async (skip = 0, limit = 100) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error(\"Error fetching users\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch Users Error:\", error);\n    throw error;\n  }\n};\n\n// Fetch specific user by `userId`\nexport const fetchUser = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${getParsedUserId(userId)}`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error(\"User not found\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Fetch User Error:\", error);\n    throw error;\n  }\n};\n\n// Update user data\nexport const updateUser = async (userId, userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${getParsedUserId(userId)}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...getAuthHeaders()\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) throw new Error(\"Error updating user\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Update User Error:\", error);\n    throw error;\n  }\n};\n\n// Delete user by `userId`\nexport const deleteUser = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${getParsedUserId(userId)}`, {\n      method: \"DELETE\",\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error(\"Error deleting user\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Delete User Error:\", error);\n    throw error;\n  }\n};\nexport default {\n  registerUser,\n  loginUser,\n  fetchUsers,\n  fetchUser,\n  updateUser,\n  deleteUser\n};\n\n// // trading-app/trading-frontend/src/components/controllers/api/UserAPI.js\n\n// const API_BASE_URL = \"http://localhost:8000\";\n\n// // Register Users\n// export const registerUser = async (userData) => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}/auth/users/`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(userData),\n//     });\n//     if (!response.ok) {\n//       const errorDetails = await response.json();\n//       throw new Error(\n//         `Error registering user: ${errorDetails.detail || response.statusText}`\n//       );\n//     }\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Register User Error:\", error);\n//     throw error;\n//   }\n// };\n\n// // Login Users\n// export const loginUser = async (credentials) => {\n//   try {\n//     console.log(\"Fetching login with credentials:\", credentials.toString());\n\n//     const response = await fetch(`${API_BASE_URL}/auth/token`, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: credentials,\n//     });\n\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || \"Error logging in\");\n//     }\n\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Login Error:\", error);\n//     throw error;\n//   }\n// };\n\n// export const fetchUsers = async (skip = 0, limit = 100) => {\n//   try {\n//     const response = await fetch(\n//       `${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`\n//     );\n//     if (!response.ok) throw new Error(\"Error fetching users\");\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Fetch Users Error:\", error);\n//     throw error;\n//   }\n// };\n\n// export const fetchUser = async (userId) => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}/users/${userId}`);\n//     if (!response.ok) throw new Error(\"User not found\");\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Fetch User Error:\", error);\n//     throw error;\n//   }\n// };\n\n// export const updateUser = async (userId, userData) => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n//       method: \"PUT\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(userData),\n//     });\n//     if (!response.ok) throw new Error(\"Error updating user\");\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Update User Error:\", error);\n//     throw error;\n//   }\n// };\n\n// export const deleteUser = async (userId) => {\n//   try {\n//     const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n//       method: \"DELETE\",\n//     });\n//     if (!response.ok) throw new Error(\"Error deleting user\");\n//     return await response.json();\n//   } catch (error) {\n//     console.error(\"Delete User Error:\", error);\n//     throw error;\n//   }\n// };\n\n// export default {\n//   fetchUsers,\n//   fetchUser,\n//   updateUser,\n//   deleteUser,\n// };","map":{"version":3,"names":["API_BASE_URL","getAuthHeaders","token","localStorage","getItem","Authorization","getParsedUserId","userId","parsedUserId","parseInt","isNaN","Error","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorDetails","json","detail","statusText","error","console","loginUser","credentials","errorData","fetchUsers","skip","limit","fetchUser","updateUser","deleteUser"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/api/UserAPI.js"],"sourcesContent":["// trading-app/trading-frontend/src/components/controllers/api/UserAPI.js\r\n\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Helper to get Authorization header\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// Helper to parse `userId` as integer, if needed\r\nconst getParsedUserId = (userId) => {\r\n  const parsedUserId = parseInt(userId, 10);\r\n  if (isNaN(parsedUserId)) throw new Error(\"Invalid user ID format\");\r\n  return parsedUserId;\r\n};\r\n\r\n// Register Users\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/users/`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    if (!response.ok) {\r\n      const errorDetails = await response.json();\r\n      throw new Error(\r\n        `Error registering user: ${errorDetails.detail || response.statusText}`\r\n      );\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Register User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Login Users\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/token`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: credentials,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.detail || \"Error logging in\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Login Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all users\r\nexport const fetchUsers = async (skip = 0, limit = 100) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`,\r\n      {\r\n        headers: getAuthHeaders(),\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error fetching users\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch Users Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch specific user by `userId`\r\nexport const fetchUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/${getParsedUserId(userId)}`,\r\n      {\r\n        headers: getAuthHeaders(),\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"User not found\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Fetch User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update user data\r\nexport const updateUser = async (userId, userData) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/${getParsedUserId(userId)}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\", ...getAuthHeaders() },\r\n        body: JSON.stringify(userData),\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error updating user\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Update User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete user by `userId`\r\nexport const deleteUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/${getParsedUserId(userId)}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: getAuthHeaders(),\r\n      }\r\n    );\r\n    if (!response.ok) throw new Error(\"Error deleting user\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Delete User Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  registerUser,\r\n  loginUser,\r\n  fetchUsers,\r\n  fetchUser,\r\n  updateUser,\r\n  deleteUser,\r\n};\r\n\r\n// // trading-app/trading-frontend/src/components/controllers/api/UserAPI.js\r\n\r\n// const API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// // Register Users\r\n// export const registerUser = async (userData) => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}/auth/users/`, {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify(userData),\r\n//     });\r\n//     if (!response.ok) {\r\n//       const errorDetails = await response.json();\r\n//       throw new Error(\r\n//         `Error registering user: ${errorDetails.detail || response.statusText}`\r\n//       );\r\n//     }\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Register User Error:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// // Login Users\r\n// export const loginUser = async (credentials) => {\r\n//   try {\r\n//     console.log(\"Fetching login with credentials:\", credentials.toString());\r\n\r\n//     const response = await fetch(`${API_BASE_URL}/auth/token`, {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: credentials,\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       const errorData = await response.json();\r\n//       throw new Error(errorData.detail || \"Error logging in\");\r\n//     }\r\n\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Login Error:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const fetchUsers = async (skip = 0, limit = 100) => {\r\n//   try {\r\n//     const response = await fetch(\r\n//       `${API_BASE_URL}/users/?skip=${skip}&limit=${limit}`\r\n//     );\r\n//     if (!response.ok) throw new Error(\"Error fetching users\");\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Fetch Users Error:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const fetchUser = async (userId) => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}/users/${userId}`);\r\n//     if (!response.ok) throw new Error(\"User not found\");\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Fetch User Error:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateUser = async (userId, userData) => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n//       method: \"PUT\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify(userData),\r\n//     });\r\n//     if (!response.ok) throw new Error(\"Error updating user\");\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Update User Error:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const deleteUser = async (userId) => {\r\n//   try {\r\n//     const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n//       method: \"DELETE\",\r\n//     });\r\n//     if (!response.ok) throw new Error(\"Error deleting user\");\r\n//     return await response.json();\r\n//   } catch (error) {\r\n//     console.error(\"Delete User Error:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export default {\r\n//   fetchUsers,\r\n//   fetchUser,\r\n//   updateUser,\r\n//   deleteUser,\r\n// };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
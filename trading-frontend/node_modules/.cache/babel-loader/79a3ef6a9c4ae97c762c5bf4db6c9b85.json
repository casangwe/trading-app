{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\casan\\\\trading-app\\\\trading-frontend\\\\src\\\\components\\\\controllers\\\\trades\\\\EQTcurve.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTrades } from \"../api/TradesAPI\";\nimport { getCash } from \"../api/CashApi\";\nimport { Line, XAxis, Tooltip, ResponsiveContainer, LineChart, YAxis, ReferenceArea } from \"recharts\";\nimport { formatCash, formatDate } from \"../func/functions\";\nconst EQTCurve = () => {\n  const [chartData, setChartData] = useState([]);\n  const [shadedRegions, setShadedRegions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAndFormatData = async () => {\n      try {\n        const cashData = await getCash();\n        const trades = await fetchTrades();\n        if (cashData && trades && trades.length > 0) {\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\n          const formattedData = formatChartData(trades, startingEquity);\n          setChartData(formattedData);\n          setShadedRegions(calculateShadedRegions(formattedData));\n        } else {\n          setError(\"No trade or cash data available\");\n        }\n      } catch (error) {\n        setError(\"Error fetching trade or cash data\");\n        console.error(\"Error:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAndFormatData();\n  }, []);\n  const formatChartData = (trades, startingEquity) => {\n    let cumulativeEquity = startingEquity;\n    const idealIncrement = (startingEquity * 3 - startingEquity) / trades.length;\n    const sortedTrades = trades.sort((a, b) => new Date(a.close_date) - new Date(b.close_date));\n    return sortedTrades.map((trade, index) => {\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\n      return {\n        date: formatDate(trade.close_date),\n        equity: cumulativeEquity,\n        idealEquity: idealEquity\n      };\n    });\n  };\n  const calculateShadedRegions = data => {\n    const regions = [];\n    let startShadeDate = null;\n    let shadeType = null;\n    data.forEach((point, index) => {\n      if (index === 0) return;\n      const prevPoint = data[index - 1];\n      const {\n        date,\n        equity,\n        idealEquity\n      } = point;\n      if (prevPoint.equity < prevPoint.idealEquity && equity >= idealEquity) {\n        if (shadeType === \"below\") {\n          regions.push({\n            start: startShadeDate,\n            end: prevPoint.date,\n            type: \"below\",\n            color: \"red\"\n          });\n        }\n        startShadeDate = prevPoint.date;\n        shadeType = \"above\";\n      } else if (prevPoint.equity > prevPoint.idealEquity && equity <= idealEquity) {\n        if (shadeType === \"above\") {\n          regions.push({\n            start: startShadeDate,\n            end: prevPoint.date,\n            type: \"above\",\n            color: \"green\"\n          });\n        }\n        startShadeDate = prevPoint.date;\n        shadeType = \"below\";\n      }\n    });\n    if (shadeType) {\n      regions.push({\n        start: startShadeDate,\n        end: data[data.length - 1].date,\n        type: shadeType\n      });\n    }\n    return regions;\n  };\n\n  // Find index of date in chartData\n  const getDateIndex = date => {\n    return chartData.findIndex(item => item.date === date);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"equity-curve-chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    style: {\n      background: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: false,\n    axisLine: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: false,\n    content: ({\n      payload\n    }) => {\n      if (payload && payload.length) {\n        const {\n          date,\n          equity\n        } = payload[0].payload;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tooltip-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 23\n          }\n        }, formatCash(equity)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"trade-date\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 23\n          }\n        }, date));\n      }\n      return null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), shadedRegions.map((region, index) => /*#__PURE__*/React.createElement(ReferenceArea, {\n    key: index,\n    x1: getDateIndex(region.start),\n    x2: getDateIndex(region.end),\n    y1: \"dataMin\",\n    y2: \"dataMax\",\n    fill: region.type === \"above\" ? \"lightblue\" : \"lightcoral\",\n    fillOpacity: 0.2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"idealEquity\",\n    stroke: \"#9AD3BC\",\n    strokeWidth: 2,\n    dot: false,\n    name: \"Ideal Equity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"equity\",\n    stroke: \"#4A90E2\",\n    strokeWidth: 2,\n    dot: false,\n    name: \"Equity Curve\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default EQTCurve;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTrades } from \"../api/TradesAPI\";\n// import { getCash } from \"../api/CashApi\";\n// import {\n//   Line,\n//   XAxis,\n//   Tooltip,\n//   ResponsiveContainer,\n//   LineChart,\n//   YAxis,\n//   ReferenceArea,\n// } from \"recharts\";\n// import { formatCash, formatDate } from \"../func/functions\";\n\n// const EQTCurve = () => {\n//   const [chartData, setChartData] = useState([]);\n//   const [shadedRegions, setShadedRegions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchAndFormatData = async () => {\n//       try {\n//         const cashData = await getCash();\n//         const trades = await fetchTrades();\n\n//         if (cashData && trades && trades.length > 0) {\n//           const startingEquity = parseFloat(cashData.initial_cash || 0);\n//           const formattedData = formatChartData(trades, startingEquity);\n//           setChartData(formattedData);\n//           setShadedRegions(calculateShadedRegions(formattedData));\n//         } else {\n//           setError(\"No trade or cash data available\");\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching trade or cash data\");\n//         console.error(\"Error:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchAndFormatData();\n//   }, []);\n\n//   const formatChartData = (trades, startingEquity) => {\n//     let cumulativeEquity = startingEquity;\n//     const idealIncrement =\n//       (startingEquity * 3 - startingEquity) / trades.length;\n\n//     const sortedTrades = trades.sort(\n//       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n//     );\n\n//     return sortedTrades.map((trade, index) => {\n//       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n//       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n//       return {\n//         date: formatDate(trade.close_date),\n//         equity: cumulativeEquity,\n//         idealEquity: idealEquity,\n//       };\n//     });\n//   };\n\n//   const calculateShadedRegions = (data) => {\n//     const regions = [];\n//     let startShadeDate = null;\n//     let shadeType = null; // Track if currently above or below ideal equity line\n\n//     data.forEach((point, index) => {\n//       if (index === 0) return;\n\n//       const prevPoint = data[index - 1];\n//       const { date, equity, idealEquity } = point;\n\n//       // Detect crossover: determine if we're starting a new shaded region\n//       if (prevPoint.equity < prevPoint.idealEquity && equity >= idealEquity) {\n//         if (shadeType === \"below\") {\n//           regions.push({\n//             start: startShadeDate,\n//             end: prevPoint.date,\n//             type: \"below\",\n//           });\n//         }\n//         startShadeDate = prevPoint.date;\n//         shadeType = \"above\";\n//       } else if (\n//         prevPoint.equity > prevPoint.idealEquity &&\n//         equity <= idealEquity\n//       ) {\n//         if (shadeType === \"above\") {\n//           regions.push({\n//             start: startShadeDate,\n//             end: prevPoint.date,\n//             type: \"above\",\n//           });\n//         }\n//         startShadeDate = prevPoint.date;\n//         shadeType = \"below\";\n//       }\n//     });\n\n//     // Add the final region if one is open\n//     if (shadeType) {\n//       regions.push({\n//         start: startShadeDate,\n//         end: data[data.length - 1].date,\n//         type: shadeType,\n//       });\n//     }\n\n//     console.log(\"Shaded Regions:\", regions); // For debugging\n//     return regions;\n//   };\n\n//   return (\n//     <div className=\"equity-curve-chart-container\">\n//       {loading ? (\n//         <div>Loading...</div>\n//       ) : error ? (\n//         <div>{error}</div>\n//       ) : (\n//         <ResponsiveContainer width=\"100%\" height={300}>\n//           <LineChart data={chartData} style={{ background: \"transparent\" }}>\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n//             <YAxis hide={true} />\n\n//             <Tooltip\n//               cursor={false}\n//               content={({ payload }) => {\n//                 if (payload && payload.length) {\n//                   const { date, equity } = payload[0].payload;\n//                   return (\n//                     <div className=\"tooltip-content\">\n//                       <p>{formatCash(equity)}</p>\n//                       <p className=\"trade-date\">{date}</p>\n//                     </div>\n//                   );\n//                 }\n//                 return null;\n//               }}\n//             />\n\n//             {/* Render shaded regions */}\n//             {shadedRegions.map((region, index) => (\n//               <ReferenceArea\n//                 key={index}\n//                 x1={region.start}\n//                 x2={region.end}\n//                 y1=\"dataMin\"\n//                 y2=\"dataMax\"\n//                 fill={region.type === \"above\" ? \"lightblue\" : \"lightcoral\"}\n//                 fillOpacity={0.2}\n//               />\n//             ))}\n\n//             {/* Ideal Equity Line */}\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"idealEquity\"\n//               stroke=\"#9AD3BC\"\n//               strokeWidth={2}\n//               dot={false}\n//               name=\"Ideal Equity\"\n//             />\n\n//             {/* Equity Curve Line */}\n//             <Line\n//               type=\"monotone\"\n//               dataKey=\"equity\"\n//               stroke=\"#4A90E2\"\n//               strokeWidth={2}\n//               dot={false}\n//               name=\"Equity Curve\"\n//             />\n//           </LineChart>\n//         </ResponsiveContainer>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EQTCurve;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { fetchTrades } from \"../api/TradesAPI\";\n// // import { getCash } from \"../api/CashApi\";\n// // import {\n// //   Line,\n// //   XAxis,\n// //   Tooltip,\n// //   ResponsiveContainer,\n// //   LineChart,\n// //   YAxis,\n// //   ReferenceArea,\n// // } from \"recharts\";\n// // import { formatCash, formatDate } from \"../func/functions\";\n\n// // const EQTCurve = () => {\n// //   const [chartData, setChartData] = useState([]);\n// //   const [shadedRegions, setShadedRegions] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchAndFormatData = async () => {\n// //       try {\n// //         const cashData = await getCash();\n// //         const trades = await fetchTrades();\n\n// //         if (cashData && trades && trades.length > 0) {\n// //           const startingEquity = parseFloat(cashData.initial_cash || 0);\n// //           const formattedData = formatChartData(trades, startingEquity);\n// //           setChartData(formattedData);\n// //           setShadedRegions(calculateShadedRegions(formattedData));\n// //         } else {\n// //           setError(\"No trade or cash data available\");\n// //         }\n// //       } catch (error) {\n// //         setError(\"Error fetching trade or cash data\");\n// //         console.error(\"Error:\", error);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchAndFormatData();\n// //   }, []);\n\n// //   const formatChartData = (trades, startingEquity) => {\n// //     let cumulativeEquity = startingEquity;\n// //     const idealIncrement =\n// //       (startingEquity * 3 - startingEquity) / trades.length;\n\n// //     const sortedTrades = trades.sort(\n// //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n// //     );\n\n// //     return sortedTrades.map((trade, index) => {\n// //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n// //       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n// //       return {\n// //         date: formatDate(trade.close_date),\n// //         equity: cumulativeEquity,\n// //         idealEquity: idealEquity,\n// //       };\n// //     });\n// //   };\n\n// //   const calculateShadedRegions = (data) => {\n// //     const regions = [];\n// //     let inShadeRegion = false;\n// //     let startShadeDate = null;\n// //     let shadeType = null; // 'above' for light blue, 'below' for light red\n\n// //     data.forEach((point, index) => {\n// //       if (index === 0) return;\n\n// //       const prevPoint = data[index - 1];\n// //       const { date, equity, idealEquity } = point;\n\n// //       if (!inShadeRegion && equity !== idealEquity) {\n// //         // Start a new shading region\n// //         startShadeDate = prevPoint.date;\n// //         shadeType = equity > idealEquity ? \"above\" : \"below\";\n// //         inShadeRegion = true;\n// //       } else if (\n// //         inShadeRegion &&\n// //         ((shadeType === \"above\" && equity < idealEquity) ||\n// //           (shadeType === \"below\" && equity > idealEquity))\n// //       ) {\n// //         // End the current shading region\n// //         regions.push({\n// //           start: startShadeDate,\n// //           end: prevPoint.date,\n// //           type: shadeType,\n// //         });\n// //         inShadeRegion = false;\n// //       }\n// //     });\n\n// //     return regions;\n// //   };\n\n// //   return (\n// //     <div className=\"equity-curve-chart-container\">\n// //       {loading ? (\n// //         <div>Loading...</div>\n// //       ) : error ? (\n// //         <div>{error}</div>\n// //       ) : (\n// //         <ResponsiveContainer width=\"100%\" height={300}>\n// //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// //             <YAxis hide={true} />\n\n// //             <Tooltip\n// //               cursor={false}\n// //               content={({ payload }) => {\n// //                 if (payload && payload.length) {\n// //                   const { date, equity } = payload[0].payload;\n// //                   return (\n// //                     <div className=\"tooltip-content\">\n// //                       <p>{formatCash(equity)}</p>\n// //                       <p className=\"trade-date\">{date}</p>\n// //                     </div>\n// //                   );\n// //                 }\n// //                 return null;\n// //               }}\n// //             />\n\n// //             {/* Render shaded regions between equity and idealEquity */}\n// //             {shadedRegions.map((region, index) => (\n// //               <ReferenceArea\n// //                 key={index}\n// //                 x1={region.start}\n// //                 x2={region.end}\n// //                 y1=\"dataMin\"\n// //                 y2=\"dataMax\"\n// //                 fill={region.type === \"above\" ? \"lightblue\" : \"lightcoral\"}\n// //                 fillOpacity={0.2}\n// //               />\n// //             ))}\n\n// //             {/* Ideal Equity Line */}\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"idealEquity\"\n// //               stroke=\"#9AD3BC\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //               name=\"Ideal Equity\"\n// //             />\n\n// //             {/* Equity Curve Line */}\n// //             <Line\n// //               type=\"monotone\"\n// //               dataKey=\"equity\"\n// //               stroke=\"#4A90E2\"\n// //               strokeWidth={2}\n// //               dot={false}\n// //               name=\"Equity Curve\"\n// //             />\n// //           </LineChart>\n// //         </ResponsiveContainer>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EQTCurve;\n\n// // // import React, { useState, useEffect } from \"react\";\n// // // import { fetchTrades } from \"../api/TradesAPI\";\n// // // import { getCash } from \"../api/CashApi\";\n// // // import {\n// // //   Line,\n// // //   XAxis,\n// // //   Tooltip,\n// // //   ResponsiveContainer,\n// // //   LineChart,\n// // //   YAxis,\n// // // } from \"recharts\";\n// // // import { formatCash, formatDate } from \"../func/functions\";\n\n// // // const EQTCurve = () => {\n// // //   const [chartData, setChartData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     const fetchAndFormatData = async () => {\n// // //       try {\n// // //         const cashData = await getCash();\n// // //         const trades = await fetchTrades();\n\n// // //         if (cashData && trades && trades.length > 0) {\n// // //           const startingEquity = parseFloat(cashData.initial_cash || 0);\n// // //           const formattedData = formatChartData(trades, startingEquity);\n// // //           setChartData(formattedData);\n// // //         } else {\n// // //           setError(\"No trade or cash data available\");\n// // //         }\n// // //       } catch (error) {\n// // //         setError(\"Error fetching trade or cash data\");\n// // //         console.error(\"Error:\", error);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchAndFormatData();\n// // //   }, []);\n\n// // //   const formatChartData = (trades, startingEquity) => {\n// // //     let cumulativeEquity = startingEquity;\n// // //     const idealIncrement =\n// // //       (startingEquity * 3 - startingEquity) / trades.length;\n\n// // //     const sortedTrades = trades.sort(\n// // //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n// // //     );\n\n// // //     return sortedTrades.map((trade, index) => {\n// // //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n// // //       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n// // //       return {\n// // //         date: formatDate(trade.close_date),\n// // //         equity: cumulativeEquity,\n// // //         idealEquity: idealEquity,\n// // //       };\n// // //     });\n// // //   };\n\n// // //   return (\n// // //     <div className=\"equity-curve-chart-container\">\n// // //       {loading ? (\n// // //         <div>Loading...</div>\n// // //       ) : error ? (\n// // //         <div>{error}</div>\n// // //       ) : (\n// // //         <ResponsiveContainer width=\"100%\" height={300}>\n// // //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\n// // //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// // //             <YAxis hide={true} />\n\n// // //             <Tooltip\n// // //               cursor={false}\n// // //               content={({ payload }) => {\n// // //                 if (payload && payload.length) {\n// // //                   const { date, equity } = payload[0].payload;\n// // //                   return (\n// // //                     <div className=\"tooltip-content\">\n// // //                       <p>{formatCash(equity)}</p>\n// // //                       <p className=\"trade-date\">{date}</p>\n// // //                     </div>\n// // //                   );\n// // //                 }\n// // //                 return null;\n// // //               }}\n// // //             />\n\n// // //             {/* Ideal Equity Line */}\n// // //             <Line\n// // //               type=\"monotone\"\n// // //               dataKey=\"idealEquity\"\n// // //               stroke=\"#9AD3BC\" // Use consistent, muted color\n// // //               strokeWidth={2}\n// // //               dot={false}\n// // //               name=\"Ideal Equity\"\n// // //             />\n\n// // //             {/* Equity Curve Line */}\n// // //             <Line\n// // //               type=\"monotone\"\n// // //               dataKey=\"equity\"\n// // //               stroke=\"#4A90E2\"\n// // //               strokeWidth={2}\n// // //               //   dot={{ r: 3 }}\n// // //               dot={false}\n// // //               name=\"Equity Curve\"\n// // //             />\n// // //           </LineChart>\n// // //         </ResponsiveContainer>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default EQTCurve;\n\n// // // import React, { useState, useEffect } from \"react\";\n// // // import { fetchTrades } from \"../api/TradesAPI\";\n// // // import { getCash } from \"../api/CashApi\";\n// // // import {\n// // //   Line,\n// // //   XAxis,\n// // //   Tooltip,\n// // //   ResponsiveContainer,\n// // //   LineChart,\n// // //   YAxis,\n// // // } from \"recharts\";\n// // // import { formatCash, formatDate } from \"../func/functions\";\n\n// // // const EQTCurve = () => {\n// // //   const [chartData, setChartData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     const fetchAndFormatData = async () => {\n// // //       try {\n// // //         const cashData = await getCash();\n// // //         const trades = await fetchTrades();\n\n// // //         if (cashData && trades && trades.length > 0) {\n// // //           const startingEquity = parseFloat(cashData.initial_cash || 0);\n// // //           const formattedData = formatChartData(trades, startingEquity);\n// // //           setChartData(formattedData);\n// // //         } else {\n// // //           setError(\"No trade or cash data available\");\n// // //         }\n// // //       } catch (error) {\n// // //         setError(\"Error fetching trade or cash data\");\n// // //         console.error(\"Error:\", error);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchAndFormatData();\n// // //   }, []);\n\n// // //   const formatChartData = (trades, startingEquity) => {\n// // //     let cumulativeEquity = startingEquity;\n// // //     const idealIncrement =\n// // //       (startingEquity * 3 - startingEquity) / trades.length;\n\n// // //     const sortedTrades = trades.sort(\n// // //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n// // //     );\n\n// // //     return sortedTrades.map((trade, index) => {\n// // //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n// // //       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n// // //       return {\n// // //         date: formatDate(trade.close_date),\n// // //         equity: cumulativeEquity,\n// // //         idealEquity: idealEquity,\n// // //       };\n// // //     });\n// // //   };\n\n// // //   return (\n// // //     <div className=\"equity-curve-chart-container\">\n// // //       {loading ? (\n// // //         <div>Loading...</div>\n// // //       ) : error ? (\n// // //         <div>{error}</div>\n// // //       ) : (\n// // //         <ResponsiveContainer width=\"100%\" height={400}>\n// // //           <LineChart data={chartData}>\n// // //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// // //             <YAxis tickFormatter={formatCash} />\n\n// // //             <Tooltip\n// // //               cursor={false}\n// // //               content={({ payload }) => {\n// // //                 if (payload && payload.length) {\n// // //                   const { date, equity } = payload[0].payload;\n// // //                   return (\n// // //                     <div className=\"tooltip-content\">\n// // //                       <p>{formatCash(equity)}</p>\n// // //                       <p className=\"trade-date\">{date}</p>\n// // //                     </div>\n// // //                   );\n// // //                 }\n// // //                 return null;\n// // //               }}\n// // //             />\n\n// // //             {/* Ideal Equity Line */}\n// // //             <Line\n// // //               type=\"monotone\"\n// // //               dataKey=\"idealEquity\"\n// // //               stroke=\"green\"\n// // //               strokeWidth={2}\n// // //               dot={false}\n// // //               name=\"Ideal Equity\"\n// // //             />\n\n// // //             {/* Equity Curve Line */}\n// // //             <Line\n// // //               type=\"monotone\"\n// // //               dataKey=\"equity\"\n// // //               stroke=\"purple\"\n// // //               strokeWidth={2}\n// // //               dot={{ r: 3 }}\n// // //               name=\"Equity Curve\"\n// // //             />\n// // //           </LineChart>\n// // //         </ResponsiveContainer>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default EQTCurve;\n\n// // // import React, { useState, useEffect } from \"react\";\n// // // import { fetchTrades } from \"../api/TradesAPI\";\n// // // import { getCash } from \"../api/CashApi\";\n// // // import {\n// // //   Line,\n// // //   XAxis,\n// // //   Tooltip,\n// // //   ResponsiveContainer,\n// // //   Area,\n// // //   AreaChart,\n// // // } from \"recharts\";\n// // // import { formatCash, formatDate } from \"../func/functions\";\n\n// // // const EQTCurve = () => {\n// // //   const [chartData, setChartData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     const fetchAndFormatData = async () => {\n// // //       try {\n// // //         const cashData = await getCash();\n// // //         const trades = await fetchTrades();\n\n// // //         if (cashData && trades && trades.length > 0) {\n// // //           const startingEquity = parseFloat(cashData.initial_cash || 0);\n// // //           const formattedData = formatChartData(trades, startingEquity);\n// // //           setChartData(formattedData);\n// // //         } else {\n// // //           setError(\"No trade or cash data available\");\n// // //         }\n// // //       } catch (error) {\n// // //         setError(\"Error fetching trade or cash data\");\n// // //         console.error(\"Error:\", error);\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchAndFormatData();\n// // //   }, []);\n\n// // //   const formatChartData = (trades, startingEquity) => {\n// // //     let cumulativeEquity = startingEquity;\n// // //     const idealIncrement =\n// // //       (startingEquity * 3 - startingEquity) / trades.length;\n\n// // //     // Sort trades by close date in ascending order (oldest to newest)\n// // //     const sortedTrades = trades.sort(\n// // //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\n// // //     );\n\n// // //     return sortedTrades.map((trade, index) => {\n// // //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\n// // //       const idealEquity = startingEquity + idealIncrement * (index + 1);\n\n// // //       return {\n// // //         date: formatDate(trade.close_date),\n// // //         equity: cumulativeEquity,\n// // //         idealEquity: idealEquity,\n// // //         above: cumulativeEquity > idealEquity ? cumulativeEquity : idealEquity,\n// // //         below: cumulativeEquity < idealEquity ? cumulativeEquity : idealEquity,\n// // //       };\n// // //     });\n// // //   };\n\n// // //   return (\n// // //     <div className=\"equity-curve-chart-container\">\n// // //       {loading ? (\n// // //         <div>Loading...</div>\n// // //       ) : error ? (\n// // //         <div>{error}</div>\n// // //       ) : (\n// // //         <ResponsiveContainer width=\"100%\" height={400}>\n// // //           <AreaChart data={chartData}>\n// // //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\n// // //             <Tooltip\n// // //               cursor={false}\n// // //               content={({ payload }) => {\n// // //                 if (payload && payload.length) {\n// // //                   const { date, equity } = payload[0].payload;\n// // //                   return (\n// // //                     <div className=\"tooltip-content\">\n// // //                       <p>{formatCash(equity)}</p>\n// // //                       <p className=\"trade-date\">{date}</p>\n// // //                     </div>\n// // //                   );\n// // //                 }\n// // //                 return null;\n// // //               }}\n// // //             />\n\n// // //             {/* Ideal Line */}\n// // //             <Line\n// // //               type=\"monotone\"\n// // //               dataKey=\"idealEquity\"\n// // //               stroke=\"green\"\n// // //               strokeWidth={2}\n// // //               dot={false}\n// // //             />\n\n// // //             {/* Equity Curve Line */}\n// // //             <Line\n// // //               type=\"monotone\"\n// // //               dataKey=\"equity\"\n// // //               stroke=\"purple\"\n// // //               strokeWidth={2}\n// // //               dot={{ r: 3 }}\n// // //             />\n\n// // //             {/* Area Above Ideal Line */}\n// // //             <Area\n// // //               type=\"monotone\"\n// // //               dataKey=\"above\"\n// // //               stroke=\"none\"\n// // //               fill=\"pink\"\n// // //               fillOpacity={0.5}\n// // //             />\n\n// // //             {/* Area Below Ideal Line */}\n// // //             <Area\n// // //               type=\"monotone\"\n// // //               dataKey=\"below\"\n// // //               stroke=\"none\"\n// // //               fill=\"lightblue\"\n// // //               fillOpacity={0.5}\n// // //             />\n// // //           </AreaChart>\n// // //         </ResponsiveContainer>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default EQTCurve;","map":{"version":3,"names":["React","useState","useEffect","fetchTrades","getCash","Line","XAxis","Tooltip","ResponsiveContainer","LineChart","YAxis","ReferenceArea","formatCash","formatDate","EQTCurve","chartData","setChartData","shadedRegions","setShadedRegions","loading","setLoading","error","setError","fetchAndFormatData","cashData","trades","length","startingEquity","parseFloat","initial_cash","formattedData","formatChartData","calculateShadedRegions","console","cumulativeEquity","idealIncrement","sortedTrades","sort","a","b","Date","close_date","map","trade","index","profit_loss","idealEquity","date","equity","data","regions","startShadeDate","shadeType","forEach","point","prevPoint","push","start","end","type","color","getDateIndex","findIndex","item","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","height","style","background","dataKey","tick","axisLine","hide","cursor","content","payload","region","key","x1","x2","y1","y2","fill","fillOpacity","stroke","strokeWidth","dot","name"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/trades/EQTcurve.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTrades } from \"../api/TradesAPI\";\r\nimport { getCash } from \"../api/CashApi\";\r\nimport {\r\n  Line,\r\n  XAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  YAxis,\r\n  ReferenceArea,\r\n} from \"recharts\";\r\nimport { formatCash, formatDate } from \"../func/functions\";\r\n\r\nconst EQTCurve = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [shadedRegions, setShadedRegions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAndFormatData = async () => {\r\n      try {\r\n        const cashData = await getCash();\r\n        const trades = await fetchTrades();\r\n\r\n        if (cashData && trades && trades.length > 0) {\r\n          const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n          const formattedData = formatChartData(trades, startingEquity);\r\n          setChartData(formattedData);\r\n          setShadedRegions(calculateShadedRegions(formattedData));\r\n        } else {\r\n          setError(\"No trade or cash data available\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching trade or cash data\");\r\n        console.error(\"Error:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAndFormatData();\r\n  }, []);\r\n\r\n  const formatChartData = (trades, startingEquity) => {\r\n    let cumulativeEquity = startingEquity;\r\n    const idealIncrement =\r\n      (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n    const sortedTrades = trades.sort(\r\n      (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n    );\r\n\r\n    return sortedTrades.map((trade, index) => {\r\n      cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n      const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n      return {\r\n        date: formatDate(trade.close_date),\r\n        equity: cumulativeEquity,\r\n        idealEquity: idealEquity,\r\n      };\r\n    });\r\n  };\r\n\r\n  const calculateShadedRegions = (data) => {\r\n    const regions = [];\r\n    let startShadeDate = null;\r\n    let shadeType = null;\r\n\r\n    data.forEach((point, index) => {\r\n      if (index === 0) return;\r\n\r\n      const prevPoint = data[index - 1];\r\n      const { date, equity, idealEquity } = point;\r\n\r\n      if (prevPoint.equity < prevPoint.idealEquity && equity >= idealEquity) {\r\n        if (shadeType === \"below\") {\r\n          regions.push({\r\n            start: startShadeDate,\r\n            end: prevPoint.date,\r\n            type: \"below\",\r\n            color: \"red\",\r\n          });\r\n        }\r\n        startShadeDate = prevPoint.date;\r\n        shadeType = \"above\";\r\n      } else if (\r\n        prevPoint.equity > prevPoint.idealEquity &&\r\n        equity <= idealEquity\r\n      ) {\r\n        if (shadeType === \"above\") {\r\n          regions.push({\r\n            start: startShadeDate,\r\n            end: prevPoint.date,\r\n            type: \"above\",\r\n            color: \"green\",\r\n          });\r\n        }\r\n        startShadeDate = prevPoint.date;\r\n        shadeType = \"below\";\r\n      }\r\n    });\r\n\r\n    if (shadeType) {\r\n      regions.push({\r\n        start: startShadeDate,\r\n        end: data[data.length - 1].date,\r\n        type: shadeType,\r\n      });\r\n    }\r\n\r\n    return regions;\r\n  };\r\n\r\n  // Find index of date in chartData\r\n  const getDateIndex = (date) => {\r\n    return chartData.findIndex((item) => item.date === date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"equity-curve-chart-container\">\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n            <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n            <YAxis hide={true} />\r\n\r\n            <Tooltip\r\n              cursor={false}\r\n              content={({ payload }) => {\r\n                if (payload && payload.length) {\r\n                  const { date, equity } = payload[0].payload;\r\n                  return (\r\n                    <div className=\"tooltip-content\">\r\n                      <p>{formatCash(equity)}</p>\r\n                      <p className=\"trade-date\">{date}</p>\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n\r\n            {shadedRegions.map((region, index) => (\r\n              <ReferenceArea\r\n                key={index}\r\n                x1={getDateIndex(region.start)}\r\n                x2={getDateIndex(region.end)}\r\n                y1=\"dataMin\"\r\n                y2=\"dataMax\"\r\n                fill={region.type === \"above\" ? \"lightblue\" : \"lightcoral\"}\r\n                fillOpacity={0.2}\r\n              />\r\n            ))}\r\n\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"idealEquity\"\r\n              stroke=\"#9AD3BC\"\r\n              strokeWidth={2}\r\n              dot={false}\r\n              name=\"Ideal Equity\"\r\n            />\r\n\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"equity\"\r\n              stroke=\"#4A90E2\"\r\n              strokeWidth={2}\r\n              dot={false}\r\n              name=\"Equity Curve\"\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EQTCurve;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { fetchTrades } from \"../api/TradesAPI\";\r\n// import { getCash } from \"../api/CashApi\";\r\n// import {\r\n//   Line,\r\n//   XAxis,\r\n//   Tooltip,\r\n//   ResponsiveContainer,\r\n//   LineChart,\r\n//   YAxis,\r\n//   ReferenceArea,\r\n// } from \"recharts\";\r\n// import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// const EQTCurve = () => {\r\n//   const [chartData, setChartData] = useState([]);\r\n//   const [shadedRegions, setShadedRegions] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAndFormatData = async () => {\r\n//       try {\r\n//         const cashData = await getCash();\r\n//         const trades = await fetchTrades();\r\n\r\n//         if (cashData && trades && trades.length > 0) {\r\n//           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n//           const formattedData = formatChartData(trades, startingEquity);\r\n//           setChartData(formattedData);\r\n//           setShadedRegions(calculateShadedRegions(formattedData));\r\n//         } else {\r\n//           setError(\"No trade or cash data available\");\r\n//         }\r\n//       } catch (error) {\r\n//         setError(\"Error fetching trade or cash data\");\r\n//         console.error(\"Error:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchAndFormatData();\r\n//   }, []);\r\n\r\n//   const formatChartData = (trades, startingEquity) => {\r\n//     let cumulativeEquity = startingEquity;\r\n//     const idealIncrement =\r\n//       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n//     const sortedTrades = trades.sort(\r\n//       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n//     );\r\n\r\n//     return sortedTrades.map((trade, index) => {\r\n//       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n//       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n//       return {\r\n//         date: formatDate(trade.close_date),\r\n//         equity: cumulativeEquity,\r\n//         idealEquity: idealEquity,\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const calculateShadedRegions = (data) => {\r\n//     const regions = [];\r\n//     let startShadeDate = null;\r\n//     let shadeType = null; // Track if currently above or below ideal equity line\r\n\r\n//     data.forEach((point, index) => {\r\n//       if (index === 0) return;\r\n\r\n//       const prevPoint = data[index - 1];\r\n//       const { date, equity, idealEquity } = point;\r\n\r\n//       // Detect crossover: determine if we're starting a new shaded region\r\n//       if (prevPoint.equity < prevPoint.idealEquity && equity >= idealEquity) {\r\n//         if (shadeType === \"below\") {\r\n//           regions.push({\r\n//             start: startShadeDate,\r\n//             end: prevPoint.date,\r\n//             type: \"below\",\r\n//           });\r\n//         }\r\n//         startShadeDate = prevPoint.date;\r\n//         shadeType = \"above\";\r\n//       } else if (\r\n//         prevPoint.equity > prevPoint.idealEquity &&\r\n//         equity <= idealEquity\r\n//       ) {\r\n//         if (shadeType === \"above\") {\r\n//           regions.push({\r\n//             start: startShadeDate,\r\n//             end: prevPoint.date,\r\n//             type: \"above\",\r\n//           });\r\n//         }\r\n//         startShadeDate = prevPoint.date;\r\n//         shadeType = \"below\";\r\n//       }\r\n//     });\r\n\r\n//     // Add the final region if one is open\r\n//     if (shadeType) {\r\n//       regions.push({\r\n//         start: startShadeDate,\r\n//         end: data[data.length - 1].date,\r\n//         type: shadeType,\r\n//       });\r\n//     }\r\n\r\n//     console.log(\"Shaded Regions:\", regions); // For debugging\r\n//     return regions;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"equity-curve-chart-container\">\r\n//       {loading ? (\r\n//         <div>Loading...</div>\r\n//       ) : error ? (\r\n//         <div>{error}</div>\r\n//       ) : (\r\n//         <ResponsiveContainer width=\"100%\" height={300}>\r\n//           <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n//             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n//             <YAxis hide={true} />\r\n\r\n//             <Tooltip\r\n//               cursor={false}\r\n//               content={({ payload }) => {\r\n//                 if (payload && payload.length) {\r\n//                   const { date, equity } = payload[0].payload;\r\n//                   return (\r\n//                     <div className=\"tooltip-content\">\r\n//                       <p>{formatCash(equity)}</p>\r\n//                       <p className=\"trade-date\">{date}</p>\r\n//                     </div>\r\n//                   );\r\n//                 }\r\n//                 return null;\r\n//               }}\r\n//             />\r\n\r\n//             {/* Render shaded regions */}\r\n//             {shadedRegions.map((region, index) => (\r\n//               <ReferenceArea\r\n//                 key={index}\r\n//                 x1={region.start}\r\n//                 x2={region.end}\r\n//                 y1=\"dataMin\"\r\n//                 y2=\"dataMax\"\r\n//                 fill={region.type === \"above\" ? \"lightblue\" : \"lightcoral\"}\r\n//                 fillOpacity={0.2}\r\n//               />\r\n//             ))}\r\n\r\n//             {/* Ideal Equity Line */}\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"idealEquity\"\r\n//               stroke=\"#9AD3BC\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//               name=\"Ideal Equity\"\r\n//             />\r\n\r\n//             {/* Equity Curve Line */}\r\n//             <Line\r\n//               type=\"monotone\"\r\n//               dataKey=\"equity\"\r\n//               stroke=\"#4A90E2\"\r\n//               strokeWidth={2}\r\n//               dot={false}\r\n//               name=\"Equity Curve\"\r\n//             />\r\n//           </LineChart>\r\n//         </ResponsiveContainer>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EQTCurve;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // import { getCash } from \"../api/CashApi\";\r\n// // import {\r\n// //   Line,\r\n// //   XAxis,\r\n// //   Tooltip,\r\n// //   ResponsiveContainer,\r\n// //   LineChart,\r\n// //   YAxis,\r\n// //   ReferenceArea,\r\n// // } from \"recharts\";\r\n// // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // const EQTCurve = () => {\r\n// //   const [chartData, setChartData] = useState([]);\r\n// //   const [shadedRegions, setShadedRegions] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [error, setError] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchAndFormatData = async () => {\r\n// //       try {\r\n// //         const cashData = await getCash();\r\n// //         const trades = await fetchTrades();\r\n\r\n// //         if (cashData && trades && trades.length > 0) {\r\n// //           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n// //           const formattedData = formatChartData(trades, startingEquity);\r\n// //           setChartData(formattedData);\r\n// //           setShadedRegions(calculateShadedRegions(formattedData));\r\n// //         } else {\r\n// //           setError(\"No trade or cash data available\");\r\n// //         }\r\n// //       } catch (error) {\r\n// //         setError(\"Error fetching trade or cash data\");\r\n// //         console.error(\"Error:\", error);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchAndFormatData();\r\n// //   }, []);\r\n\r\n// //   const formatChartData = (trades, startingEquity) => {\r\n// //     let cumulativeEquity = startingEquity;\r\n// //     const idealIncrement =\r\n// //       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n// //     const sortedTrades = trades.sort(\r\n// //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n// //     );\r\n\r\n// //     return sortedTrades.map((trade, index) => {\r\n// //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n// //       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n// //       return {\r\n// //         date: formatDate(trade.close_date),\r\n// //         equity: cumulativeEquity,\r\n// //         idealEquity: idealEquity,\r\n// //       };\r\n// //     });\r\n// //   };\r\n\r\n// //   const calculateShadedRegions = (data) => {\r\n// //     const regions = [];\r\n// //     let inShadeRegion = false;\r\n// //     let startShadeDate = null;\r\n// //     let shadeType = null; // 'above' for light blue, 'below' for light red\r\n\r\n// //     data.forEach((point, index) => {\r\n// //       if (index === 0) return;\r\n\r\n// //       const prevPoint = data[index - 1];\r\n// //       const { date, equity, idealEquity } = point;\r\n\r\n// //       if (!inShadeRegion && equity !== idealEquity) {\r\n// //         // Start a new shading region\r\n// //         startShadeDate = prevPoint.date;\r\n// //         shadeType = equity > idealEquity ? \"above\" : \"below\";\r\n// //         inShadeRegion = true;\r\n// //       } else if (\r\n// //         inShadeRegion &&\r\n// //         ((shadeType === \"above\" && equity < idealEquity) ||\r\n// //           (shadeType === \"below\" && equity > idealEquity))\r\n// //       ) {\r\n// //         // End the current shading region\r\n// //         regions.push({\r\n// //           start: startShadeDate,\r\n// //           end: prevPoint.date,\r\n// //           type: shadeType,\r\n// //         });\r\n// //         inShadeRegion = false;\r\n// //       }\r\n// //     });\r\n\r\n// //     return regions;\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"equity-curve-chart-container\">\r\n// //       {loading ? (\r\n// //         <div>Loading...</div>\r\n// //       ) : error ? (\r\n// //         <div>{error}</div>\r\n// //       ) : (\r\n// //         <ResponsiveContainer width=\"100%\" height={300}>\r\n// //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n// //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// //             <YAxis hide={true} />\r\n\r\n// //             <Tooltip\r\n// //               cursor={false}\r\n// //               content={({ payload }) => {\r\n// //                 if (payload && payload.length) {\r\n// //                   const { date, equity } = payload[0].payload;\r\n// //                   return (\r\n// //                     <div className=\"tooltip-content\">\r\n// //                       <p>{formatCash(equity)}</p>\r\n// //                       <p className=\"trade-date\">{date}</p>\r\n// //                     </div>\r\n// //                   );\r\n// //                 }\r\n// //                 return null;\r\n// //               }}\r\n// //             />\r\n\r\n// //             {/* Render shaded regions between equity and idealEquity */}\r\n// //             {shadedRegions.map((region, index) => (\r\n// //               <ReferenceArea\r\n// //                 key={index}\r\n// //                 x1={region.start}\r\n// //                 x2={region.end}\r\n// //                 y1=\"dataMin\"\r\n// //                 y2=\"dataMax\"\r\n// //                 fill={region.type === \"above\" ? \"lightblue\" : \"lightcoral\"}\r\n// //                 fillOpacity={0.2}\r\n// //               />\r\n// //             ))}\r\n\r\n// //             {/* Ideal Equity Line */}\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"idealEquity\"\r\n// //               stroke=\"#9AD3BC\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //               name=\"Ideal Equity\"\r\n// //             />\r\n\r\n// //             {/* Equity Curve Line */}\r\n// //             <Line\r\n// //               type=\"monotone\"\r\n// //               dataKey=\"equity\"\r\n// //               stroke=\"#4A90E2\"\r\n// //               strokeWidth={2}\r\n// //               dot={false}\r\n// //               name=\"Equity Curve\"\r\n// //             />\r\n// //           </LineChart>\r\n// //         </ResponsiveContainer>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default EQTCurve;\r\n\r\n// // // import React, { useState, useEffect } from \"react\";\r\n// // // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // // import { getCash } from \"../api/CashApi\";\r\n// // // import {\r\n// // //   Line,\r\n// // //   XAxis,\r\n// // //   Tooltip,\r\n// // //   ResponsiveContainer,\r\n// // //   LineChart,\r\n// // //   YAxis,\r\n// // // } from \"recharts\";\r\n// // // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // // const EQTCurve = () => {\r\n// // //   const [chartData, setChartData] = useState([]);\r\n// // //   const [loading, setLoading] = useState(true);\r\n// // //   const [error, setError] = useState(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const fetchAndFormatData = async () => {\r\n// // //       try {\r\n// // //         const cashData = await getCash();\r\n// // //         const trades = await fetchTrades();\r\n\r\n// // //         if (cashData && trades && trades.length > 0) {\r\n// // //           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n// // //           const formattedData = formatChartData(trades, startingEquity);\r\n// // //           setChartData(formattedData);\r\n// // //         } else {\r\n// // //           setError(\"No trade or cash data available\");\r\n// // //         }\r\n// // //       } catch (error) {\r\n// // //         setError(\"Error fetching trade or cash data\");\r\n// // //         console.error(\"Error:\", error);\r\n// // //       } finally {\r\n// // //         setLoading(false);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     fetchAndFormatData();\r\n// // //   }, []);\r\n\r\n// // //   const formatChartData = (trades, startingEquity) => {\r\n// // //     let cumulativeEquity = startingEquity;\r\n// // //     const idealIncrement =\r\n// // //       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n// // //     const sortedTrades = trades.sort(\r\n// // //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n// // //     );\r\n\r\n// // //     return sortedTrades.map((trade, index) => {\r\n// // //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n// // //       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n// // //       return {\r\n// // //         date: formatDate(trade.close_date),\r\n// // //         equity: cumulativeEquity,\r\n// // //         idealEquity: idealEquity,\r\n// // //       };\r\n// // //     });\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"equity-curve-chart-container\">\r\n// // //       {loading ? (\r\n// // //         <div>Loading...</div>\r\n// // //       ) : error ? (\r\n// // //         <div>{error}</div>\r\n// // //       ) : (\r\n// // //         <ResponsiveContainer width=\"100%\" height={300}>\r\n// // //           <LineChart data={chartData} style={{ background: \"transparent\" }}>\r\n// // //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// // //             <YAxis hide={true} />\r\n\r\n// // //             <Tooltip\r\n// // //               cursor={false}\r\n// // //               content={({ payload }) => {\r\n// // //                 if (payload && payload.length) {\r\n// // //                   const { date, equity } = payload[0].payload;\r\n// // //                   return (\r\n// // //                     <div className=\"tooltip-content\">\r\n// // //                       <p>{formatCash(equity)}</p>\r\n// // //                       <p className=\"trade-date\">{date}</p>\r\n// // //                     </div>\r\n// // //                   );\r\n// // //                 }\r\n// // //                 return null;\r\n// // //               }}\r\n// // //             />\r\n\r\n// // //             {/* Ideal Equity Line */}\r\n// // //             <Line\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"idealEquity\"\r\n// // //               stroke=\"#9AD3BC\" // Use consistent, muted color\r\n// // //               strokeWidth={2}\r\n// // //               dot={false}\r\n// // //               name=\"Ideal Equity\"\r\n// // //             />\r\n\r\n// // //             {/* Equity Curve Line */}\r\n// // //             <Line\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"equity\"\r\n// // //               stroke=\"#4A90E2\"\r\n// // //               strokeWidth={2}\r\n// // //               //   dot={{ r: 3 }}\r\n// // //               dot={false}\r\n// // //               name=\"Equity Curve\"\r\n// // //             />\r\n// // //           </LineChart>\r\n// // //         </ResponsiveContainer>\r\n// // //       )}\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default EQTCurve;\r\n\r\n// // // import React, { useState, useEffect } from \"react\";\r\n// // // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // // import { getCash } from \"../api/CashApi\";\r\n// // // import {\r\n// // //   Line,\r\n// // //   XAxis,\r\n// // //   Tooltip,\r\n// // //   ResponsiveContainer,\r\n// // //   LineChart,\r\n// // //   YAxis,\r\n// // // } from \"recharts\";\r\n// // // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // // const EQTCurve = () => {\r\n// // //   const [chartData, setChartData] = useState([]);\r\n// // //   const [loading, setLoading] = useState(true);\r\n// // //   const [error, setError] = useState(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const fetchAndFormatData = async () => {\r\n// // //       try {\r\n// // //         const cashData = await getCash();\r\n// // //         const trades = await fetchTrades();\r\n\r\n// // //         if (cashData && trades && trades.length > 0) {\r\n// // //           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n// // //           const formattedData = formatChartData(trades, startingEquity);\r\n// // //           setChartData(formattedData);\r\n// // //         } else {\r\n// // //           setError(\"No trade or cash data available\");\r\n// // //         }\r\n// // //       } catch (error) {\r\n// // //         setError(\"Error fetching trade or cash data\");\r\n// // //         console.error(\"Error:\", error);\r\n// // //       } finally {\r\n// // //         setLoading(false);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     fetchAndFormatData();\r\n// // //   }, []);\r\n\r\n// // //   const formatChartData = (trades, startingEquity) => {\r\n// // //     let cumulativeEquity = startingEquity;\r\n// // //     const idealIncrement =\r\n// // //       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n// // //     const sortedTrades = trades.sort(\r\n// // //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n// // //     );\r\n\r\n// // //     return sortedTrades.map((trade, index) => {\r\n// // //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n// // //       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n// // //       return {\r\n// // //         date: formatDate(trade.close_date),\r\n// // //         equity: cumulativeEquity,\r\n// // //         idealEquity: idealEquity,\r\n// // //       };\r\n// // //     });\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"equity-curve-chart-container\">\r\n// // //       {loading ? (\r\n// // //         <div>Loading...</div>\r\n// // //       ) : error ? (\r\n// // //         <div>{error}</div>\r\n// // //       ) : (\r\n// // //         <ResponsiveContainer width=\"100%\" height={400}>\r\n// // //           <LineChart data={chartData}>\r\n// // //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// // //             <YAxis tickFormatter={formatCash} />\r\n\r\n// // //             <Tooltip\r\n// // //               cursor={false}\r\n// // //               content={({ payload }) => {\r\n// // //                 if (payload && payload.length) {\r\n// // //                   const { date, equity } = payload[0].payload;\r\n// // //                   return (\r\n// // //                     <div className=\"tooltip-content\">\r\n// // //                       <p>{formatCash(equity)}</p>\r\n// // //                       <p className=\"trade-date\">{date}</p>\r\n// // //                     </div>\r\n// // //                   );\r\n// // //                 }\r\n// // //                 return null;\r\n// // //               }}\r\n// // //             />\r\n\r\n// // //             {/* Ideal Equity Line */}\r\n// // //             <Line\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"idealEquity\"\r\n// // //               stroke=\"green\"\r\n// // //               strokeWidth={2}\r\n// // //               dot={false}\r\n// // //               name=\"Ideal Equity\"\r\n// // //             />\r\n\r\n// // //             {/* Equity Curve Line */}\r\n// // //             <Line\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"equity\"\r\n// // //               stroke=\"purple\"\r\n// // //               strokeWidth={2}\r\n// // //               dot={{ r: 3 }}\r\n// // //               name=\"Equity Curve\"\r\n// // //             />\r\n// // //           </LineChart>\r\n// // //         </ResponsiveContainer>\r\n// // //       )}\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default EQTCurve;\r\n\r\n// // // import React, { useState, useEffect } from \"react\";\r\n// // // import { fetchTrades } from \"../api/TradesAPI\";\r\n// // // import { getCash } from \"../api/CashApi\";\r\n// // // import {\r\n// // //   Line,\r\n// // //   XAxis,\r\n// // //   Tooltip,\r\n// // //   ResponsiveContainer,\r\n// // //   Area,\r\n// // //   AreaChart,\r\n// // // } from \"recharts\";\r\n// // // import { formatCash, formatDate } from \"../func/functions\";\r\n\r\n// // // const EQTCurve = () => {\r\n// // //   const [chartData, setChartData] = useState([]);\r\n// // //   const [loading, setLoading] = useState(true);\r\n// // //   const [error, setError] = useState(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const fetchAndFormatData = async () => {\r\n// // //       try {\r\n// // //         const cashData = await getCash();\r\n// // //         const trades = await fetchTrades();\r\n\r\n// // //         if (cashData && trades && trades.length > 0) {\r\n// // //           const startingEquity = parseFloat(cashData.initial_cash || 0);\r\n// // //           const formattedData = formatChartData(trades, startingEquity);\r\n// // //           setChartData(formattedData);\r\n// // //         } else {\r\n// // //           setError(\"No trade or cash data available\");\r\n// // //         }\r\n// // //       } catch (error) {\r\n// // //         setError(\"Error fetching trade or cash data\");\r\n// // //         console.error(\"Error:\", error);\r\n// // //       } finally {\r\n// // //         setLoading(false);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     fetchAndFormatData();\r\n// // //   }, []);\r\n\r\n// // //   const formatChartData = (trades, startingEquity) => {\r\n// // //     let cumulativeEquity = startingEquity;\r\n// // //     const idealIncrement =\r\n// // //       (startingEquity * 3 - startingEquity) / trades.length;\r\n\r\n// // //     // Sort trades by close date in ascending order (oldest to newest)\r\n// // //     const sortedTrades = trades.sort(\r\n// // //       (a, b) => new Date(a.close_date) - new Date(b.close_date)\r\n// // //     );\r\n\r\n// // //     return sortedTrades.map((trade, index) => {\r\n// // //       cumulativeEquity += parseFloat(trade.profit_loss || 0) * 100;\r\n// // //       const idealEquity = startingEquity + idealIncrement * (index + 1);\r\n\r\n// // //       return {\r\n// // //         date: formatDate(trade.close_date),\r\n// // //         equity: cumulativeEquity,\r\n// // //         idealEquity: idealEquity,\r\n// // //         above: cumulativeEquity > idealEquity ? cumulativeEquity : idealEquity,\r\n// // //         below: cumulativeEquity < idealEquity ? cumulativeEquity : idealEquity,\r\n// // //       };\r\n// // //     });\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"equity-curve-chart-container\">\r\n// // //       {loading ? (\r\n// // //         <div>Loading...</div>\r\n// // //       ) : error ? (\r\n// // //         <div>{error}</div>\r\n// // //       ) : (\r\n// // //         <ResponsiveContainer width=\"100%\" height={400}>\r\n// // //           <AreaChart data={chartData}>\r\n// // //             <XAxis dataKey=\"date\" tick={false} axisLine={false} />\r\n// // //             <Tooltip\r\n// // //               cursor={false}\r\n// // //               content={({ payload }) => {\r\n// // //                 if (payload && payload.length) {\r\n// // //                   const { date, equity } = payload[0].payload;\r\n// // //                   return (\r\n// // //                     <div className=\"tooltip-content\">\r\n// // //                       <p>{formatCash(equity)}</p>\r\n// // //                       <p className=\"trade-date\">{date}</p>\r\n// // //                     </div>\r\n// // //                   );\r\n// // //                 }\r\n// // //                 return null;\r\n// // //               }}\r\n// // //             />\r\n\r\n// // //             {/* Ideal Line */}\r\n// // //             <Line\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"idealEquity\"\r\n// // //               stroke=\"green\"\r\n// // //               strokeWidth={2}\r\n// // //               dot={false}\r\n// // //             />\r\n\r\n// // //             {/* Equity Curve Line */}\r\n// // //             <Line\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"equity\"\r\n// // //               stroke=\"purple\"\r\n// // //               strokeWidth={2}\r\n// // //               dot={{ r: 3 }}\r\n// // //             />\r\n\r\n// // //             {/* Area Above Ideal Line */}\r\n// // //             <Area\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"above\"\r\n// // //               stroke=\"none\"\r\n// // //               fill=\"pink\"\r\n// // //               fillOpacity={0.5}\r\n// // //             />\r\n\r\n// // //             {/* Area Below Ideal Line */}\r\n// // //             <Area\r\n// // //               type=\"monotone\"\r\n// // //               dataKey=\"below\"\r\n// // //               stroke=\"none\"\r\n// // //               fill=\"lightblue\"\r\n// // //               fillOpacity={0.5}\r\n// // //             />\r\n// // //           </AreaChart>\r\n// // //         </ResponsiveContainer>\r\n// // //       )}\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default EQTCurve;\r\n"],"mappings":"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List":[]},"metadata":{},"sourceType":"module"}
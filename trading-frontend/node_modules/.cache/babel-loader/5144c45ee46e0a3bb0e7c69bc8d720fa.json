{"ast":null,"code":"// Calculate Initial Cash (Assumes it's provided from the initial state or API)\nexport const calculateInitialCash = initialCash => {\n  const initialCashNumber = Number(initialCash);\n  return isNaN(initialCashNumber) ? 0 : initialCashNumber;\n};\n\n// Calculate Net Profit/Loss from trades (sum of profit/loss for each trade)\nexport const calculateNetPL = trades => {\n  return trades.reduce((totalPL, trade) => {\n    const profitLoss = (trade.exit_price - trade.entry_price) * trade.contracts;\n    return totalPL + profitLoss;\n  }, 0);\n};\n\n// Calculate Available Cash (Initial cash - cost of trades)\nexport const calculateAvailableCash = (initialCash, trades) => {\n  const initialCashNumber = calculateInitialCash(initialCash);\n  const usedCash = trades.reduce((totalCost, trade) => {\n    const cost = trade.entry_price * trade.contracts; // Total cost of entering the trade\n    return totalCost + cost;\n  }, 0);\n  return initialCashNumber - usedCash;\n};\n\n// Calculate Cash Balance (Initial Cash + Net Profit/Loss)\nexport const calculateCashBalance = (initialCash, netPL) => {\n  const initialCashNumber = calculateInitialCash(initialCash);\n  const netPLNumber = Number(netPL);\n  if (isNaN(initialCashNumber) || isNaN(netPLNumber)) {\n    console.error(\"Invalid input to calculateCashBalance:\", {\n      initialCash,\n      netPL\n    });\n    return 0;\n  }\n  return initialCashNumber + netPLNumber;\n};\n\n// Calculate Return on Investment (RoI) as a percentage\nexport const calculateROI = (initialCash, netPL) => {\n  const initialCashNumber = calculateInitialCash(initialCash);\n  if (initialCashNumber === 0) return 0;\n  return netPL / initialCashNumber * 100;\n};\n\n// Sample additional metrics you may need:\n\n// Calculate total cost of all trades (useful for understanding how much cash was committed to trades)\nexport const calculateTotalCostOfTrades = trades => {\n  return trades.reduce((totalCost, trade) => {\n    return totalCost + trade.entry_price * trade.contracts;\n  }, 0);\n};\n\n// Calculate total revenue from all trades (useful for knowing total returns)\nexport const calculateTotalRevenueFromTrades = trades => {\n  return trades.reduce((totalRevenue, trade) => {\n    return totalRevenue + trade.exit_price * trade.contracts;\n  }, 0);\n};","map":{"version":3,"names":["calculateInitialCash","initialCash","initialCashNumber","Number","isNaN","calculateNetPL","trades","reduce","totalPL","trade","profitLoss","exit_price","entry_price","contracts","calculateAvailableCash","usedCash","totalCost","cost","calculateCashBalance","netPL","netPLNumber","console","error","calculateROI","calculateTotalCostOfTrades","calculateTotalRevenueFromTrades","totalRevenue"],"sources":["C:/Users/casan/trading-app/trading-frontend/src/components/controllers/cash/CashCalc.js"],"sourcesContent":["// Calculate Initial Cash (Assumes it's provided from the initial state or API)\r\nexport const calculateInitialCash = (initialCash) => {\r\n  const initialCashNumber = Number(initialCash);\r\n  return isNaN(initialCashNumber) ? 0 : initialCashNumber;\r\n};\r\n\r\n// Calculate Net Profit/Loss from trades (sum of profit/loss for each trade)\r\nexport const calculateNetPL = (trades) => {\r\n  return trades.reduce((totalPL, trade) => {\r\n    const profitLoss = (trade.exit_price - trade.entry_price) * trade.contracts;\r\n    return totalPL + profitLoss;\r\n  }, 0);\r\n};\r\n\r\n// Calculate Available Cash (Initial cash - cost of trades)\r\nexport const calculateAvailableCash = (initialCash, trades) => {\r\n  const initialCashNumber = calculateInitialCash(initialCash);\r\n  const usedCash = trades.reduce((totalCost, trade) => {\r\n    const cost = trade.entry_price * trade.contracts; // Total cost of entering the trade\r\n    return totalCost + cost;\r\n  }, 0);\r\n\r\n  return initialCashNumber - usedCash;\r\n};\r\n\r\n// Calculate Cash Balance (Initial Cash + Net Profit/Loss)\r\nexport const calculateCashBalance = (initialCash, netPL) => {\r\n  const initialCashNumber = calculateInitialCash(initialCash);\r\n  const netPLNumber = Number(netPL);\r\n\r\n  if (isNaN(initialCashNumber) || isNaN(netPLNumber)) {\r\n    console.error(\"Invalid input to calculateCashBalance:\", {\r\n      initialCash,\r\n      netPL,\r\n    });\r\n    return 0;\r\n  }\r\n\r\n  return initialCashNumber + netPLNumber;\r\n};\r\n\r\n// Calculate Return on Investment (RoI) as a percentage\r\nexport const calculateROI = (initialCash, netPL) => {\r\n  const initialCashNumber = calculateInitialCash(initialCash);\r\n  if (initialCashNumber === 0) return 0;\r\n\r\n  return (netPL / initialCashNumber) * 100;\r\n};\r\n\r\n// Sample additional metrics you may need:\r\n\r\n// Calculate total cost of all trades (useful for understanding how much cash was committed to trades)\r\nexport const calculateTotalCostOfTrades = (trades) => {\r\n  return trades.reduce((totalCost, trade) => {\r\n    return totalCost + trade.entry_price * trade.contracts;\r\n  }, 0);\r\n};\r\n\r\n// Calculate total revenue from all trades (useful for knowing total returns)\r\nexport const calculateTotalRevenueFromTrades = (trades) => {\r\n  return trades.reduce((totalRevenue, trade) => {\r\n    return totalRevenue + trade.exit_price * trade.contracts;\r\n  }, 0);\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAIC,WAAW,IAAK;EACnD,MAAMC,iBAAiB,GAAGC,MAAM,CAACF,WAAW,CAAC;EAC7C,OAAOG,KAAK,CAACF,iBAAiB,CAAC,GAAG,CAAC,GAAGA,iBAAiB;AACzD,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAOA,MAAM,CAACC,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;IACvC,MAAMC,UAAU,GAAG,CAACD,KAAK,CAACE,UAAU,GAAGF,KAAK,CAACG,WAAW,IAAIH,KAAK,CAACI,SAAS;IAC3E,OAAOL,OAAO,GAAGE,UAAU;EAC7B,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMI,sBAAsB,GAAGA,CAACb,WAAW,EAAEK,MAAM,KAAK;EAC7D,MAAMJ,iBAAiB,GAAGF,oBAAoB,CAACC,WAAW,CAAC;EAC3D,MAAMc,QAAQ,GAAGT,MAAM,CAACC,MAAM,CAAC,CAACS,SAAS,EAAEP,KAAK,KAAK;IACnD,MAAMQ,IAAI,GAAGR,KAAK,CAACG,WAAW,GAAGH,KAAK,CAACI,SAAS,CAAC,CAAC;IAClD,OAAOG,SAAS,GAAGC,IAAI;EACzB,CAAC,EAAE,CAAC,CAAC;EAEL,OAAOf,iBAAiB,GAAGa,QAAQ;AACrC,CAAC;;AAED;AACA,OAAO,MAAMG,oBAAoB,GAAGA,CAACjB,WAAW,EAAEkB,KAAK,KAAK;EAC1D,MAAMjB,iBAAiB,GAAGF,oBAAoB,CAACC,WAAW,CAAC;EAC3D,MAAMmB,WAAW,GAAGjB,MAAM,CAACgB,KAAK,CAAC;EAEjC,IAAIf,KAAK,CAACF,iBAAiB,CAAC,IAAIE,KAAK,CAACgB,WAAW,CAAC,EAAE;IAClDC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAE;MACtDrB,WAAW;MACXkB;IACF,CAAC,CAAC;IACF,OAAO,CAAC;EACV;EAEA,OAAOjB,iBAAiB,GAAGkB,WAAW;AACxC,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAGA,CAACtB,WAAW,EAAEkB,KAAK,KAAK;EAClD,MAAMjB,iBAAiB,GAAGF,oBAAoB,CAACC,WAAW,CAAC;EAC3D,IAAIC,iBAAiB,KAAK,CAAC,EAAE,OAAO,CAAC;EAErC,OAAQiB,KAAK,GAAGjB,iBAAiB,GAAI,GAAG;AAC1C,CAAC;;AAED;;AAEA;AACA,OAAO,MAAMsB,0BAA0B,GAAIlB,MAAM,IAAK;EACpD,OAAOA,MAAM,CAACC,MAAM,CAAC,CAACS,SAAS,EAAEP,KAAK,KAAK;IACzC,OAAOO,SAAS,GAAGP,KAAK,CAACG,WAAW,GAAGH,KAAK,CAACI,SAAS;EACxD,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMY,+BAA+B,GAAInB,MAAM,IAAK;EACzD,OAAOA,MAAM,CAACC,MAAM,CAAC,CAACmB,YAAY,EAAEjB,KAAK,KAAK;IAC5C,OAAOiB,YAAY,GAAGjB,KAAK,CAACE,UAAU,GAAGF,KAAK,CAACI,SAAS;EAC1D,CAAC,EAAE,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}